"""
This file is for global constants to be declared
I'm doing this because in different modules, the
relative path to `user-config.ini` gets messed
up by having different `sys.path`, so I'm just
going to declare it once as a global constant
in the top level of the project.

There may be other constants I add to here

Also, maybe it's possible to have this inside
the core module and use a relative filepath
but still only set this value once as a constant,
instead of pulling out my hair figuring out how
to import this file from different relative
locations.
"""
import os

CORE_DIR = os.path.dirname(os.path.abspath(__file__))

ROOT_DIR = os.path.abspath(os.path.join(CORE_DIR, os.pardir))

USER_CONFIG_PATH = f"{ROOT_DIR}/user/user-config.ini"

EXCHANGE_API_KEYS = {}


print(USER_CONFIG_PATH)

from ccxt.coinspot import coinspot

my_coinspot = coinspot()

EXCHANGE_DESCRIPTIONS = [{
    'id': 'coinspot',
    'name': 'CoinSpot',
    'countries': ['AU'],  # Australia
    'rateLimit': 1000,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkOHLCV': False,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg',
        'api': {
            'public': 'https://www.coinspot.com.au/pubapi',
            'private': 'https://www.coinspot.com.au/api',
        },
        'www': 'https://www.coinspot.com.au',
        'doc': 'https://www.coinspot.com.au/api',
        'referral': 'https://www.coinspot.com.au/register?code=PJURCU',
    },
    'api': {
        'public': {
            'get': [
                'latest',
            ],
        },
        'private': {
            'post': [
                'orders',
                'orders/history',
                'my/coin/deposit',
                'my/coin/send',
                'quote/buy',
                'quote/sell',
                'my/balances',
                'my/orders',
                'my/buy',
                'my/sell',
                'my/buy/cancel',
                'my/sell/cancel',
                'ro/my/balances',
                'ro/my/balances/{cointype}',
                'ro/my/deposits',
                'ro/my/withdrawals',
                'ro/my/transactions',
                'ro/my/transactions/{cointype}',
                'ro/my/transactions/open',
                'ro/my/transactions/{cointype}/open',
                'ro/my/sendreceive',
                'ro/my/affiliatepayments',
                'ro/my/referralpayments',
            ],
        },
    },
    'markets': {
        'ADA/AUD': {'id': 'ada', 'symbol': 'ADA/AUD', 'base': 'ADA', 'quote': 'AUD', 'baseId': 'ada', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'BTC/AUD': {'id': 'btc', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD', 'baseId': 'btc', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'BTC/USDT': {'id': 'btc', 'symbol': 'BTC/USDT', 'base': 'BTC', 'quote': 'USDT', 'baseId': 'btc', 'quoteId': 'usdt', 'type': 'spot', 'spot': True},
        'ETH/AUD': {'id': 'eth', 'symbol': 'ETH/AUD', 'base': 'ETH', 'quote': 'AUD', 'baseId': 'eth', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'XRP/AUD': {'id': 'xrp', 'symbol': 'XRP/AUD', 'base': 'XRP', 'quote': 'AUD', 'baseId': 'xrp', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'LTC/AUD': {'id': 'ltc', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD', 'baseId': 'ltc', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'DOGE/AUD': {'id': 'doge', 'symbol': 'DOGE/AUD', 'base': 'DOGE', 'quote': 'AUD', 'baseId': 'doge', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'RFOX/AUD': {'id': 'rfox', 'symbol': 'RFOX/AUD', 'base': 'RFOX', 'quote': 'AUD', 'baseId': 'rfox', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'POWR/AUD': {'id': 'powr', 'symbol': 'POWR/AUD', 'base': 'POWR', 'quote': 'AUD', 'baseId': 'powr', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'NEO/AUD': {'id': 'neo', 'symbol': 'NEO/AUD', 'base': 'NEO', 'quote': 'AUD', 'baseId': 'neo', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'TRX/AUD': {'id': 'trx', 'symbol': 'TRX/AUD', 'base': 'TRX', 'quote': 'AUD', 'baseId': 'trx', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'EOS/AUD': {'id': 'eos', 'symbol': 'EOS/AUD', 'base': 'EOS', 'quote': 'AUD', 'baseId': 'eos', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'XLM/AUD': {'id': 'xlm', 'symbol': 'XLM/AUD', 'base': 'XLM', 'quote': 'AUD', 'baseId': 'xlm', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'RHOC/AUD': {'id': 'rhoc', 'symbol': 'RHOC/AUD', 'base': 'RHOC', 'quote': 'AUD', 'baseId': 'rhoc', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
        'GAS/AUD': {'id': 'gas', 'symbol': 'GAS/AUD', 'base': 'GAS', 'quote': 'AUD', 'baseId': 'gas', 'quoteId': 'aud', 'type': 'spot', 'spot': True},
    },
    'commonCurrencies': {
        'DRK': 'DASH',
    },
    'options': {
        'fetchBalance': 'private_post_my_balances',
    },
},
{
    'id': 'hitbtc',
    'name': 'HitBTC',
    'countries': ['HK'],
    # 300 requests per second => 1000ms / 300 = 3.333ms between requests on average(Trading)
    # 100 requests per second =>( 1000ms / rateLimit ) / 100 => cost = 3.0003(Market Data)
    # 10 requests per second =>( 1000ms / rateLimit ) / 10 => cost = 30.003(Other Requests)
    'rateLimit': 3.333,
    'version': '2',
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'editOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': None,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': None,
        'fetchOrderTrades': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': False,
        'fetchTransactions': True,
        'fetchWithdrawals': None,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'transfer': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': 'M1',
        '3m': 'M3',
        '5m': 'M5',
        '15m': 'M15',
        '30m': 'M30',  # default
        '1h': 'H1',
        '4h': 'H4',
        '1d': 'D1',
        '1w': 'D7',
        '1M': '1M',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
        'test': {
            'public': 'https://api.demo.hitbtc.com',
            'private': 'https://api.demo.hitbtc.com',
        },
        'api': {
            'public': 'https://api.hitbtc.com',
            'private': 'https://api.hitbtc.com',
        },
        'www': 'https://hitbtc.com',
        'referral': 'https://hitbtc.com/?ref_id=5a5d39a65d466',
        'doc': [
            'https://api.hitbtc.com/v2',
        ],
        'fees': [
            'https://hitbtc.com/fees-and-limits',
            'https://support.hitbtc.com/hc/en-us/articles/115005148605-Fees-and-limits',
        ],
    },
    'api': {
        'public': {
            'get': {
                'currency': 3,  # Available Currencies
                'currency/{currency}': 3,  # Get currency info
                'symbol': 3,  # Available Currency Symbols
                'symbol/{symbol}': 3,  # Get symbol info
                'ticker': 3,  # Ticker list for all symbols
                'ticker/{symbol}': 3,  # Ticker for symbol
                'trades': 3,
                'trades/{symbol}': 3,  # Trades
                'orderbook': 3,
                'orderbook/{symbol}': 3,  # Orderbook
                'candles': 3,
                'candles/{symbol}': 3,  # Candles
            },
        },
        'private': {
            'get': {
                'trading/balance': 30,  # Get trading balance
                'order': 30,  # List your current open orders
                'order/{clientOrderId}': 30,  # Get a single order by clientOrderId
                'trading/fee/all': 30,  # Get trading fee rate
                'trading/fee/{symbol}': 30,  # Get trading fee rate
                'margin/account': 30,
                'margin/account/{symbol}': 30,
                'margin/position': 30,
                'margin/position/{symbol}': 30,
                'margin/order': 30,
                'margin/order/{clientOrderId}': 30,
                'history/order': 30,  # Get historical orders
                'history/trades': 30,  # Get historical trades
                'history/order/{orderId}/trades': 30,  # Get historical trades by specified order
                'account/balance': 30,  # Get main acccount balance
                'account/crypto/address/{currency}': 30,  # Get current address
                'account/crypto/addresses/{currency}': 30,  # Get last 10 deposit addresses for currency
                'account/crypto/used-addresses/{currency}': 30,  # Get last 10 unique addresses used for withdraw by currency
                'account/crypto/estimate-withdraw': 30,
                'account/crypto/is-mine/{address}': 30,
                'account/transactions': 30,  # Get account transactions
                'account/transactions/{id}': 30,  # Get account transaction by id
                'sub-acc': 30,
                'sub-acc/acl': 30,
                'sub-acc/balance/{subAccountUserID}': 30,
                'sub-acc/deposit-address/{subAccountUserId}/{currency}': 30,
            },
            'post': {
                'order': 1,  # Create new order
                'margin/order': 1,
                'account/crypto/address/{currency}': 1,  # Create new crypto deposit address
                'account/crypto/withdraw': 1,  # Withdraw crypto
                'account/crypto/transfer-convert': 1,
                'account/transfer': 1,  # Transfer amount to trading account or to main account
                'account/transfer/internal': 1,
                'sub-acc/freeze': 1,
                'sub-acc/activate': 1,
                'sub-acc/transfer': 1,
            },
            'put': {
                'order/{clientOrderId}': 1,  # Create new order
                'margin/account/{symbol}': 1,
                'margin/order/{clientOrderId}': 1,
                'account/crypto/withdraw/{id}': 1,  # Commit crypto withdrawal
                'sub-acc/acl/{subAccountUserId}': 1,
            },
            'delete': {
                'order': 1,  # Cancel all open orders
                'order/{clientOrderId}': 1,  # Cancel order
                'margin/account': 1,
                'margin/account/{symbol}': 1,
                'margin/position': 1,
                'margin/position/{symbol}': 1,
                'margin/order': 1,
                'margin/order/{clientOrderId}': 1,
                'account/crypto/withdraw/{id}': 1,  # Rollback crypto withdrawal
            },
            # outdated?
            'patch': {
                'order/{clientOrderId}': 1,  # Cancel Replace order
            },
        },
    },
    'precisionMode': TICK_SIZE,
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': 0.1 / 100,
            'taker': 0.2 / 100,
        },
    },
    'options': {
        'networks': {
            'ETH': 'T20',
            'ERC20': 'T20',
            'TRX': 'TTRX',
            'TRC20': 'TTRX',
            'OMNI': '',
        },
        'defaultTimeInForce': 'FOK',
        'accountsByType': {
            'bank': 'bank',
            'exchange': 'exchange',
            'main': 'bank',  # alias of the above
            'funding': 'bank',
            'spot': 'exchange',
            'trade': 'exchange',
            'trading': 'exchange',
        },
        'fetchBalanceMethod': {
            'account': 'account',
            'bank': 'account',
            'main': 'account',
            'funding': 'account',
            'exchange': 'trading',
            'spot': 'trading',
            'trade': 'trading',
            'trading': 'trading',
        },
    },
    'commonCurrencies': {
        'AUTO': 'Cube',
        'BCC': 'BCC',  # initial symbol for Bitcoin Cash, now inactive
        'BDP': 'BidiPass',
        'BET': 'DAO.Casino',
        'BIT': 'BitRewards',
        'BOX': 'BOX Token',
        'CPT': 'Cryptaur',  # conflict with CPT = Contents Protocol https://github.com/ccxt/ccxt/issues/4920 and https://github.com/ccxt/ccxt/issues/6081
        'GET': 'Themis',
        'HSR': 'HC',
        'IQ': 'IQ.Cash',
        'LNC': 'LinkerCoin',
        'PLA': 'PlayChip',
        'PNT': 'Penta',
        'SBTC': 'Super Bitcoin',
        'STX': 'STOX',
        'TV': 'Tokenville',
        'USD': 'USDT',
        'XMT': 'MTL',
        'XPNT': 'PNT',
    },
    'exceptions': {
        '504': RequestTimeout,  # {"error":{"code":504,"message":"Gateway Timeout"}}
        '1002': AuthenticationError,  # {"error":{"code":1002,"message":"Authorization failed","description":""}}
        '1003': PermissionDenied,  # "Action is forbidden for self API key"
        '2010': InvalidOrder,  # "Quantity not a valid number"
        '2001': BadSymbol,  # "Symbol not found"
        '2011': InvalidOrder,  # "Quantity too low"
        '2020': InvalidOrder,  # "Price not a valid number"
        '20002': OrderNotFound,  # canceling non-existent order
        '20001': InsufficientFunds,  # {"error":{"code":20001,"message":"Insufficient funds","description":"Check that the funds are sufficient, given commissions"}}
        '20010': BadSymbol,  # {"error":{"code":20010,"message":"Exchange temporary closed","description":"Exchange market for self symbol is temporary closed"}}
    },
},
{
    'id': 'ripio',
    'name': 'Ripio',
    'countries': ['AR', 'BR'],  # Argentina
    'rateLimit': 50,
    'version': 'v1',
    'pro': True,
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/94507548-a83d6a80-0218-11eb-9998-28b9cec54165.jpg',
        'api': {
            'public': 'https://api.exchange.ripio.com/api',
            'private': 'https://api.exchange.ripio.com/api',
        },
        'www': 'https://exchange.ripio.com',
        'doc': [
            'https://exchange.ripio.com/en/api/',
        ],
        'fees': 'https://exchange.ripio.com/en/fee',
    },
    'api': {
        'public': {
            'get': [
                'rate/all/',
                'rate/{pair}/',
                'orderbook/{pair}/',
                'tradehistory/{pair}/',
                'pair/',
                'currency/',
                'orderbook/{pair}/depth/',
            ],
        },
        'private': {
            'get': [
                'balances/exchange_balances/',
                'order/{pair}/{order_id}/',
                'order/{pair}/',
                'trade/{pair}/',
            ],
            'post': [
                'order/{pair}/',
                'order/{pair}/{order_id}/cancel/',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': 0.0 / 100,
            'maker': 0.0 / 100,
        },
    },
    'precisionMode': TICK_SIZE,
    'requiredCredentials': {
        'apiKey': True,
        'secret': False,
    },
    'exceptions': {
        'exact': {
        },
        'broad': {
            'Authentication credentials were not provided': AuthenticationError,  # {"detail":"Authentication credentials were not provided."}
            'Disabled pair': BadSymbol,  # {"status_code":400,"errors":{"pair":["Invalid/Disabled pair BTC_ARS"]},"message":"An error has occurred, please check the form."}
            'Invalid order type': InvalidOrder,  # {"status_code":400,"errors":{"order_type":["Invalid order type. Valid options: ['MARKET', 'LIMIT']"]},"message":"An error has occurred, please check the form."}
            'Your balance is not enough': InsufficientFunds,  # {"status_code":400,"errors":{"non_field_errors":["Your balance is not enough for self order: You have 0 BTC but you need 1 BTC"]},"message":"An error has occurred, please check the form."}
            "Order couldn't be created": ExchangeError,  # {'status_code': 400,'errors': {'non_field_errors': _("Order couldn't be created")}, 'message': _('Seems like an unexpected error occurred. Please try again later or write us to support@ripio.com if the problem persists.')}
            # {"status_code":404,"errors":{"order":["Order 286e560e-b8a2-464b-8b84-15a7e2a67eab not found."]},"message":"An error has occurred, please check the form."}
            # {"status_code":404,"errors":{"trade":["Trade <trade_id> not found."]},"message":"An error has occurred, please check the form."}
            'not found': OrderNotFound,
            'Invalid pair': BadSymbol,  # {"status_code":400,"errors":{"pair":["Invalid pair FOOBAR"]},"message":"An error has occurred, please check the form."}
            'amount must be a number': BadRequest,  # {"status_code":400,"errors":{"amount":["amount must be a number"]},"message":"An error has occurred, please check the form."}
            'Total must be at least': InvalidOrder,  # {"status_code":400,"errors":{"non_field_errors":["Total must be at least 10."]},"message":"An error has occurred, please check the form."}
            'Account not found': BadRequest,  # {"error_description": "Account not found."}, "status": 404
            'Wrong password provided': AuthenticationError,  # {'error': "Wrong password provided."}, “status_code”: 400
            'User tokens limit': DDoSProtection,  # {'error': "User tokens limit. Can't create more than 10 tokens."}, “status_code”: 400
            'Something unexpected ocurred': ExchangeError,  # {'status_code': 400, 'errors': {'non_field_errors': 'Something unexpected ocurred!'}, 'message': 'Seems like an unexpected error occurred. Please try again later or write us to support@ripio.com if the problem persists.'}
            # {'status_code': 404, 'errors': {'account_balance': ['Exchange balance <currency>not found.']},'message': 'An error has occurred, please check the form.'}
            # {'status_code': 404, 'errors': {'account_balance': ['Account balance <id> not found.']},'message': 'An error has occurred, please check the form.'}
            'account_balance': BadRequest,
        },
    },
},
{
    'id': 'bitflyer',
    'name': 'bitFlyer',
    'countries': ['JP'],
    'version': 'v1',
    'rateLimit': 1000,  # their nonce-timestamp is in seconds...
    'hostname': 'bitflyer.com',  # or bitflyer.com
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': None,  # has but not fully implemented
        'future': None,  # has but not fully implemented
        'option': False,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': 'emulated',
        'fetchDeposits': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOpenOrders': 'emulated',
        'fetchOrder': 'emulated',
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPositions': True,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg',
        'api': 'https://api.{hostname}',
        'www': 'https://bitflyer.com',
        'doc': 'https://lightning.bitflyer.com/docs?lang=en',
    },
    'api': {
        'public': {
            'get': [
                'getmarkets/usa',  # new(wip)
                'getmarkets/eu',  # new(wip)
                'getmarkets',     # or 'markets'
                'getboard',       # ...
                'getticker',
                'getexecutions',
                'gethealth',
                'getboardstate',
                'getchats',
            ],
        },
        'private': {
            'get': [
                'getpermissions',
                'getbalance',
                'getbalancehistory',
                'getcollateral',
                'getcollateralhistory',
                'getcollateralaccounts',
                'getaddresses',
                'getcoinins',
                'getcoinouts',
                'getbankaccounts',
                'getdeposits',
                'getwithdrawals',
                'getchildorders',
                'getparentorders',
                'getparentorder',
                'getexecutions',
                'getpositions',
                'gettradingcommission',
            ],
            'post': [
                'sendcoin',
                'withdraw',
                'sendchildorder',
                'cancelchildorder',
                'sendparentorder',
                'cancelparentorder',
                'cancelallchildorders',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
    },
},
{
    'id': 'buda',
    'name': 'Buda',
    'countries': ['AR', 'CL', 'CO', 'PE'],
    'rateLimit': 1000,
    'version': 'v2',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFees': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': None,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/47380619-8a029200-d706-11e8-91e0-8a391fe48de3.jpg',
        'api': 'https://www.buda.com/api',
        'www': 'https://www.buda.com',
        'doc': 'https://api.buda.com',
        'fees': 'https://www.buda.com/comisiones',
    },
    'status': {
        'status': 'error',
        'updated': None,
        'eta': None,
        'url': None,
    },
    'api': {
        'public': {
            'get': [
                'pairs',
                'markets',
                'currencies',
                'markets/{market}',
                'markets/{market}/ticker',
                'markets/{market}/volume',
                'markets/{market}/order_book',
                'markets/{market}/trades',
                'currencies/{currency}/fees/deposit',
                'currencies/{currency}/fees/withdrawal',
                'tv/history',
            ],
            'post': [
                'markets/{market}/quotations',
            ],
        },
        'private': {
            'get': [
                'balances',
                'balances/{currency}',
                'currencies/{currency}/balances',
                'orders',
                'orders/{id}',
                'markets/{market}/orders',
                'deposits',
                'currencies/{currency}/deposits',
                'withdrawals',
                'currencies/{currency}/withdrawals',
                'currencies/{currency}/receive_addresses',
                'currencies/{currency}/receive_addresses/{id}',
            ],
            'post': [
                'markets/{market}/orders',
                'currencies/{currency}/deposits',
                'currencies/{currency}/withdrawals',
                'currencies/{currency}/simulated_withdrawals',
                'currencies/{currency}/receive_addresses',
            ],
            'put': [
                'orders/{id}',
            ],
        },
    },
    'timeframes': {
        '1m': '1',
        '5m': '5',
        '30m': '30',
        '1h': '60',
        '2h': '120',
        '1d': 'D',
        '1w': 'W',
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': 0.008,  # 0.8%
            'maker': 0.004,  # 0.4%
            'tiers': {
                'taker': [
                    [0, 0.008],  # 0.8%
                    [2000, 0.007],  # 0.7%
                    [20000, 0.006],  # 0.6%
                    [100000, 0.005],  # 0.5%
                    [500000, 0.004],  # 0.4%
                    [2500000, 0.003],  # 0.3%
                    [12500000, 0.002],  # 0.2%
                ],
                'maker': [
                    [0, 0.004],  # 0.4%
                    [2000, 0.0035],  # 0.35%
                    [20000, 0.003],  # 0.3%
                    [100000, 0.0025],  # 0.25%
                    [500000, 0.002],  # 0.2%
                    [2500000, 0.0015],  # 0.15%
                    [12500000, 0.001],  # 0.1%
                ],
            },
        },
    },
    'exceptions': {
        'not_authorized': AuthenticationError,  # {message: 'Invalid credentials', code: 'not_authorized'}
        'forbidden': PermissionDenied,  # {message: 'You dont have access to self resource', code: 'forbidden'}
        'invalid_record': ExchangeError,  # {message: 'Validation Failed', code: 'invalid_record', errors: []}
        'not_found': ExchangeError,  # {message: 'Not found', code: 'not_found'}
        'parameter_missing': ExchangeError,  # {message: 'Parameter missing', code: 'parameter_missing'}
        'bad_parameter': ExchangeError,  # {message: 'Bad Parameter format', code: 'bad_parameter'}
    },
},
{
    'id': 'kuna',
    'name': 'Kuna',
    'countries': ['UA'],
    'rateLimit': 1000,
    'version': 'v2',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,
        'swap': False,
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchL3OrderBook': True,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': 'emulated',
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setPositionMode': False,
        'withdraw': None,
    },
    'timeframes': None,
    'urls': {
        'extension': '.json',
        'referral': 'https://kuna.io?r=kunaid-gvfihe8az7o4',
        'logo': 'https://user-images.githubusercontent.com/51840849/87153927-f0578b80-c2c0-11ea-84b6-74612568e9e1.jpg',
        'api': {
            'xreserve': 'https://api.xreserve.fund',
            'v3': 'https://api.kuna.io',
            'public': 'https://kuna.io',  # v2
            'private': 'https://kuna.io',  # v2
        },
        'www': 'https://kuna.io',
        'doc': 'https://kuna.io/documents/api',
        'fees': 'https://kuna.io/documents/api',
    },
    'api': {
        'xreserve': {
            'get': {
                'nonce': 1,
                'fee': 1,
                'delegated-transactions': 1,
            },
            'post': {
                'delegate-transfer': 1,
            },
        },
        'v3': {
            'public': {
                'get': {
                    'timestamp': 1,
                    'currencies': 1,
                    'markets': 1,
                    'tickers': 1,
                    'k': 1,
                    'trades_history': 1,
                    'fees': 1,
                    'exchange-rates': 1,
                    'exchange-rates/currency': 1,
                    'book/market': 1,
                    'kuna_codes/code/check': 1,
                    'landing_page_statistic': 1,
                    'translations/locale': 1,
                    'trades/market/hist': 1,
                },
                'post': {
                    'http_test': 1,
                    'deposit_channels': 1,
                    'withdraw_channels': 1,
                    'subscription_plans': 1,
                    'send_to': 1,
                    'confirm_token': 1,
                    'kunaid': 1,
                    'withdraw/prerequest': 1,
                    'deposit/prerequest': 1,
                    'deposit/exchange-rates': 1,
                },
            },
            'sign': {
                'get': {
                    'reset_password/token': 1,
                },
                'post': {
                    'signup/google': 1,
                    'signup/resend_confirmation': 1,
                    'signup': 1,
                    'signin': 1,
                    'signin/two_factor': 1,
                    'signin/resend_confirm_device': 1,
                    'signin/confirm_device': 1,
                    'reset_password': 1,
                    'cool-signin': 1,
                },
                'put': {
                    'reset_password/token': 1,
                    'signup/code/confirm': 1,
                },
            },
            'private': {
                'post': {
                    'auth/w/order/submit': 1,
                    'auth/r/orders': 1,
                    'auth/r/orders/market': 1,
                    'auth/r/orders/markets': 1,
                    'auth/api_tokens/delete': 1,
                    'auth/api_tokens/create': 1,
                    'auth/api_tokens': 1,
                    'auth/signin_history/uniq': 1,
                    'auth/signin_history': 1,
                    'auth/disable_withdraw_confirmation': 1,
                    'auth/change_password': 1,
                    'auth/deposit_address': 1,
                    'auth/announcements/accept': 1,
                    'auth/announcements/unaccepted': 1,
                    'auth/otp/deactivate': 1,
                    'auth/otp/activate': 1,
                    'auth/otp/secret': 1,
                    'auth/r/order/market/:order_id/trades': 1,
                    'auth/r/orders/market/hist': 1,
                    'auth/r/orders/hist': 1,
                    'auth/r/orders/hist/markets': 1,
                    'auth/r/orders/details': 1,
                    'auth/assets-history': 1,
                    'auth/assets-history/withdraws': 1,
                    'auth/assets-history/deposits': 1,
                    'auth/r/wallets': 1,
                    'auth/markets/favorites': 1,
                    'auth/markets/favorites/list': 1,
                    'auth/me/update': 1,
                    'auth/me': 1,
                    'auth/fund_sources': 1,
                    'auth/fund_sources/list': 1,
                    'auth/withdraw/resend_confirmation': 1,
                    'auth/withdraw': 1,
                    'auth/withdraw/details': 1,
                    'auth/withdraw/info': 1,
                    'auth/payment_addresses': 1,
                    'auth/deposit/prerequest': 1,
                    'auth/deposit/exchange-rates': 1,
                    'auth/deposit': 1,
                    'auth/deposit/details': 1,
                    'auth/deposit/info': 1,
                    'auth/kuna_codes/count': 1,
                    'auth/kuna_codes/details': 1,
                    'auth/kuna_codes/edit': 1,
                    'auth/kuna_codes/send-pdf': 1,
                    'auth/kuna_codes': 1,
                    'auth/kuna_codes/redeemed-by-me': 1,
                    'auth/kuna_codes/issued-by-me': 1,
                    'auth/payment_requests/invoice': 1,
                    'auth/payment_requests/type': 1,
                    'auth/referral_program/weekly_earnings': 1,
                    'auth/referral_program/stats': 1,
                    'auth/merchant/payout_services': 1,
                    'auth/merchant/withdraw': 1,
                    'auth/merchant/payment_services': 1,
                    'auth/merchant/deposit': 1,
                    'auth/verification/auth_token': 1,
                    'auth/kunaid_purchase/create': 1,
                    'auth/devices/list': 1,
                    'auth/sessions/list': 1,
                    'auth/subscriptions/reactivate': 1,
                    'auth/subscriptions/cancel': 1,
                    'auth/subscriptions/prolong': 1,
                    'auth/subscriptions/create': 1,
                    'auth/subscriptions/list': 1,
                    'auth/kuna_ids/list': 1,
                    'order/cancel/multi': 1,
                    'order/cancel': 1,
                },
                'put': {
                    'auth/fund_sources/id': 1,
                    'auth/kuna_codes/redeem': 1,
                },
                'delete': {
                    'auth/markets/favorites': 1,
                    'auth/fund_sources': 1,
                    'auth/devices': 1,
                    'auth/devices/list': 1,
                    'auth/sessions/list': 1,
                    'auth/sessions': 1,
                },
            },
        },
        'public': {
            'get': [
                'depth',  # Get depth or specified market Both asks and bids are sorted from highest price to lowest.
                'k_with_pending_trades',  # Get K data with pending trades, which are the trades not included in K data yet, because there's delay between trade generated and processed by K data generator
                'k',  # Get OHLC(k line) of specific market
                'markets',  # Get all available markets
                'order_book',  # Get the order book of specified market
                'order_book/{market}',
                'tickers',  # Get ticker of all markets
                'tickers/{market}',  # Get ticker of specific market
                'timestamp',  # Get server current time, in seconds since Unix epoch
                'trades',  # Get recent trades on market, each trade is included only once Trades are sorted in reverse creation order.
                'trades/{market}',
            ],
        },
        'private': {
            'get': [
                'members/me',  # Get your profile and accounts info
                'deposits',  # Get your deposits history
                'deposit',  # Get details of specific deposit
                'deposit_address',  # Where to deposit The address field could be empty when a new address is generating(e.g. for bitcoin), you should try again later in that case.
                'orders',  # Get your orders, results is paginated
                'order',  # Get information of specified order
                'trades/my',  # Get your executed trades Trades are sorted in reverse creation order.
                'withdraws',  # Get your cryptocurrency withdraws
                'withdraw',  # Get your cryptocurrency withdraw
            ],
            'post': [
                'orders',  # Create a Sell/Buy order
                'orders/multi',  # Create multiple sell/buy orders
                'orders/clear',  # Cancel all my orders
                'order/delete',  # Cancel an order
                'withdraw',  # Create a withdraw
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'taker': 0.25 / 100,
            'maker': 0.25 / 100,
        },
        'funding': {
            'withdraw': {
                'UAH': '1%',
                'BTC': 0.001,
                'BCH': 0.001,
                'ETH': 0.01,
                'WAVES': 0.01,
                'GOL': 0.0,
                'GBG': 0.0,
                # 'RMC': 0.001 BTC
                # 'ARN': 0.01 ETH
                # 'R': 0.01 ETH
                # 'EVR': 0.01 ETH
            },
            'deposit': {
                # 'UAH': (amount) => amount * 0.001 + 5
            },
        },
    },
    'commonCurrencies': {
        'PLA': 'Plair',
    },
    'exceptions': {
        '2002': InsufficientFunds,
        '2003': OrderNotFound,
    },
},
{
    'id': 'binanceusdm',
    'name': 'Binance USDⓈ-M',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg',
        'doc': [
            'https://binance-docs.github.io/apidocs/futures/en/',
            'https://binance-docs.github.io/apidocs/spot/en',
        ],
    },
    'options': {
        'defaultType': 'future',
        # https://www.binance.com/en/support/faq/360033162192
        # tier amount, maintenance margin, initial margin
        'leverageBrackets': None,
        'marginTypes': {},
    },
},
{
    'id': 'bitmart',
    'name': 'BitMart',
    'countries': ['US', 'CN', 'HK', 'KR'],
    'rateLimit': 250,  # a bit slower than 50 times per second ~40 times per second
    'version': 'v1',
    'certified': True,
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': None,  # has but unimplemented
        'future': None,  # has but unimplemented
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchCanceledOrders': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFee': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'hostname': 'bitmart.com',  # bitmart.info, bitmart.news for Hong Kong users
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/129991357-8f47464b-d0f4-41d6-8a82-34122f0d1398.jpg',
        'api': {
            'rest': 'https://api-cloud.{hostname}',  # bitmart.info for Hong Kong users
        },
        'www': 'https://www.bitmart.com/',
        'doc': 'https://developer-pro.bitmart.com/',
        'referral': {
            'url': 'http://www.bitmart.com/?r=rQCFLh',
            'discount': 0.3,
        },
        'fees': 'https://www.bitmart.com/fee/en',
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'uid': True,
    },
    'api': {
        'public': {
            'system': {
                'get': {
                    'time': 5,  # https://api-cloud.bitmart.com/system/time
                    'service': 5,  # https://api-cloud.bitmart.com/system/service
                },
            },
            'account': {
                'get': {
                    'currencies': 10,  # https://api-cloud.bitmart.com/account/v1/currencies
                },
            },
            'spot': {
                'get': {
                    'currencies': 1,
                    'symbols': 1,
                    'symbols/details': 1,
                    'ticker': 1,  # ?symbol=BTC_USDT
                    'steps': 1,  # ?symbol=BMX_ETH
                    'symbols/kline': 1,  # ?symbol=BMX_ETH&step=15&from=1525760116&to=1525769116
                    'symbols/book': 1,  # ?symbol=BMX_ETH&precision=6
                    'symbols/trades': 1,  # ?symbol=BMX_ETH
                },
            },
            'contract': {
                'get': {
                    'tickers': 0.5,
                },
            },
        },
        'private': {
            'account': {
                'get': {
                    'wallet': 0.5,  # ?account_type=1
                    'deposit/address': 1,  # ?currency=USDT-TRC20
                    'withdraw/charge': 1,  # ?currency=BTC
                    'deposit-withdraw/history': 1,  # ?limit=10&offset=1&operationType=withdraw
                    'deposit-withdraw/detail': 1,  # ?id=1679952
                },
                'post': {
                    'withdraw/apply': 1,
                },
            },
            'spot': {
                'get': {
                    'wallet': 0.5,
                    'order_detail': 0.1,
                    'orders': 0.5,
                    'trades': 0.5,
                },
                'post': {
                    'submit_order': 0.1,  # https://api-cloud.bitmart.com/spot/v1/submit_order
                    'cancel_order': 0.1,  # https://api-cloud.bitmart.com/spot/v2/cancel_order
                    'cancel_orders': 0.1,
                },
            },
        },
    },
    'timeframes': {
        '1m': 1,
        '3m': 3,
        '5m': 5,
        '15m': 15,
        '30m': 30,
        '45m': 45,
        '1h': 60,
        '2h': 120,
        '3h': 180,
        '4h': 240,
        '1d': 1440,
        '1w': 10080,
        '1M': 43200,
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.0025'),
            'maker': self.parse_number('0.0025'),
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.0020')],
                    [self.parse_number('10'), self.parse_number('0.18')],
                    [self.parse_number('50'), self.parse_number('0.0016')],
                    [self.parse_number('250'), self.parse_number('0.0014')],
                    [self.parse_number('1000'), self.parse_number('0.0012')],
                    [self.parse_number('5000'), self.parse_number('0.0010')],
                    [self.parse_number('25000'), self.parse_number('0.0008')],
                    [self.parse_number('50000'), self.parse_number('0.0006')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.001')],
                    [self.parse_number('10'), self.parse_number('0.0009')],
                    [self.parse_number('50'), self.parse_number('0.0008')],
                    [self.parse_number('250'), self.parse_number('0.0007')],
                    [self.parse_number('1000'), self.parse_number('0.0006')],
                    [self.parse_number('5000'), self.parse_number('0.0005')],
                    [self.parse_number('25000'), self.parse_number('0.0004')],
                    [self.parse_number('50000'), self.parse_number('0.0003')],
                ],
            },
        },
    },
    'precisionMode': TICK_SIZE,
    'exceptions': {
        'exact': {
            # general errors
            '30000': ExchangeError,  # 404, Not found
            '30001': AuthenticationError,  # 401, Header X-BM-KEY is empty
            '30002': AuthenticationError,  # 401, Header X-BM-KEY not found
            '30003': AccountSuspended,  # 401, Header X-BM-KEY has frozen
            '30004': AuthenticationError,  # 401, Header X-BM-SIGN is empty
            '30005': AuthenticationError,  # 401, Header X-BM-SIGN is wrong
            '30006': AuthenticationError,  # 401, Header X-BM-TIMESTAMP is empty
            '30007': AuthenticationError,  # 401, Header X-BM-TIMESTAMP range. Within a minute
            '30008': AuthenticationError,  # 401, Header X-BM-TIMESTAMP invalid format
            '30010': PermissionDenied,  # 403, IP is forbidden. We recommend enabling IP whitelist for API trading. After that reauth your account
            '30011': AuthenticationError,  # 403, Header X-BM-KEY over expire time
            '30012': AuthenticationError,  # 403, Header X-BM-KEY is forbidden to request it
            '30013': RateLimitExceeded,  # 429, Request too many requests
            '30014': ExchangeNotAvailable,  # 503, Service unavailable
            # funding account errors
            '60000': BadRequest,  # 400, Invalid request(maybe the body is empty, or the int parameter passes string data)
            '60001': BadRequest,  # 400, Asset account type does not exist
            '60002': BadRequest,  # 400, currency does not exist
            '60003': ExchangeError,  # 400, Currency has been closed recharge channel, if there is any problem, please consult customer service
            '60004': ExchangeError,  # 400, Currency has been closed withdraw channel, if there is any problem, please consult customer service
            '60005': ExchangeError,  # 400, Minimum amount is %s
            '60006': ExchangeError,  # 400, Maximum withdraw precision is %d
            '60007': InvalidAddress,  # 400, Only withdrawals from added addresses are allowed
            '60008': InsufficientFunds,  # 400, Balance not enough
            '60009': ExchangeError,  # 400, Beyond the limit
            '60010': ExchangeError,  # 400, Withdraw id or deposit id not found
            '60011': InvalidAddress,  # 400, Address is not valid
            '60012': ExchangeError,  # 400, This action is not supported in self currency(If IOTA, HLX recharge and withdraw calls are prohibited)
            '60020': PermissionDenied,  # 403, Your account is not allowed to recharge
            '60021': PermissionDenied,  # 403, Your account is not allowed to withdraw
            '60022': PermissionDenied,  # 403, No withdrawals for 24 hours
            '60030': BadRequest,  # 405, Method Not Allowed
            '60031': BadRequest,  # 415, Unsupported Media Type
            '60050': ExchangeError,  # 500, User account not found
            '60051': ExchangeError,  # 500, Internal Server Error
            # spot errors
            '50000': BadRequest,  # 400, Bad Request
            '50001': BadSymbol,  # 400, Symbol not found
            '50002': BadRequest,  # 400, From Or To format error
            '50003': BadRequest,  # 400, Step format error
            '50004': BadRequest,  # 400, Kline size over 500
            '50005': OrderNotFound,  # 400, Order Id not found
            '50006': InvalidOrder,  # 400, Minimum size is %s
            '50007': InvalidOrder,  # 400, Maximum size is %s
            '50008': InvalidOrder,  # 400, Minimum price is %s
            '50009': InvalidOrder,  # 400, Minimum count*price is %s
            '50010': InvalidOrder,  # 400, RequestParam size is required
            '50011': InvalidOrder,  # 400, RequestParam price is required
            '50012': InvalidOrder,  # 400, RequestParam notional is required
            '50013': InvalidOrder,  # 400, Maximum limit*offset is %d
            '50014': BadRequest,  # 400, RequestParam limit is required
            '50015': BadRequest,  # 400, Minimum limit is 1
            '50016': BadRequest,  # 400, Maximum limit is %d
            '50017': BadRequest,  # 400, RequestParam offset is required
            '50018': BadRequest,  # 400, Minimum offset is 1
            '50019': BadRequest,  # 400, Maximum price is %s
            # '50019': ExchangeError,  # 400, Invalid status. validate status is [1=Failed, 2=Success, 3=Frozen Failed, 4=Frozen Success, 5=Partially Filled, 6=Fully Fulled, 7=Canceling, 8=Canceled
            '50020': InsufficientFunds,  # 400, Balance not enough
            '50021': BadRequest,  # 400, Invalid %s
            '50022': ExchangeNotAvailable,  # 400, Service unavailable
            '50023': BadSymbol,  # 400, This Symbol can't place order by api
            '50029': InvalidOrder,  # {"message":"param not match : size * price >=1000","code":50029,"trace":"f931f030-b692-401b-a0c5-65edbeadc598","data":{}}
            '50030': InvalidOrder,  # {"message":"Order is already canceled","code":50030,"trace":"8d6f64ee-ad26-45a4-9efd-1080f9fca1fa","data":{}}
            '53000': AccountSuspended,  # 403, Your account is frozen due to security policies. Please contact customer service
            '53001': AccountSuspended,  # {"message":"Your kyc country is restricted. Please contact customer service.","code":53001,"trace":"8b445940-c123-4de9-86d7-73c5be2e7a24","data":{}}
            '57001': BadRequest,  # 405, Method Not Allowed
            '58001': BadRequest,  # 415, Unsupported Media Type
            '59001': ExchangeError,  # 500, User account not found
            '59002': ExchangeError,  # 500, Internal Server Error
            # contract errors
            '40001': ExchangeError,  # 400, Cloud account not found
            '40002': ExchangeError,  # 400, out_trade_no not found
            '40003': ExchangeError,  # 400, out_trade_no already existed
            '40004': ExchangeError,  # 400, Cloud account count limit
            '40005': ExchangeError,  # 400, Transfer vol precision error
            '40006': PermissionDenied,  # 400, Invalid ip error
            '40007': BadRequest,  # 400, Parse parameter error
            '40008': InvalidNonce,  # 400, Check nonce error
            '40009': BadRequest,  # 400, Check ver error
            '40010': BadRequest,  # 400, Not found func error
            '40011': BadRequest,  # 400, Invalid request
            '40012': ExchangeError,  # 500, System error
            '40013': ExchangeError,  # 400, Access too often" CLIENT_TIME_INVALID, "Please check your system time.
            '40014': BadSymbol,  # 400, This contract is offline
            '40015': BadSymbol,  # 400, This contract's exchange has been paused
            '40016': InvalidOrder,  # 400, This order would trigger user position liquidate
            '40017': InvalidOrder,  # 400, It is not possible to open and close simultaneously in the same position
            '40018': InvalidOrder,  # 400, Your position is closed
            '40019': ExchangeError,  # 400, Your position is in liquidation delegating
            '40020': InvalidOrder,  # 400, Your position volume is not enough
            '40021': ExchangeError,  # 400, The position is not exsit
            '40022': ExchangeError,  # 400, The position is not isolated
            '40023': ExchangeError,  # 400, The position would liquidate when sub margin
            '40024': ExchangeError,  # 400, The position would be warnning of liquidation when sub margin
            '40025': ExchangeError,  # 400, The position’s margin shouldn’t be lower than the base limit
            '40026': ExchangeError,  # 400, You cross margin position is in liquidation delegating
            '40027': InsufficientFunds,  # 400, You contract account available balance not enough
            '40028': PermissionDenied,  # 400, Your plan order's count is more than system maximum limit.
            '40029': InvalidOrder,  # 400, The order's leverage is too large.
            '40030': InvalidOrder,  # 400, The order's leverage is too small.
            '40031': InvalidOrder,  # 400, The deviation between current price and trigger price is too large.
            '40032': InvalidOrder,  # 400, The plan order's life cycle is too long.
            '40033': InvalidOrder,  # 400, The plan order's life cycle is too short.
            '40034': BadSymbol,  # 400, This contract is not found
        },
        'broad': {},
    },
    'commonCurrencies': {
        '$GM': 'GOLDMINER',
        '$HERO': 'Step Hero',
        '$PAC': 'PAC',
        'AUR': 'Aurum',
        'BP': 'BEYOND',
        'COT': 'Community Coin',
        'CPC': 'CPCoin',
        'DMS': 'DimSum',  # conflict with Dragon Mainland Shards
        'FOX': 'Fox Finance',
        'GDT': 'Gorilla Diamond',
        'GLD': 'Goldario',
        'MIM': 'MIM Swarm',
        'MVP': 'MVP Coin',
        'ONE': 'Menlo One',
        'PLA': 'Plair',
        'TCT': 'TacoCat Token',
        'TRU': 'Truebit',  # conflict with TrueFi
        'ULT': 'Ultiledger',
    },
    'options': {
        'networks': {
            'TRX': 'TRC20',
            'ETH': 'ERC20',
        },
        'defaultNetworks': {
            'USDT': 'ERC20',
        },
        'defaultType': 'spot',  # 'spot', 'swap'
        'fetchBalance': {
            'type': 'spot',  # 'spot', 'swap', 'contract', 'account'
        },
        'createMarketBuyOrderRequiresPrice': True,
    },
},
{
    'id': 'upbit',
    'name': 'Upbit',
    'countries': ['KR'],
    'version': 'v1',
    'rateLimit': 1000,
    'pro': True,
    # new metainfo interface
    'has': {
        'CORS': True,
        'spot': True,
        'margin': None,
        'swap': False,
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createMarketOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchCanceledOrders': True,
        'fetchClosedOrders': True,
        'fetchDepositAddress': True,
        'fetchDepositAddresses': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistories': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': None,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': True,
        'fetchOrders': None,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTransactions': None,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': 'minutes',
        '3m': 'minutes',
        '5m': 'minutes',
        '15m': 'minutes',
        '30m': 'minutes',
        '1h': 'minutes',
        '4h': 'minutes',
        '1d': 'days',
        '1w': 'weeks',
        '1M': 'months',
    },
    'hostname': 'api.upbit.com',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/49245610-eeaabe00-f423-11e8-9cba-4b0aed794799.jpg',
        'api': {
            'public': 'https://{hostname}',
            'private': 'https://{hostname}',
        },
        'www': 'https://upbit.com',
        'doc': 'https://docs.upbit.com/docs/%EC%9A%94%EC%B2%AD-%EC%88%98-%EC%A0%9C%ED%95%9C',
        'fees': 'https://upbit.com/service_center/guide',
    },
    'api': {
        'public': {
            'get': [
                'market/all',
                'candles/{timeframe}',
                'candles/{timeframe}/{unit}',
                'candles/minutes/{unit}',
                'candles/minutes/1',
                'candles/minutes/3',
                'candles/minutes/5',
                'candles/minutes/15',
                'candles/minutes/30',
                'candles/minutes/60',
                'candles/minutes/240',
                'candles/days',
                'candles/weeks',
                'candles/months',
                'trades/ticks',
                'ticker',
                'orderbook',
            ],
        },
        'private': {
            'get': [
                'accounts',
                'orders/chance',
                'order',
                'orders',
                'withdraws',
                'withdraw',
                'withdraws/chance',
                'deposits',
                'deposit',
                'deposits/coin_addresses',
                'deposits/coin_address',
            ],
            'post': [
                'orders',
                'withdraws/coin',
                'withdraws/krw',
                'deposits/generate_coin_address',
            ],
            'delete': [
                'order',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.0025'),
            'taker': self.parse_number('0.0025'),
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {},
            'deposit': {},
        },
    },
    'exceptions': {
        'exact': {
            'This key has expired.': AuthenticationError,
            'Missing request parameter error. Check the required parameters!': BadRequest,
            'side is missing, side does not have a valid value': InvalidOrder,
        },
        'broad': {
            'thirdparty_agreement_required': PermissionDenied,
            'out_of_scope': PermissionDenied,
            'order_not_found': OrderNotFound,
            'insufficient_funds': InsufficientFunds,
            'invalid_access_key': AuthenticationError,
            'jwt_verification': AuthenticationError,
            'create_ask_error': ExchangeError,
            'create_bid_error': ExchangeError,
            'volume_too_large': InvalidOrder,
            'invalid_funds': InvalidOrder,
        },
    },
    'options': {
        'createMarketBuyOrderRequiresPrice': True,
        'fetchTickersMaxLength': 4096,  # 2048,
        'fetchOrderBooksMaxLength': 4096,  # 2048,
        'tradingFeesByQuoteCurrency': {
            'KRW': 0.0005,
        },
    },
    'commonCurrencies': {
        'TON': 'Tokamak Network',
    },
},
{
    'id': 'wavesexchange',
    'name': 'Waves.Exchange',
    'countries': ['CH'],  # Switzerland
    'rateLimit': 500,
    'certified': True,
    'pro': False,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchDepositAddress': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'signIn': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '2h': '2h',
        '3h': '3h',
        '4h': '4h',
        '6h': '6h',
        '12h': '12h',
        '1d': '1d',
        '1w': '1w',
        '1M': '1M',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/84547058-5fb27d80-ad0b-11ea-8711-78ac8b3c7f31.jpg',
        'test': {
            'matcher': 'https://matcher-testnet.waves.exchange',
            'node': 'https://nodes-testnet.wavesnodes.com',
            'public': 'https://api-testnet.wavesplatform.com/v0',
            'private': 'https://api-testnet.waves.exchange/v1',
            'forward': 'https://testnet.waves.exchange/api/v1/forward/matcher',
            'market': 'https://testnet.waves.exchange/api/v1/forward/marketdata/api/v1',
        },
        'api': {
            'matcher': 'https://matcher.waves.exchange',
            'node': 'https://nodes.waves.exchange',
            'public': 'https://api.wavesplatform.com/v0',
            'private': 'https://api.waves.exchange/v1',
            'forward': 'https://waves.exchange/api/v1/forward/matcher',
            'market': 'https://waves.exchange/api/v1/forward/marketdata/api/v1',
        },
        'doc': 'https://docs.waves.exchange',
        'www': 'https://waves.exchange',
    },
    'api': {
        'matcher': {
            'get': [
                'matcher',
                'matcher/settings',
                'matcher/settings/rates',
                'matcher/balance/reserved/{publicKey}',
                'matcher/debug/allSnashotOffsets',
                'matcher/debug/currentOffset',
                'matcher/debug/lastOffset',
                'matcher/debug/oldestSnapshotOffset',
                'matcher/orderbook',
                'matcher/orderbook/{amountAsset}/{priceAsset}',
                'matcher/orderbook/{baseId}/{quoteId}/publicKey/{publicKey}',
                'matcher/orderbook/{baseId}/{quoteId}/{orderId}',
                'matcher/orderbook/{baseId}/{quoteId}/info',
                'matcher/orderbook/{baseId}/{quoteId}/status',
                'matcher/orderbook/{baseId}/{quoteId}/tradeableBalance/{address}',
                'matcher/orderbook/{publicKey}',
                'matcher/orderbook/{publicKey}/{orderId}',
                'matcher/orders/{address}',
                'matcher/orders/{address}/{orderId}',
                'matcher/transactions/{orderId}',
            ],
            'post': [
                'matcher/orderbook',
                'matcher/orderbook/market',
                'matcher/orderbook/cancel',
                'matcher/orderbook/{baseId}/{quoteId}/cancel',
                'matcher/orderbook/{amountAsset}/{priceAsset}/calculateFee',
                'matcher/debug/saveSnapshots',
                'matcher/orders/{address}/cancel',
                'matcher/orders/cancel/{orderId}',
            ],
            'delete': [
                'matcher/orderbook/{baseId}/{quoteId}',
                'matcher/settings/rates/{assetId}',
            ],
            'put': [
                'matcher/settings/rates/{assetId}',
            ],
        },
        'node': {
            'get': [
                'addresses',
                'addresses/balance/{address}',
                'addresses/balance/{address}/{confirmations}',
                'addresses/balance/details/{address}',
                'addresses/data/{address}',
                'addresses/data/{address}/{key}',
                'addresses/effectiveBalance/{address}',
                'addresses/effectiveBalance/{address}/{confirmations}',
                'addresses/publicKey/{publicKey}',
                'addresses/scriptInfo/{address}',
                'addresses/scriptInfo/{address}/meta',
                'addresses/seed/{address}',
                'addresses/seq/{from}/{to}',
                'addresses/validate/{address}',
                'alias/by-address/{address}',
                'alias/by-alias/{alias}',
                'assets/{assetId}/distribution/{height}/{limit}',
                'assets/balance/{address}',
                'assets/balance/{address}/{assetId}',
                'assets/details/{assetId}',
                'assets/nft/{address}/limit/{limit}',
                'blockchain/rewards',
                'blockchain/rewards/height',
                'blocks/address/{address}/{from}/{to}/',
                'blocks/at/{height}',
                'blocks/delay/{signature}/{blockNum}',
                'blocks/first',
                'blocks/headers/last',
                'blocks/headers/seq/{from}/{to}',
                'blocks/height',
                'blocks/height/{signature}',
                'blocks/last',
                'blocks/seq/{from}/{to}',
                'blocks/signature/{signature}',
                'consensus/algo',
                'consensus/basetarget',
                'consensus/basetarget/{blockId}',
                'consensus/{generatingbalance}/address',
                'consensus/generationsignature',
                'consensus/generationsignature/{blockId}',
                'debug/balances/history/{address}',
                'debug/blocks/{howMany}',
                'debug/configInfo',
                'debug/historyInfo',
                'debug/info',
                'debug/minerInfo',
                'debug/portfolios/{address}',
                'debug/state',
                'debug/stateChanges/address/{address}',
                'debug/stateChanges/info/{id}',
                'debug/stateWaves/{height}',
                'leasing/active/{address}',
                'node/state',
                'node/version',
                'peers/all',
                'peers/blacklisted',
                'peers/connected',
                'peers/suspended',
                'transactions/address/{address}/limit/{limit}',
                'transactions/info/{id}',
                'transactions/status',
                'transactions/unconfirmed',
                'transactions/unconfirmed/info/{id}',
                'transactions/unconfirmed/size',
                'utils/seed',
                'utils/seed/{length}',
                'utils/time',
                'wallet/seed',
            ],
            'post': [
                'addresses',
                'addresses/data/{address}',
                'addresses/sign/{address}',
                'addresses/signText/{address}',
                'addresses/verify/{address}',
                'addresses/verifyText/{address}',
                'debug/blacklist',
                'debug/print',
                'debug/rollback',
                'debug/validate',
                'node/stop',
                'peers/clearblacklist',
                'peers/connect',
                'transactions/broadcast',
                'transactions/calculateFee',
                'tranasctions/sign',
                'transactions/sign/{signerAddress}',
                'tranasctions/status',
                'utils/hash/fast',
                'utils/hash/secure',
                'utils/script/compileCode',
                'utils/script/compileWithImports',
                'utils/script/decompile',
                'utils/script/estimate',
                'utils/sign/{privateKey}',
                'utils/transactionsSerialize',
            ],
            'delete': [
                'addresses/{address}',
                'debug/rollback-to/{signature}',
            ],
        },
        'public': {
            'get': [
                'assets',
                'pairs',
                'candles/{baseId}/{quoteId}',
                'transactions/exchange',
            ],
        },
        'private': {
            'get': [
                'deposit/addresses/{currency}',
                'deposit/addresses/{currency}/{platform}',
                'platforms',
                'deposit/currencies',
                'withdraw/currencies',
                'withdraw/addresses/{currency}/{address}',
            ],
            'post': [
                'oauth2/token',
            ],
        },
        'forward': {
            'get': [
                'matcher/orders/{address}',  # can't get the orders endpoint to work with the matcher api
                'matcher/orders/{address}/{orderId}',
            ],
            'post': [
                'matcher/orders/{wavesAddress}/cancel',
            ],
        },
        'market': {
            'get': [
                'tickers',
            ],
        },
    },
    'currencies': {
        'WX': {'id': 'EMAMLxDnv3xiz8RXg8Btj33jcEw3wLczL3JKYYmuubpc', 'numericId': None, 'code': 'WX', 'precision': 8},
    },
    'options': {
        'allowedCandles': 1440,
        'accessToken': None,
        'createMarketBuyOrderRequiresPrice': True,
        'matcherPublicKey': None,
        'quotes': None,
        'createOrderDefaultExpiry': 2419200000,  # 60 * 60 * 24 * 28 * 1000
        'wavesAddress': None,
        'withdrawFeeUSDN': 7420,
        'withdrawFeeWAVES': 100000,
        'wavesPrecision': 8,
        'messagePrefix': 'W',  # W for production, T for testnet
        'networks': {
            'ERC20': 'ETH',
            'BEP20': 'BSC',
        },
        'reverseNetworks': {
            'ETH': 'ERC20',
            'BSC': 'BEP20',
        },
    },
    'commonCurrencies': {
        'EGG': 'Waves Ducks',
    },
    'requiresEddsa': True,
    'exceptions': {
        '3147270': InsufficientFunds,  # https://github.com/wavesplatform/matcher/wiki/List-of-all-errors
        '112': InsufficientFunds,
        '4': ExchangeError,
        '13': ExchangeNotAvailable,
        '14': ExchangeNotAvailable,
        '3145733': AccountSuspended,
        '3148040': DuplicateOrderId,
        '3148801': AuthenticationError,
        '9440512': AuthenticationError,
        '9440771': BadSymbol,
        '9441026': InvalidOrder,
        '9441282': InvalidOrder,
        '9441286': InvalidOrder,
        '9441295': InvalidOrder,
        '9441540': InvalidOrder,
        '9441542': InvalidOrder,
        '106954752': AuthenticationError,
        '106954769': AuthenticationError,
        '106957828': AuthenticationError,
        '106960131': AuthenticationError,
        '106981137': AuthenticationError,
        '9437193': OrderNotFound,
        '1048577': BadRequest,
        '1051904': AuthenticationError,
    },
},
{
    'id': 'oceanex',
    'name': 'OceanEx',
    'countries': ['BS'],  # Bahamas
    'version': 'v1',
    'rateLimit': 3000,
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/58385970-794e2d80-8001-11e9-889c-0567cd79b78e.jpg',
        'api': 'https://api.oceanex.pro',
        'www': 'https://www.oceanex.pro.com',
        'doc': 'https://api.oceanex.pro/doc/v1',
        'referral': 'https://oceanex.pro/signup?referral=VE24QX',
    },
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': None,  # has but unimplemented
        'future': None,
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': True,
        'createMarketOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchFundingFees': None,
        'fetchMarkets': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': True,
        'fetchOrders': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': None,
        'fetchTradingFees': True,
        'fetchTradingLimits': None,
    },
    'timeframes': {
        '1m': '1',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '120',
        '4h': '240',
        '6h': '360',
        '12h': '720',
        '1d': '1440',
        '3d': '4320',
        '1w': '10080',
    },
    'api': {
        'public': {
            'get': [
                'markets',
                'tickers/{pair}',
                'tickers_multi',
                'order_book',
                'order_book/multi',
                'fees/trading',
                'trades',
                'timestamp',
            ],
            'post': [
                'k',
            ],
        },
        'private': {
            'get': [
                'key',
                'members/me',
                'orders',
                'orders/filter',
            ],
            'post': [
                'orders',
                'orders/multi',
                'order/delete',
                'order/delete/multi',
                'orders/clear',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': 0.1 / 100,
            'taker': 0.1 / 100,
        },
    },
    'commonCurrencies': {
        'PLA': 'Plair',
    },
    'exceptions': {
        'codes': {
            '-1': BadRequest,
            '-2': BadRequest,
            '1001': BadRequest,
            '1004': ArgumentsRequired,
            '1006': AuthenticationError,
            '1008': AuthenticationError,
            '1010': AuthenticationError,
            '1011': PermissionDenied,
            '2001': AuthenticationError,
            '2002': InvalidOrder,
            '2004': OrderNotFound,
            '9003': PermissionDenied,
        },
        'exact': {
            'market does not have a valid value': BadRequest,
            'side does not have a valid value': BadRequest,
            'Account::AccountError: Cannot lock funds': InsufficientFunds,
            'The account does not exist': AuthenticationError,
        },
    },
},
{
    'id': 'tidebit',
    'name': 'TideBit',
    'countries': ['HK'],
    'rateLimit': 1000,
    'version': 'v2',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchDepositAddress': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchOHLCV': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '120',
        '4h': '240',
        '12h': '720',
        '1d': '1440',
        '3d': '4320',
        '1w': '10080',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87460811-1e690280-c616-11ea-8652-69f187305add.jpg',
        'api': 'https://www.tidebit.com',
        'www': 'https://www.tidebit.com',
        'doc': [
            'https://www.tidebit.com/documents/api/guide',
            'https://www.tidebit.com/swagger/#/default',
        ],
        'referral': 'http://bit.ly/2IX0LrM',
    },
    'api': {
        'public': {
            'get': [
                'markets',
                'tickers',
                'tickers/{market}',
                'timestamp',
                'trades',
                'trades/{market}',
                'order_book',
                'order',
                'k_with_pending_trades',
                'k',
                'depth',
            ],
            'post': [],
        },
        'private': {
            'get': [
                'addresses/{address}',
                'deposits/history',
                'deposits/get_deposit',
                'deposits/deposit_address',
                'historys/orders',
                'historys/vouchers',
                'historys/accounts',
                'historys/snapshots',
                'linkage/get_status',
                'members/me',
                'order',
                'orders',
                'partners/orders/{id}/trades',
                'referral_commissions/get_undeposited',
                'referral_commissions/get_graph_data',
                'trades/my',
                'withdraws/bind_account_list',
                'withdraws/get_withdraw_account',
                'withdraws/fetch_bind_info',
            ],
            'post': [
                'deposits/deposit_cash',
                'favorite_markets/update',
                'order/delete',
                'orders',
                'orders/multi',
                'orders/clear',
                'referral_commissions/deposit',
                'withdraws/apply',
                'withdraws/bind_bank',
                'withdraws/bind_address',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.003'),
            'taker': self.parse_number('0.003'),
        },
        'funding': {
            'tierBased': False,
            'percentage': True,
            'withdraw': {},  # There is only 1% fee on withdrawals to your bank account.
        },
    },
    'exceptions': {
        '2002': InsufficientFunds,
        '2003': OrderNotFound,
    },
},
{
    'id': 'bitvavo',
    'name': 'Bitvavo',
    'countries': ['NL'],  # Netherlands
    'rateLimit': 60.1,  # 1000 requests per second
    'version': 'v2',
    'certified': True,
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'editOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '2h': '2h',
        '4h': '4h',
        '6h': '6h',
        '8h': '8h',
        '12h': '12h',
        '1d': '1d',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/83165440-2f1cf200-a116-11ea-9046-a255d09fb2ed.jpg',
        'api': {
            'public': 'https://api.bitvavo.com',
            'private': 'https://api.bitvavo.com',
        },
        'www': 'https://bitvavo.com/',
        'doc': 'https://docs.bitvavo.com/',
        'fees': 'https://bitvavo.com/en/fees',
        'referral': 'https://bitvavo.com/?a=24F34952F7',
    },
    'api': {
        'public': {
            'get': {
                'time': 1,
                'markets': 1,
                'assets': 1,
                '{market}/book': 1,
                '{market}/trades': 5,
                '{market}/candles': 1,
                'ticker/price': 1,
                'ticker/book': 1,
                'ticker/24h': {'cost': 1, 'noMarket': 25},
            },
        },
        'private': {
            'get': {
                'account': 1,
                'order': 1,
                'orders': 5,
                'ordersOpen': {'cost': 1, 'noMarket': 25},
                'trades': 5,
                'balance': 5,
                'deposit': 1,
                'depositHistory': 5,
                'withdrawalHistory': 5,
            },
            'post': {
                'order': 1,
                'withdrawal': 1,
            },
            'put': {
                'order': 1,
            },
            'delete': {
                'order': 1,
                'orders': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.0025'),
            'maker': self.parse_number('0.002'),
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.0025')],
                    [self.parse_number('100000'), self.parse_number('0.0020')],
                    [self.parse_number('250000'), self.parse_number('0.0016')],
                    [self.parse_number('500000'), self.parse_number('0.0012')],
                    [self.parse_number('1000000'), self.parse_number('0.0010')],
                    [self.parse_number('2500000'), self.parse_number('0.0008')],
                    [self.parse_number('5000000'), self.parse_number('0.0006')],
                    [self.parse_number('10000000'), self.parse_number('0.0005')],
                    [self.parse_number('25000000'), self.parse_number('0.0004')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.0015')],
                    [self.parse_number('100000'), self.parse_number('0.0010')],
                    [self.parse_number('250000'), self.parse_number('0.0008')],
                    [self.parse_number('500000'), self.parse_number('0.0006')],
                    [self.parse_number('1000000'), self.parse_number('0.0005')],
                    [self.parse_number('2500000'), self.parse_number('0.0004')],
                    [self.parse_number('5000000'), self.parse_number('0.0004')],
                    [self.parse_number('10000000'), self.parse_number('0.0003')],
                    [self.parse_number('25000000'), self.parse_number('0.0003')],
                ],
            },
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'exceptions': {
        'exact': {
            '101': ExchangeError,  # Unknown error. Operation may or may not have succeeded.
            '102': BadRequest,  # Invalid JSON.
            '103': RateLimitExceeded,  # You have been rate limited. Please observe the Bitvavo-Ratelimit-AllowAt header to see when you can send requests again. Failure to respect self limit will result in an IP ban. The default value is 1000 weighted requests per minute. Please contact support if you wish to increase self limit.
            '104': RateLimitExceeded,  # You have been rate limited by the number of new orders. The default value is 100 new orders per second or 100.000 new orders per day. Please update existing orders instead of cancelling and creating orders. Please contact support if you wish to increase self limit.
            '105': PermissionDenied,  # Your IP or API key has been banned for not respecting the rate limit. The ban expires at ${expiryInMs}.
            '107': ExchangeNotAvailable,  # The matching engine is overloaded. Please wait 500ms and resubmit your order.
            '108': ExchangeNotAvailable,  # The matching engine could not process your order in time. Please consider increasing the access window or resubmit your order.
            '109': ExchangeNotAvailable,  # The matching engine did not respond in time. Operation may or may not have succeeded.
            '110': BadRequest,  # Invalid endpoint. Please check url and HTTP method.
            '200': BadRequest,  # ${param} url parameter is not supported. Please note that parameters are case-sensitive and use body parameters for PUT and POST requests.
            '201': BadRequest,  # ${param} body parameter is not supported. Please note that parameters are case-sensitive and use url parameters for GET and DELETE requests.
            '202': BadRequest,  # ${param} order parameter is not supported. Please note that certain parameters are only allowed for market or limit orders.
            '203': BadSymbol,  # {"errorCode":203,"error":"symbol parameter is required."}
            '204': BadRequest,  # ${param} parameter is not supported.
            '205': BadRequest,  # ${param} parameter is invalid.
            '206': BadRequest,  # Use either ${paramA} or ${paramB}. The usage of both parameters at the same time is not supported.
            '210': InvalidOrder,  # Amount exceeds the maximum allowed amount(1000000000).
            '211': InvalidOrder,  # Price exceeds the maximum allowed amount(100000000000).
            '212': InvalidOrder,  # Amount is below the minimum allowed amount for self asset.
            '213': InvalidOrder,  # Price is below the minimum allowed amount(0.000000000000001).
            '214': InvalidOrder,  # Price is too detailed
            '215': InvalidOrder,  # Price is too detailed. A maximum of 15 digits behind the decimal point are allowed.
            '216': InsufficientFunds,  # {"errorCode":216,"error":"You do not have sufficient balance to complete self operation."}
            '217': InvalidOrder,  # {"errorCode":217,"error":"Minimum order size in quote currency is 5 EUR or 0.001 BTC."}
            '230': ExchangeError,  # The order is rejected by the matching engine.
            '231': ExchangeError,  # The order is rejected by the matching engine. TimeInForce must be GTC when markets are paused.
            '232': BadRequest,  # You must change at least one of amount, amountRemaining, price, timeInForce, selfTradePrevention or postOnly.
            '233': InvalidOrder,  # {"errorCode":233,"error":"Order must be active(status new or partiallyFilled) to allow updating/cancelling."}
            '234': InvalidOrder,  # Market orders cannot be updated.
            '235': ExchangeError,  # You can only have 100 open orders on each book.
            '236': BadRequest,  # You can only update amount or amountRemaining, not both.
            '240': OrderNotFound,  # {"errorCode":240,"error":"No order found. Please be aware that simultaneously updating the same order may return self error."}
            '300': AuthenticationError,  # Authentication is required for self endpoint.
            '301': AuthenticationError,  # {"errorCode":301,"error":"API Key must be of length 64."}
            '302': AuthenticationError,  # Timestamp is invalid. This must be a timestamp in ms. See Bitvavo-Access-Timestamp header or timestamp parameter for websocket.
            '303': AuthenticationError,  # Window must be between 100 and 60000 ms.
            '304': AuthenticationError,  # Request was not received within acceptable window(default 30s, or custom with Bitvavo-Access-Window header) of Bitvavo-Access-Timestamp header(or timestamp parameter for websocket).
            # '304': AuthenticationError,  # Authentication is required for self endpoint.
            '305': AuthenticationError,  # {"errorCode":305,"error":"No active API key found."}
            '306': AuthenticationError,  # No active API key found. Please ensure that you have confirmed the API key by e-mail.
            '307': PermissionDenied,  # This key does not allow access from self IP.
            '308': AuthenticationError,  # {"errorCode":308,"error":"The signature length is invalid(HMAC-SHA256 should return a 64 length hexadecimal string)."}
            '309': AuthenticationError,  # {"errorCode":309,"error":"The signature is invalid."}
            '310': PermissionDenied,  # This key does not allow trading actions.
            '311': PermissionDenied,  # This key does not allow showing account information.
            '312': PermissionDenied,  # This key does not allow withdrawal of funds.
            '315': BadRequest,  # Websocket connections may not be used in a browser. Please use REST requests for self.
            '317': AccountSuspended,  # This account is locked. Please contact support.
            '400': ExchangeError,  # Unknown error. Please contact support with a copy of your request.
            '401': ExchangeError,  # Deposits for self asset are not available at self time.
            '402': PermissionDenied,  # You need to verify your identitiy before you can deposit and withdraw digital assets.
            '403': PermissionDenied,  # You need to verify your phone number before you can deposit and withdraw digital assets.
            '404': OnMaintenance,  # Could not complete self operation, because our node cannot be reached. Possibly under maintenance.
            '405': ExchangeError,  # You cannot withdraw digital assets during a cooldown period. This is the result of newly added bank accounts.
            '406': BadRequest,  # {"errorCode":406,"error":"Your withdrawal is too small."}
            '407': ExchangeError,  # Internal transfer is not possible.
            '408': InsufficientFunds,  # {"errorCode":408,"error":"You do not have sufficient balance to complete self operation."}
            '409': InvalidAddress,  # {"errorCode":409,"error":"This is not a verified bank account."}
            '410': ExchangeError,  # Withdrawals for self asset are not available at self time.
            '411': BadRequest,  # You can not transfer assets to yourself.
            '412': InvalidAddress,  # {"errorCode":412,"error":"eth_address_invalid."}
            '413': InvalidAddress,  # This address violates the whitelist.
            '414': ExchangeError,  # You cannot withdraw assets within 2 minutes of logging in.
        },
        'broad': {
            'start parameter is invalid': BadRequest,  # {"errorCode":205,"error":"start parameter is invalid."}
            'symbol parameter is invalid': BadSymbol,  # {"errorCode":205,"error":"symbol parameter is invalid."}
            'amount parameter is invalid': InvalidOrder,  # {"errorCode":205,"error":"amount parameter is invalid."}
            'orderId parameter is invalid': InvalidOrder,  # {"errorCode":205,"error":"orderId parameter is invalid."}
        },
    },
    'options': {
        'BITVAVO-ACCESS-WINDOW': 10000,  # default 10 sec
        'fetchCurrencies': {
            'expires': 1000,  # 1 second
        },
    },
    'precisionMode': SIGNIFICANT_DIGITS,
    'commonCurrencies': {
        'MIOTA': 'IOTA',  # https://github.com/ccxt/ccxt/issues/7487
    },
},
{
    'id': 'mexc',
    'name': 'MEXC Global',
    'countries': ['SC'],  # Seychelles
    'rateLimit': 50,  # default rate limit is 20 times per second
    'version': 'v2',
    'certified': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': True,
        'future': False,
        'option': False,
        'addMargin': True,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createMarketOrder': False,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchCanceledOrders': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDepositAddressesByNetwork': True,
        'fetchDeposits': True,
        'fetchFundingHistory': True,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': True,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': True,
        'fetchIsolatedPositions': None,
        'fetchLeverage': None,
        'fetchLeverageTiers': True,
        'fetchMarketLeverageTiers': 'emulated',
        'fetchMarkets': True,
        'fetchMarkOHLCV': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderTrades': True,
        'fetchPosition': True,
        'fetchPositions': True,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': True,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchWithdrawals': True,
        'reduceMargin': True,
        'setLeverage': True,
        'setMarginMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '1d': '1d',
        '1w': '1w',
        '1M': '1M',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/137283979-8b2a818d-8633-461b-bfca-de89e8c446b2.jpg',
        'api': {
            'spot': {
                'public': 'https://www.mexc.com/open/api/v2',
                'private': 'https://www.mexc.com/open/api/v2',
            },
            'contract': {
                'public': 'https://contract.mexc.com/api/v1/contract',
                'private': 'https://contract.mexc.com/api/v1/private',
            },
        },
        'www': 'https://www.mexc.com/',
        'doc': [
            'https://mxcdevelop.github.io/APIDoc/',
        ],
        'fees': [
            'https://www.mexc.com/fee',
        ],
        'referral': 'https://m.mexc.com/auth/signup?inviteCode=1FQ1G',
    },
    'api': {
        'contract': {
            'public': {
                'get': {
                    'ping': 2,
                    'detail': 2,
                    'support_currencies': 2,
                    'depth/{symbol}': 2,
                    'depth_commits/{symbol}/{limit}': 2,
                    'index_price/{symbol}': 2,
                    'fair_price/{symbol}': 2,
                    'funding_rate/{symbol}': 2,
                    'kline/{symbol}': 2,
                    'kline/index_price/{symbol}': 2,
                    'kline/fair_price/{symbol}': 2,
                    'deals/{symbol}': 2,
                    'ticker': 2,
                    'risk_reverse': 2,
                    'risk_reverse/history': 2,
                    'funding_rate/history': 2,
                },
            },
            'private': {
                'get': {
                    'account/assets': 2,
                    'account/asset/{currency}': 2,
                    'account/transfer_record': 2,
                    'position/list/history_positions': 2,
                    'position/open_positions': 2,
                    'position/funding_records': 2,
                    'order/list/open_orders/{symbol}': 2,
                    'order/list/history_orders': 2,
                    'order/external/{symbol}/{external_oid}': 2,
                    'order/get/{order_id}': 2,
                    'order/batch_query': 8,
                    'order/deal_details/{order_id}': 2,
                    'order/list/order_deals': 2,
                    'planorder/list/orders': 2,
                    'stoporder/list/orders': 2,
                    'stoporder/order_details/{stop_order_id}': 2,
                    'account/risk_limit': 2,
                    'account/tiered_fee_rate': 2,
                },
                'post': {
                    'position/change_margin': 2,
                    'position/change_leverage': 2,
                    'order/submit': 2,
                    'order/submit_batch': 40,
                    'order/cancel': 2,
                    'order/cancel_with_external': 2,
                    'order/cancel_all': 2,
                    'account/change_risk_level': 2,
                    'planorder/place': 2,
                    'planorder/cancel': 2,
                    'planorder/cancel_all': 2,
                    'stoporder/cancel': 2,
                    'stoporder/cancel_all': 2,
                    'stoporder/change_price': 2,
                    'stoporder/change_plan_price': 2,
                },
            },
        },
        'spot': {
            'public': {
                'get': {
                    'market/symbols': 1,
                    'market/coin/list': 2,
                    'common/timestamp': 1,
                    'common/ping': 1,
                    'market/ticker': 1,
                    'market/depth': 1,
                    'market/deals': 1,
                    'market/kline': 1,
                },
            },
            'private': {
                'get': {
                    'account/info': 1,
                    'order/open_orders': 1,
                    'order/list': 1,
                    'order/query': 1,
                    'order/deals': 1,
                    'order/deal_detail': 1,
                    'asset/deposit/address/list': 2,
                    'asset/deposit/list': 2,
                    'asset/address/list': 2,
                    'asset/withdraw/list': 2,
                },
                'post': {
                    'order/place': 1,
                    'order/place_batch': 1,
                    'asset/withdraw': 1,
                },
                'delete': {
                    'order/cancel': 1,
                    'order/cancel_by_symbol': 1,
                },
            },
        },
    },
    'precisionMode': TICK_SIZE,
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': 0.2 / 100,  # maker / taker
            'taker': 0.2 / 100,
        },
    },
    'options': {
        'timeframes': {
            'spot': {
                '1m': '1m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '1d': '1d',
                '1M': '1M',
            },
            'contract': {
                '1m': 'Min1',
                '5m': 'Min5',
                '15m': 'Min15',
                '30m': 'Min30',
                '1h': 'Min60',
                '4h': 'Hour4',
                '8h': 'Hour8',
                '1d': 'Day1',
                '1w': 'Week1',
                '1M': 'Month1',
            },
        },
        'defaultType': 'spot',  # spot, swap
        'networks': {
            'TRX': 'TRC-20',
            'TRC20': 'TRC-20',
            'ETH': 'ERC-20',
            'ERC20': 'ERC-20',
            'BEP20': 'BEP20(BSC)',
        },
    },
    'commonCurrencies': {
        'BEYONDPROTOCOL': 'BEYOND',
        'BIFI': 'BIFIF',
        'BYN': 'BeyondFi',
        'COFI': 'COFIX',  # conflict with CoinFi
        'DFI': 'DfiStarter',
        'DFT': 'dFuture',
        'DRK': 'DRK',
        'EGC': 'Egoras Credit',
        'FLUX1': 'FLUX',  # switched places
        'FLUX': 'FLUX1',  # switched places
        'FREE': 'FreeRossDAO',  # conflict with FREE Coin
        'HERO': 'Step Hero',  # conflict with Metahero
        'MIMO': 'Mimosa',
        'PROS': 'Pros.Finance',  # conflict with Prosper
        'SIN': 'Sin City Token',
    },
    'exceptions': {
        'exact': {
            '400': BadRequest,  # Invalid parameter
            '401': AuthenticationError,  # Invalid signature, fail to pass the validation
            '403': PermissionDenied,  # {"msg":"no permission to access the endpoint","code":403}
            '429': RateLimitExceeded,  # too many requests, rate limit rule is violated
            '1000': AccountNotEnabled,  # {"success":false,"code":1000,"message":"Please open contract account first!"}
            '1002': InvalidOrder,  # {"success":false,"code":1002,"message":"Contract not allow place order!"}
            '10072': AuthenticationError,  # Invalid access key
            '10073': AuthenticationError,  # Invalid request time
            '10075': PermissionDenied,  # {"msg":"IP [xxx.xxx.xxx.xxx] not in the ip white list","code":10075}
            '10101': InsufficientFunds,  # {"code":10101,"msg":"Insufficient balance"}
            '10216': InvalidAddress,  # {"code":10216,"msg":"No available deposit address"}
            '10232': BadSymbol,  # {"code":10232,"msg":"The currency not exist"}
            '30000': BadSymbol,  # Trading is suspended for the requested symbol
            '30001': InvalidOrder,  # Current trading type(bid or ask) is not allowed
            '30002': InvalidOrder,  # Invalid trading amount, smaller than the symbol minimum trading amount
            '30003': InvalidOrder,  # Invalid trading amount, greater than the symbol maximum trading amount
            '30004': InsufficientFunds,  # Insufficient balance
            '30005': InvalidOrder,  # Oversell error
            '30010': InvalidOrder,  # Price out of allowed range
            '30016': BadSymbol,  # Market is closed
            '30019': InvalidOrder,  # Orders count over limit for batch processing
            '30020': BadSymbol,  # Restricted symbol, API access is not allowed for the time being
            '30021': BadSymbol,  # Invalid symbol
            '33333': BadSymbol,  # {"code":33333,"msg":"currency can not be null"}
        },
        'broad': {
            'price and quantity must be positive': InvalidOrder,  # {"msg":"price and quantity must be positive","code":400}
        },
    },
},
{
    'id': 'bitget',
    'name': 'Bitget',
    'countries': ['SG'],
    'version': 'v1',
    'rateLimit': 50,  # up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': None,  # has but unimplemented
        'future': None,  # has but unimplemented
        'option': False,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'fetchAccounts': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDeposits': False,
        'fetchLedger': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderTrades': True,
        'fetchPosition': True,
        'fetchPositions': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': True,
        'fetchWithdrawals': False,
        'setLeverage': True,
        'setMarginMode': True,
    },
    'timeframes': {
        'spot': {
            '1m': '1min',
            '5m': '5min',
            '15m': '15min',
            '30m': '30min',
            '1h': '1h',
            '4h': '4h',
            '12h': '12h',
            '1d': '1day',
            '1w': '7day',  # not documented on the website
        },
        'swap': {
            '1m': '60',
            '5m': '300',
            '15m': '900',
            '30m': '1800',
            '1h': '3600',
            '4h': '14400',
            '12h': '43200',
            '1d': '86400',
            '1w': '604800',
        },
    },
    'hostname': 'bitget.com',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/88317935-a8a21c80-cd22-11ea-8e2b-4b9fac5975eb.jpg',
        'api': {
            'spot': 'https://api.{hostname}',
            'mix': 'https://api.{hostname}',
        },
        'www': 'https://www.bitget.com',
        'doc': [
            'https://bitgetlimited.github.io/apidoc/en/swap',
            'https://bitgetlimited.github.io/apidoc/en/spot',
        ],
        'fees': 'https://www.bitget.cc/zh-CN/rate?tab=1',
        'test': {
            'rest': 'https://testnet.bitget.com',
        },
        'referral': 'https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j',
    },
    'api': {
        'public': {
            'spot': {
                'get': {
                    'public/time': 1,
                    'public/currencies': 1,
                    'public/products': 1,
                    'public/product': 1,
                    'market/ticker': 1,
                    'market/tickers': 1,
                    'market/fills': 1,
                    'market/candles': 1,
                    'market/depth': 1,
                },
            },
            'mix': {
                'get': {
                    'market/contracts': 1,
                    'market/depth': 1,
                    'market/ticker': 1,
                    'market/tickers': 1,
                    'market/fills': 1,
                    'market/candles': 1,
                    'market/index': 1,
                    'market/funding-time': 1,
                    'market/history-fundRate': 1,
                    'market/current-fundRate': 1,
                    'market/open-interest': 1,
                    'market/mark-price': 1,
                    'market/symbol-leverage': 1,
                },
            },
        },
        'private': {
            'spot': {
                'get': {
                    'account/assets': 2,
                    'account/transferRecords': 1,
                },
                'post': {
                    'account/bills': 2,
                    'trade/orders': 2,
                    'trade/batch-orders': 4,
                    'trade/cancel-order': 2,
                    'trade/cancel-batch-orders': 4,
                    'trade/orderInfo': 1,
                    'trade/open-orders': 1,
                    'trade/history': 1,
                    'trade/fills': 1,
                },
            },
            'mix': {
                'get': {
                    'account/account': 2,
                    'account/accounts': 2,
                    'account/open-count': 1,
                    'order/current': 2,
                    'order/history': 2,
                    'order/detail': 2,
                    'order/fills': 2,
                    'position/singlePosition': 2,
                    'position/allPosition': 2,
                    'trace/currentTrack': 2,
                    'trace/followerOrder': 2,
                    'trace/historyTrack': 2,
                    'trace/summary': 2,
                    'trace/profitSettleTokenIdGroup': 2,
                    'trace/profitDateGroupList': 2,
                    'trade/profitDateList': 2,
                    'trace/waitProfitDateList': 2,
                    'trace/traderSymbols': 2,
                },
                'post': {
                    'account/setLeverage': 8,
                    'account/setMargin': 8,
                    'account/setMarginMode': 8,
                    'order/placeOrder': 2,
                    'order/batch-orders': 2,
                    'order/cancel-order': 2,
                    'order/cancel-batch-orders': 2,
                    'plan/placePlan': 2,
                    'plan/modifyPlan': 2,
                    'plan/modifyPlanPreset': 2,
                    'plan/placeTPSL': 2,
                    'plan/modifyTPSLPlan': 2,
                    'plan/cancelPlan': 2,
                    'plan/currentPlan': 2,
                    'plan/historyPlan': 2,
                    'trace/closeTrackOrder': 2,
                    'trace/setUpCopySymbols': 2,
                },
            },
        },
    },
    'fees': {
        'spot': {
            'taker': self.parse_number('0.002'),
            'maker': self.parse_number('0.002'),
        },
        'swap': {
            'taker': self.parse_number('0.0006'),
            'maker': self.parse_number('0.0004'),
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'password': True,
    },
    'exceptions': {
        # http error codes
        # 400 Bad Request — Invalid request format
        # 401 Unauthorized — Invalid API Key
        # 403 Forbidden — You do not have access to the requested resource
        # 404 Not Found
        # 500 Internal Server Error — We had a problem with our server
        'exact': {
            '1': ExchangeError,  # {"code": 1, "message": "System error"}
            # undocumented
            'failure to get a peer from the ring-balancer': ExchangeNotAvailable,  # {"message": "failure to get a peer from the ring-balancer"}
            '4010': PermissionDenied,  # {"code": 4010, "message": "For the security of your funds, withdrawals are not permitted within 24 hours after changing fund password  / mobile number / Google Authenticator settings "}
            # common
            # '0': ExchangeError,  # 200 successful,when the order placement / cancellation / operation is successful
            '4001': ExchangeError,  # no data received in 30s
            '4002': ExchangeError,  # Buffer full. cannot write data
            # --------------------------------------------------------
            '30001': AuthenticationError,  # {"code": 30001, "message": 'request header "OK_ACCESS_KEY" cannot be blank'}
            '30002': AuthenticationError,  # {"code": 30002, "message": 'request header "OK_ACCESS_SIGN" cannot be blank'}
            '30003': AuthenticationError,  # {"code": 30003, "message": 'request header "OK_ACCESS_TIMESTAMP" cannot be blank'}
            '30004': AuthenticationError,  # {"code": 30004, "message": 'request header "OK_ACCESS_PASSPHRASE" cannot be blank'}
            '30005': InvalidNonce,  # {"code": 30005, "message": "invalid OK_ACCESS_TIMESTAMP"}
            '30006': AuthenticationError,  # {"code": 30006, "message": "invalid OK_ACCESS_KEY"}
            '30007': BadRequest,  # {"code": 30007, "message": 'invalid Content_Type, please use "application/json" format'}
            '30008': RequestTimeout,  # {"code": 30008, "message": "timestamp request expired"}
            '30009': ExchangeError,  # {"code": 30009, "message": "system error"}
            '30010': AuthenticationError,  # {"code": 30010, "message": "API validation failed"}
            '30011': PermissionDenied,  # {"code": 30011, "message": "invalid IP"}
            '30012': AuthenticationError,  # {"code": 30012, "message": "invalid authorization"}
            '30013': AuthenticationError,  # {"code": 30013, "message": "invalid sign"}
            '30014': DDoSProtection,  # {"code": 30014, "message": "request too frequent"}
            '30015': AuthenticationError,  # {"code": 30015, "message": 'request header "OK_ACCESS_PASSPHRASE" incorrect'}
            '30016': ExchangeError,  # {"code": 30015, "message": "you are using v1 apiKey, please use v1 endpoint. If you would like to use v3 endpoint, please subscribe to v3 apiKey"}
            '30017': ExchangeError,  # {"code": 30017, "message": "apikey's broker id does not match"}
            '30018': ExchangeError,  # {"code": 30018, "message": "apikey's domain does not match"}
            '30019': ExchangeNotAvailable,  # {"code": 30019, "message": "Api is offline or unavailable"}
            '30020': BadRequest,  # {"code": 30020, "message": "body cannot be blank"}
            '30021': BadRequest,  # {"code": 30021, "message": "Json data format error"}, {"code": 30021, "message": "json data format error"}
            '30022': PermissionDenied,  # {"code": 30022, "message": "Api has been frozen"}
            '30023': BadRequest,  # {"code": 30023, "message": "{0} parameter cannot be blank"}
            '30024': BadSymbol,  # {"code":30024,"message":"\"instrument_id\" is an invalid parameter"}
            '30025': BadRequest,  # {"code": 30025, "message": "{0} parameter category error"}
            '30026': DDoSProtection,  # {"code": 30026, "message": "requested too frequent"}
            '30027': AuthenticationError,  # {"code": 30027, "message": "login failure"}
            '30028': PermissionDenied,  # {"code": 30028, "message": "unauthorized execution"}
            '30029': AccountSuspended,  # {"code": 30029, "message": "account suspended"}
            '30030': ExchangeError,  # {"code": 30030, "message": "endpoint request failed. Please try again"}
            '30031': BadRequest,  # {"code": 30031, "message": "token does not exist"}
            '30032': BadSymbol,  # {"code": 30032, "message": "pair does not exist"}
            '30033': BadRequest,  # {"code": 30033, "message": "exchange domain does not exist"}
            '30034': ExchangeError,  # {"code": 30034, "message": "exchange ID does not exist"}
            '30035': ExchangeError,  # {"code": 30035, "message": "trading is not supported in self website"}
            '30036': ExchangeError,  # {"code": 30036, "message": "no relevant data"}
            '30037': ExchangeNotAvailable,  # {"code": 30037, "message": "endpoint is offline or unavailable"}
            # '30038': AuthenticationError,  # {"code": 30038, "message": "user does not exist"}
            '30038': OnMaintenance,  # {"client_oid":"","code":"30038","error_code":"30038","error_message":"Matching engine is being upgraded. Please try in about 1 minute.","message":"Matching engine is being upgraded. Please try in about 1 minute.","order_id":"-1","result":false}
            # futures
            '32001': AccountSuspended,  # {"code": 32001, "message": "futures account suspended"}
            '32002': PermissionDenied,  # {"code": 32002, "message": "futures account does not exist"}
            '32003': CancelPending,  # {"code": 32003, "message": "canceling, please wait"}
            '32004': ExchangeError,  # {"code": 32004, "message": "you have no unfilled orders"}
            '32005': InvalidOrder,  # {"code": 32005, "message": "max order quantity"}
            '32006': InvalidOrder,  # {"code": 32006, "message": "the order price or trigger price exceeds USD 1 million"}
            '32007': InvalidOrder,  # {"code": 32007, "message": "leverage level must be the same for orders on the same side of the contract"}
            '32008': InvalidOrder,  # {"code": 32008, "message": "Max. positions to open(cross margin)"}
            '32009': InvalidOrder,  # {"code": 32009, "message": "Max. positions to open(fixed margin)"}
            '32010': ExchangeError,  # {"code": 32010, "message": "leverage cannot be changed with open positions"}
            '32011': ExchangeError,  # {"code": 32011, "message": "futures status error"}
            '32012': ExchangeError,  # {"code": 32012, "message": "futures order update error"}
            '32013': ExchangeError,  # {"code": 32013, "message": "token type is blank"}
            '32014': ExchangeError,  # {"code": 32014, "message": "your number of contracts closing is larger than the number of contracts available"}
            '32015': ExchangeError,  # {"code": 32015, "message": "margin ratio is lower than 100% before opening positions"}
            '32016': ExchangeError,  # {"code": 32016, "message": "margin ratio is lower than 100% after opening position"}
            '32017': ExchangeError,  # {"code": 32017, "message": "no BBO"}
            '32018': ExchangeError,  # {"code": 32018, "message": "the order quantity is less than 1, please try again"}
            '32019': ExchangeError,  # {"code": 32019, "message": "the order price deviates from the price of the previous minute by more than 3%"}
            '32020': ExchangeError,  # {"code": 32020, "message": "the price is not in the range of the price limit"}
            '32021': ExchangeError,  # {"code": 32021, "message": "leverage error"}
            '32022': ExchangeError,  # {"code": 32022, "message": "self function is not supported in your country or region according to the regulations"}
            '32023': ExchangeError,  # {"code": 32023, "message": "self account has outstanding loan"}
            '32024': ExchangeError,  # {"code": 32024, "message": "order cannot be placed during delivery"}
            '32025': ExchangeError,  # {"code": 32025, "message": "order cannot be placed during settlement"}
            '32026': ExchangeError,  # {"code": 32026, "message": "your account is restricted from opening positions"}
            '32027': ExchangeError,  # {"code": 32027, "message": "cancelled over 20 orders"}
            '32028': AccountSuspended,  # {"code": 32028, "message": "account is suspended and liquidated"}
            '32029': ExchangeError,  # {"code": 32029, "message": "order info does not exist"}
            '32030': InvalidOrder,  # The order cannot be cancelled
            '32031': ArgumentsRequired,  # client_oid or order_id is required.
            '32038': AuthenticationError,  # User does not exist
            '32040': ExchangeError,  # User have open contract orders or position
            '32044': ExchangeError,  # {"code": 32044, "message": "The margin ratio after submitting self order is lower than the minimum requirement({0}) for your tier."}
            '32045': ExchangeError,  # String of commission over 1 million
            '32046': ExchangeError,  # Each user can hold up to 10 trade plans at the same time
            '32047': ExchangeError,  # system error
            '32048': InvalidOrder,  # Order strategy track range error
            '32049': ExchangeError,  # Each user can hold up to 10 track plans at the same time
            '32050': InvalidOrder,  # Order strategy rang error
            '32051': InvalidOrder,  # Order strategy ice depth error
            '32052': ExchangeError,  # String of commission over 100 thousand
            '32053': ExchangeError,  # Each user can hold up to 6 ice plans at the same time
            '32057': ExchangeError,  # The order price is zero. Market-close-all function cannot be executed
            '32054': ExchangeError,  # Trade not allow
            '32055': InvalidOrder,  # cancel order error
            '32056': ExchangeError,  # iceberg per order average should between {0}-{1} contracts
            '32058': ExchangeError,  # Each user can hold up to 6 initiative plans at the same time
            '32059': InvalidOrder,  # Total amount should exceed per order amount
            '32060': InvalidOrder,  # Order strategy type error
            '32061': InvalidOrder,  # Order strategy initiative limit error
            '32062': InvalidOrder,  # Order strategy initiative range error
            '32063': InvalidOrder,  # Order strategy initiative rate error
            '32064': ExchangeError,  # Time Stringerval of orders should set between 5-120s
            '32065': ExchangeError,  # Close amount exceeds the limit of Market-close-all(999 for BTC, and 9999 for the rest tokens)
            '32066': ExchangeError,  # You have open orders. Please cancel all open orders before changing your leverage level.
            '32067': ExchangeError,  # Account equity < required margin in self setting. Please adjust your leverage level again.
            '32068': ExchangeError,  # The margin for self position will fall short of the required margin in self setting. Please adjust your leverage level or increase your margin to proceed.
            '32069': ExchangeError,  # Target leverage level too low. Your account balance is insufficient to cover the margin required. Please adjust the leverage level again.
            '32070': ExchangeError,  # Please check open position or unfilled order
            '32071': ExchangeError,  # Your current liquidation mode does not support self action.
            '32072': ExchangeError,  # The highest available margin for your order’s tier is {0}. Please edit your margin and place a new order.
            '32073': ExchangeError,  # The action does not apply to the token
            '32074': ExchangeError,  # The number of contracts of your position, open orders, and the current order has exceeded the maximum order limit of self asset.
            '32075': ExchangeError,  # Account risk rate breach
            '32076': ExchangeError,  # Liquidation of the holding position(s) at market price will require cancellation of all pending close orders of the contracts.
            '32077': ExchangeError,  # Your margin for self asset in futures account is insufficient and the position has been taken over for liquidation.(You will not be able to place orders, close positions, transfer funds, or add margin during self period of time. Your account will be restored after the liquidation is complete.)
            '32078': ExchangeError,  # Please cancel all open orders before switching the liquidation mode(Please cancel all open orders before switching the liquidation mode)
            '32079': ExchangeError,  # Your open positions are at high risk.(Please add margin or reduce positions before switching the mode)
            '32080': ExchangeError,  # Funds cannot be transferred out within 30 minutes after futures settlement
            '32083': ExchangeError,  # The number of contracts should be a positive multiple of %%. Please place your order again
            # token and margin trading
            '33001': PermissionDenied,  # {"code": 33001, "message": "margin account for self pair is not enabled yet"}
            '33002': AccountSuspended,  # {"code": 33002, "message": "margin account for self pair is suspended"}
            '33003': InsufficientFunds,  # {"code": 33003, "message": "no loan balance"}
            '33004': ExchangeError,  # {"code": 33004, "message": "loan amount cannot be smaller than the minimum limit"}
            '33005': ExchangeError,  # {"code": 33005, "message": "repayment amount must exceed 0"}
            '33006': ExchangeError,  # {"code": 33006, "message": "loan order not found"}
            '33007': ExchangeError,  # {"code": 33007, "message": "status not found"}
            '33008': InsufficientFunds,  # {"code": 33008, "message": "loan amount cannot exceed the maximum limit"}
            '33009': ExchangeError,  # {"code": 33009, "message": "user ID is blank"}
            '33010': ExchangeError,  # {"code": 33010, "message": "you cannot cancel an order during session 2 of call auction"}
            '33011': ExchangeError,  # {"code": 33011, "message": "no new market data"}
            '33012': ExchangeError,  # {"code": 33012, "message": "order cancellation failed"}
            '33013': InvalidOrder,  # {"code": 33013, "message": "order placement failed"}
            '33014': OrderNotFound,  # {"code": 33014, "message": "order does not exist"}
            '33015': InvalidOrder,  # {"code": 33015, "message": "exceeded maximum limit"}
            '33016': ExchangeError,  # {"code": 33016, "message": "margin trading is not open for self token"}
            '33017': InsufficientFunds,  # {"code": 33017, "message": "insufficient balance"}
            '33018': ExchangeError,  # {"code": 33018, "message": "self parameter must be smaller than 1"}
            '33020': ExchangeError,  # {"code": 33020, "message": "request not supported"}
            '33021': BadRequest,  # {"code": 33021, "message": "token and the pair do not match"}
            '33022': InvalidOrder,  # {"code": 33022, "message": "pair and the order do not match"}
            '33023': ExchangeError,  # {"code": 33023, "message": "you can only place market orders during call auction"}
            '33024': InvalidOrder,  # {"code": 33024, "message": "trading amount too small"}
            '33025': InvalidOrder,  # {"code": 33025, "message": "base token amount is blank"}
            '33026': ExchangeError,  # {"code": 33026, "message": "transaction completed"}
            '33027': InvalidOrder,  # {"code": 33027, "message": "cancelled order or order cancelling"}
            '33028': InvalidOrder,  # {"code": 33028, "message": "the decimal places of the trading price exceeded the limit"}
            '33029': InvalidOrder,  # {"code": 33029, "message": "the decimal places of the trading size exceeded the limit"}
            '33034': ExchangeError,  # {"code": 33034, "message": "You can only place limit order after Call Auction has started"}
            '33035': ExchangeError,  # This type of order cannot be canceled(This type of order cannot be canceled)
            '33036': ExchangeError,  # Exceeding the limit of entrust order
            '33037': ExchangeError,  # The buy order price should be lower than 130% of the trigger price
            '33038': ExchangeError,  # The sell order price should be higher than 70% of the trigger price
            '33039': ExchangeError,  # The limit of callback rate is 0 < x <= 5%
            '33040': ExchangeError,  # The trigger price of a buy order should be lower than the latest transaction price
            '33041': ExchangeError,  # The trigger price of a sell order should be higher than the latest transaction price
            '33042': ExchangeError,  # The limit of price variance is 0 < x <= 1%
            '33043': ExchangeError,  # The total amount must be larger than 0
            '33044': ExchangeError,  # The average amount should be 1/1000 * total amount <= x <= total amount
            '33045': ExchangeError,  # The price should not be 0, including trigger price, order price, and price limit
            '33046': ExchangeError,  # Price variance should be 0 < x <= 1%
            '33047': ExchangeError,  # Sweep ratio should be 0 < x <= 100%
            '33048': ExchangeError,  # Per order limit: Total amount/1000 < x <= Total amount
            '33049': ExchangeError,  # Total amount should be X > 0
            '33050': ExchangeError,  # Time interval should be 5 <= x <= 120s
            '33051': ExchangeError,  # cancel order number not higher limit: plan and track entrust no more than 10, ice and time entrust no more than 6
            '33059': BadRequest,  # {"code": 33059, "message": "client_oid or order_id is required"}
            '33060': BadRequest,  # {"code": 33060, "message": "Only fill in either parameter client_oid or order_id"}
            '33061': ExchangeError,  # Value of a single market price order cannot exceed 100,000 USD
            '33062': ExchangeError,  # The leverage ratio is too high. The borrowed position has exceeded the maximum position of self leverage ratio. Please readjust the leverage ratio
            '33063': ExchangeError,  # Leverage multiple is too low, there is insufficient margin in the account, please readjust the leverage ratio
            '33064': ExchangeError,  # The setting of the leverage ratio cannot be less than 2, please readjust the leverage ratio
            '33065': ExchangeError,  # Leverage ratio exceeds maximum leverage ratio, please readjust leverage ratio
            # account
            '21009': ExchangeError,  # Funds cannot be transferred out within 30 minutes after swap settlement(Funds cannot be transferred out within 30 minutes after swap settlement)
            '34001': PermissionDenied,  # {"code": 34001, "message": "withdrawal suspended"}
            '34002': InvalidAddress,  # {"code": 34002, "message": "please add a withdrawal address"}
            '34003': ExchangeError,  # {"code": 34003, "message": "sorry, self token cannot be withdrawn to xx at the moment"}
            '34004': ExchangeError,  # {"code": 34004, "message": "withdrawal fee is smaller than minimum limit"}
            '34005': ExchangeError,  # {"code": 34005, "message": "withdrawal fee exceeds the maximum limit"}
            '34006': ExchangeError,  # {"code": 34006, "message": "withdrawal amount is lower than the minimum limit"}
            '34007': ExchangeError,  # {"code": 34007, "message": "withdrawal amount exceeds the maximum limit"}
            '34008': InsufficientFunds,  # {"code": 34008, "message": "insufficient balance"}
            '34009': ExchangeError,  # {"code": 34009, "message": "your withdrawal amount exceeds the daily limit"}
            '34010': ExchangeError,  # {"code": 34010, "message": "transfer amount must be larger than 0"}
            '34011': ExchangeError,  # {"code": 34011, "message": "conditions not met"}
            '34012': ExchangeError,  # {"code": 34012, "message": "the minimum withdrawal amount for NEO is 1, and the amount must be an integer"}
            '34013': ExchangeError,  # {"code": 34013, "message": "please transfer"}
            '34014': ExchangeError,  # {"code": 34014, "message": "transfer limited"}
            '34015': ExchangeError,  # {"code": 34015, "message": "subaccount does not exist"}
            '34016': PermissionDenied,  # {"code": 34016, "message": "transfer suspended"}
            '34017': AccountSuspended,  # {"code": 34017, "message": "account suspended"}
            '34018': AuthenticationError,  # {"code": 34018, "message": "incorrect trades password"}
            '34019': PermissionDenied,  # {"code": 34019, "message": "please bind your email before withdrawal"}
            '34020': PermissionDenied,  # {"code": 34020, "message": "please bind your funds password before withdrawal"}
            '34021': InvalidAddress,  # {"code": 34021, "message": "Not verified address"}
            '34022': ExchangeError,  # {"code": 34022, "message": "Withdrawals are not available for sub accounts"}
            '34023': PermissionDenied,  # {"code": 34023, "message": "Please enable futures trading before transferring your funds"}
            '34026': ExchangeError,  # transfer too frequently(transfer too frequently)
            '34036': ExchangeError,  # Parameter is incorrect, please refer to API documentation
            '34037': ExchangeError,  # Get the sub-account balance interface, account type is not supported
            '34038': ExchangeError,  # Since your C2C transaction is unusual, you are restricted from fund transfer. Please contact our customer support to cancel the restriction
            '34039': ExchangeError,  # You are now restricted from transferring out your funds due to abnormal trades on C2C Market. Please transfer your fund on our website or app instead to verify your identity
            # swap
            '35001': ExchangeError,  # {"code": 35001, "message": "Contract does not exist"}
            '35002': ExchangeError,  # {"code": 35002, "message": "Contract settling"}
            '35003': ExchangeError,  # {"code": 35003, "message": "Contract paused"}
            '35004': ExchangeError,  # {"code": 35004, "message": "Contract pending settlement"}
            '35005': AuthenticationError,  # {"code": 35005, "message": "User does not exist"}
            '35008': InvalidOrder,  # {"code": 35008, "message": "Risk ratio too high"}
            '35010': InvalidOrder,  # {"code": 35010, "message": "Position closing too large"}
            '35012': InvalidOrder,  # {"code": 35012, "message": "Incorrect order size"}
            '35014': InvalidOrder,  # {"code": 35014, "message": "Order price is not within limit"}
            '35015': InvalidOrder,  # {"code": 35015, "message": "Invalid leverage level"}
            '35017': ExchangeError,  # {"code": 35017, "message": "Open orders exist"}
            '35019': InvalidOrder,  # {"code": 35019, "message": "Order size too large"}
            '35020': InvalidOrder,  # {"code": 35020, "message": "Order price too high"}
            '35021': InvalidOrder,  # {"code": 35021, "message": "Order size exceeded current tier limit"}
            '35022': ExchangeError,  # {"code": 35022, "message": "Contract status error"}
            '35024': ExchangeError,  # {"code": 35024, "message": "Contract not initialized"}
            '35025': InsufficientFunds,  # {"code": 35025, "message": "No account balance"}
            '35026': ExchangeError,  # {"code": 35026, "message": "Contract settings not initialized"}
            '35029': OrderNotFound,  # {"code": 35029, "message": "Order does not exist"}
            '35030': InvalidOrder,  # {"code": 35030, "message": "Order size too large"}
            '35031': InvalidOrder,  # {"code": 35031, "message": "Cancel order size too large"}
            '35032': ExchangeError,  # {"code": 35032, "message": "Invalid user status"}
            '35037': ExchangeError,  # No last traded price in cache
            '35039': ExchangeError,  # {"code": 35039, "message": "Open order quantity exceeds limit"}
            '35040': InvalidOrder,  # {"error_message":"Invalid order type","result":"true","error_code":"35040","order_id":"-1"}
            '35044': ExchangeError,  # {"code": 35044, "message": "Invalid order status"}
            '35046': InsufficientFunds,  # {"code": 35046, "message": "Negative account balance"}
            '35047': InsufficientFunds,  # {"code": 35047, "message": "Insufficient account balance"}
            '35048': ExchangeError,  # {"code": 35048, "message": "User contract is frozen and liquidating"}
            '35049': InvalidOrder,  # {"code": 35049, "message": "Invalid order type"}
            '35050': InvalidOrder,  # {"code": 35050, "message": "Position settings are blank"}
            '35052': InsufficientFunds,  # {"code": 35052, "message": "Insufficient cross margin"}
            '35053': ExchangeError,  # {"code": 35053, "message": "Account risk too high"}
            '35055': InsufficientFunds,  # {"code": 35055, "message": "Insufficient account balance"}
            '35057': ExchangeError,  # {"code": 35057, "message": "No last traded price"}
            '35058': ExchangeError,  # {"code": 35058, "message": "No limit"}
            '35059': BadRequest,  # {"code": 35059, "message": "client_oid or order_id is required"}
            '35060': BadRequest,  # {"code": 35060, "message": "Only fill in either parameter client_oid or order_id"}
            '35061': BadRequest,  # {"code": 35061, "message": "Invalid instrument_id"}
            '35062': InvalidOrder,  # {"code": 35062, "message": "Invalid match_price"}
            '35063': InvalidOrder,  # {"code": 35063, "message": "Invalid order_size"}
            '35064': InvalidOrder,  # {"code": 35064, "message": "Invalid client_oid"}
            '35066': InvalidOrder,  # Order interval error
            '35067': InvalidOrder,  # Time-weighted order ratio error
            '35068': InvalidOrder,  # Time-weighted order range error
            '35069': InvalidOrder,  # Time-weighted single transaction limit error
            '35070': InvalidOrder,  # Algo order type error
            '35071': InvalidOrder,  # Order total must be larger than single order limit
            '35072': InvalidOrder,  # Maximum 6 unfulfilled time-weighted orders can be held at the same time
            '35073': InvalidOrder,  # Order price is 0. Market-close-all not available
            '35074': InvalidOrder,  # Iceberg order single transaction average error
            '35075': InvalidOrder,  # Failed to cancel order
            '35076': InvalidOrder,  # LTC 20x leverage. Not allowed to open position
            '35077': InvalidOrder,  # Maximum 6 unfulfilled iceberg orders can be held at the same time
            '35078': InvalidOrder,  # Order amount exceeded 100,000
            '35079': InvalidOrder,  # Iceberg order price variance error
            '35080': InvalidOrder,  # Callback rate error
            '35081': InvalidOrder,  # Maximum 10 unfulfilled trail orders can be held at the same time
            '35082': InvalidOrder,  # Trail order callback rate error
            '35083': InvalidOrder,  # Each user can only hold a maximum of 10 unfulfilled stop-limit orders at the same time
            '35084': InvalidOrder,  # Order amount exceeded 1 million
            '35085': InvalidOrder,  # Order amount is not in the correct range
            '35086': InvalidOrder,  # Price exceeds 100 thousand
            '35087': InvalidOrder,  # Price exceeds 100 thousand
            '35088': InvalidOrder,  # Average amount error
            '35089': InvalidOrder,  # Price exceeds 100 thousand
            '35090': ExchangeError,  # No stop-limit orders available for cancelation
            '35091': ExchangeError,  # No trail orders available for cancellation
            '35092': ExchangeError,  # No iceberg orders available for cancellation
            '35093': ExchangeError,  # No trail orders available for cancellation
            '35094': ExchangeError,  # Stop-limit order last traded price error
            '35095': BadRequest,  # Instrument_id error
            '35096': ExchangeError,  # Algo order status error
            '35097': ExchangeError,  # Order status and order ID cannot exist at the same time
            '35098': ExchangeError,  # An order status or order ID must exist
            '35099': ExchangeError,  # Algo order ID error
            # option
            '36001': BadRequest,  # Invalid underlying index.
            '36002': BadRequest,  # Instrument does not exist.
            '36005': ExchangeError,  # Instrument status is invalid.
            '36101': AuthenticationError,  # Account does not exist.
            '36102': PermissionDenied,  # Account status is invalid.
            '36103': AccountSuspended,  # Account is suspended due to ongoing liquidation.
            '36104': PermissionDenied,  # Account is not enabled for options trading.
            '36105': PermissionDenied,  # Please enable the account for option contract.
            '36106': AccountSuspended,  # Funds cannot be transferred in or out, as account is suspended.
            '36107': PermissionDenied,  # Funds cannot be transferred out within 30 minutes after option exercising or settlement.
            '36108': InsufficientFunds,  # Funds cannot be transferred in or out, as equity of the account is less than zero.
            '36109': PermissionDenied,  # Funds cannot be transferred in or out during option exercising or settlement.
            '36201': PermissionDenied,  # New order function is blocked.
            '36202': PermissionDenied,  # Account does not have permission to short option.
            '36203': InvalidOrder,  # Invalid format for client_oid.
            '36204': ExchangeError,  # Invalid format for request_id.
            '36205': BadRequest,  # Instrument id does not match underlying index.
            '36206': BadRequest,  # Order_id and client_oid can not be used at the same time.
            '36207': InvalidOrder,  # Either order price or fartouch price must be present.
            '36208': InvalidOrder,  # Either order price or size must be present.
            '36209': InvalidOrder,  # Either order_id or client_oid must be present.
            '36210': InvalidOrder,  # Either order_ids or client_oids must be present.
            '36211': InvalidOrder,  # Exceeding max batch size for order submission.
            '36212': InvalidOrder,  # Exceeding max batch size for oder cancellation.
            '36213': InvalidOrder,  # Exceeding max batch size for order amendment.
            '36214': ExchangeError,  # Instrument does not have valid bid/ask quote.
            '36216': OrderNotFound,  # Order does not exist.
            '36217': InvalidOrder,  # Order submission failed.
            '36218': InvalidOrder,  # Order cancellation failed.
            '36219': InvalidOrder,  # Order amendment failed.
            '36220': InvalidOrder,  # Order is pending cancel.
            '36221': InvalidOrder,  # Order qty is not valid multiple of lot size.
            '36222': InvalidOrder,  # Order price is breaching highest buy limit.
            '36223': InvalidOrder,  # Order price is breaching lowest sell limit.
            '36224': InvalidOrder,  # Exceeding max order size.
            '36225': InvalidOrder,  # Exceeding max open order count for instrument.
            '36226': InvalidOrder,  # Exceeding max open order count for underlying.
            '36227': InvalidOrder,  # Exceeding max open size across all orders for underlying
            '36228': InvalidOrder,  # Exceeding max available qty for instrument.
            '36229': InvalidOrder,  # Exceeding max available qty for underlying.
            '36230': InvalidOrder,  # Exceeding max position limit for underlying.
            # --------------------------------------------------------
            # swap
            '400': BadRequest,  # Bad Request
            '401': AuthenticationError,  # Unauthorized access
            '403': PermissionDenied,  # Access prohibited
            '404': BadRequest,  # Request address does not exist
            '405': BadRequest,  # The HTTP Method is not supported
            '415': BadRequest,  # The current media type is not supported
            '429': DDoSProtection,  # Too many requests
            '500': ExchangeNotAvailable,  # System busy
            '1001': RateLimitExceeded,  # The request is too frequent and has been throttled
            '1002': ExchangeError,  # {0} verifications within 24 hours
            '1003': ExchangeError,  # You failed more than {0} times today, the current operation is locked, please try again in 24 hours
            # '00000': ExchangeError,  # success
            '40001': AuthenticationError,  # ACCESS_KEY cannot be empty
            '40002': AuthenticationError,  # SECRET_KEY cannot be empty
            '40003': AuthenticationError,  # Signature cannot be empty
            '40004': InvalidNonce,  # Request timestamp expired
            '40005': InvalidNonce,  # Invalid ACCESS_TIMESTAMP
            '40006': AuthenticationError,  # Invalid ACCESS_KEY
            '40007': BadRequest,  # Invalid Content_Type
            '40008': InvalidNonce,  # Request timestamp expired
            '40009': AuthenticationError,  # sign signature error
            '40010': AuthenticationError,  # sign signature error
            '40011': AuthenticationError,  # ACCESS_PASSPHRASE cannot be empty
            '40012': AuthenticationError,  # apikey/password is incorrect
            '40013': ExchangeError,  # User status is abnormal
            '40014': PermissionDenied,  # Incorrect permissions
            '40015': ExchangeError,  # System is abnormal, please try again later
            '40016': PermissionDenied,  # The user must bind the phone or Google
            '40017': ExchangeError,  # Parameter verification failed
            '40018': PermissionDenied,  # Invalid IP
            '40102': BadRequest,  # Contract configuration does not exist, please check the parameters
            '40103': BadRequest,  # Request method cannot be empty
            '40104': ExchangeError,  # Lever adjustment failure
            '40105': ExchangeError,  # Abnormal access to current price limit data
            '40106': ExchangeError,  # Abnormal get next settlement time
            '40107': ExchangeError,  # Abnormal access to index price data
            '40108': InvalidOrder,  # Wrong order quantity
            '40109': OrderNotFound,  # The data of the order cannot be found, please confirm the order number
            '40200': OnMaintenance,  # Server upgrade, please try again later
            '40201': InvalidOrder,  # Order number cannot be empty
            '40202': ExchangeError,  # User information cannot be empty
            '40203': BadRequest,  # The amount of adjustment margin cannot be empty or negative
            '40204': BadRequest,  # Adjustment margin type cannot be empty
            '40205': BadRequest,  # Adjusted margin type data is wrong
            '40206': BadRequest,  # The direction of the adjustment margin cannot be empty
            '40207': BadRequest,  # The adjustment margin data is wrong
            '40208': BadRequest,  # The accuracy of the adjustment margin amount is incorrect
            '40209': BadRequest,  # The current page number is wrong, please confirm
            '40300': ExchangeError,  # User does not exist
            '40301': PermissionDenied,  # Permission has not been obtained yet. If you need to use it, please contact customer service
            '40302': BadRequest,  # Parameter abnormality
            '40303': BadRequest,  # Can only query up to 20,000 data
            '40304': BadRequest,  # Parameter type is abnormal
            '40305': BadRequest,  # Client_oid length is not greater than 50, and cannot be Martian characters
            '40306': ExchangeError,  # Batch processing orders can only process up to 20
            '40308': OnMaintenance,  # The contract is being temporarily maintained
            '40309': BadSymbol,  # The contract has been removed
            '40400': ExchangeError,  # Status check abnormal
            '40401': ExchangeError,  # The operation cannot be performed
            '40402': BadRequest,  # The opening direction cannot be empty
            '40403': BadRequest,  # Wrong opening direction format
            '40404': BadRequest,  # Whether to enable automatic margin call parameters cannot be empty
            '40405': BadRequest,  # Whether to enable the automatic margin call parameter type is wrong
            '40406': BadRequest,  # Whether to enable automatic margin call parameters is of unknown type
            '40407': ExchangeError,  # The query direction is not the direction entrusted by the plan
            '40408': ExchangeError,  # Wrong time range
            '40409': ExchangeError,  # Time format error
            '40500': InvalidOrder,  # Client_oid check error
            '40501': ExchangeError,  # Channel name error
            '40502': ExchangeError,  # If it is a copy user, you must pass the copy to whom
            '40503': ExchangeError,  # With the single type
            '40504': ExchangeError,  # Platform code must pass
            '40505': ExchangeError,  # Not the same as single type
            '40506': AuthenticationError,  # Platform signature error
            '40507': AuthenticationError,  # Api signature error
            '40508': ExchangeError,  # KOL is not authorized
            '40509': ExchangeError,  # Abnormal copy end
            '40600': ExchangeError,  # Copy function suspended
            '40601': ExchangeError,  # Followers cannot be KOL
            '40602': ExchangeError,  # The number of copies has reached the limit and cannot process the request
            '40603': ExchangeError,  # Abnormal copy end
            '40604': ExchangeNotAvailable,  # Server is busy, please try again later
            '40605': ExchangeError,  # Copy type, the copy number must be passed
            '40606': ExchangeError,  # The type of document number is wrong
            '40607': ExchangeError,  # Document number must be passed
            '40608': ExchangeError,  # No documented products currently supported
            '40609': ExchangeError,  # The contract product does not support copying
            '40700': BadRequest,  # Cursor parameters are incorrect
            '40701': ExchangeError,  # KOL is not authorized
            '40702': ExchangeError,  # Unauthorized copying user
            '40703': ExchangeError,  # Bill inquiry start and end time cannot be empty
            '40704': ExchangeError,  # Can only check the data of the last three months
            '40705': BadRequest,  # The start and end time cannot exceed 90 days
            '40706': InvalidOrder,  # Wrong order price
            '40707': BadRequest,  # Start time is greater than end time
            '40708': BadRequest,  # Parameter verification is abnormal
            '40709': ExchangeError,  # There is no position in self position, and no automatic margin call can be set
            '40710': ExchangeError,  # Abnormal account status
            '40711': InsufficientFunds,  # Insufficient contract account balance
            '40712': InsufficientFunds,  # Insufficient margin
            '40713': ExchangeError,  # Cannot exceed the maximum transferable margin amount
            '40714': ExchangeError,  # No direct margin call is allowed
            # spot
            'invalid sign': AuthenticationError,
            'invalid currency': BadSymbol,  # invalid trading pair
            'invalid symbol': BadSymbol,
            'invalid period': BadRequest,  # invalid Kline type
            'invalid user': ExchangeError,
            'invalid amount': InvalidOrder,
            'invalid type': InvalidOrder,  # {"status":"error","ts":1595700344504,"err_code":"invalid-parameter","err_msg":"invalid type"}
            'invalid orderId': InvalidOrder,
            'invalid record': ExchangeError,
            'invalid accountId': BadRequest,
            'invalid address': BadRequest,
            'accesskey not None': AuthenticationError,  # {"status":"error","ts":1595704360508,"err_code":"invalid-parameter","err_msg":"accesskey not null"}
            'illegal accesskey': AuthenticationError,
            'sign not null': AuthenticationError,
            'req_time is too much difference from server time': InvalidNonce,
            'permissions not right': PermissionDenied,  # {"status":"error","ts":1595704490084,"err_code":"invalid-parameter","err_msg":"permissions not right"}
            'illegal sign invalid': AuthenticationError,  # {"status":"error","ts":1595684716042,"err_code":"invalid-parameter","err_msg":"illegal sign invalid"}
            'user locked': AccountSuspended,
            'Request Frequency Is Too High': RateLimitExceeded,
            'more than a daily rate of cash': BadRequest,
            'more than the maximum daily withdrawal amount': BadRequest,
            'need to bind email or mobile': ExchangeError,
            'user forbid': PermissionDenied,
            'User Prohibited Cash Withdrawal': PermissionDenied,
            'Cash Withdrawal Is Less Than The Minimum Value': BadRequest,
            'Cash Withdrawal Is More Than The Maximum Value': BadRequest,
            'the account with in 24 hours ban coin': PermissionDenied,
            'order cancel fail': BadRequest,  # {"status":"error","ts":1595703343035,"err_code":"bad-request","err_msg":"order cancel fail"}
            'base symbol error': BadSymbol,
            'base date error': ExchangeError,
            'api signature not valid': AuthenticationError,
            'gateway internal error': ExchangeError,
            'audit failed': ExchangeError,
            'order queryorder invalid': BadRequest,
            'market no need price': InvalidOrder,
            'limit need price': InvalidOrder,
            'userid not equal to account_id': ExchangeError,
            'your balance is low': InsufficientFunds,  # {"status":"error","ts":1595594160149,"err_code":"invalid-parameter","err_msg":"invalid size, valid range: [1,2000]"}
            'address invalid cointype': ExchangeError,
            'system exception': ExchangeError,  # {"status":"error","ts":1595711862763,"err_code":"system exception","err_msg":"system exception"}
            '50003': ExchangeError,  # No record
            '50004': BadSymbol,  # The transaction pair is currently not supported or has been suspended
            '50006': PermissionDenied,  # The account is forbidden to withdraw. If you have any questions, please contact customer service.
            '50007': PermissionDenied,  # The account is forbidden to withdraw within 24 hours. If you have any questions, please contact customer service.
            '50008': RequestTimeout,  # network timeout
            '50009': RateLimitExceeded,  # The operation is too frequent, please try again later
            '50010': ExchangeError,  # The account is abnormally frozen. If you have any questions, please contact customer service.
            '50014': InvalidOrder,  # The transaction amount under minimum limits
            '50015': InvalidOrder,  # The transaction amount exceed maximum limits
            '50016': InvalidOrder,  # The price can't be higher than the current price
            '50017': InvalidOrder,  # Price under minimum limits
            '50018': InvalidOrder,  # The price exceed maximum limits
            '50019': InvalidOrder,  # The amount under minimum limits
            '50020': InsufficientFunds,  # Insufficient balance
            '50021': InvalidOrder,  # Price is under minimum limits
            '50026': InvalidOrder,  # Market price parameter error
            'invalid order query time': ExchangeError,  # start time is greater than end time; or the time interval between start time and end time is greater than 48 hours
            'invalid start time': BadRequest,  # start time is a date 30 days ago; or start time is a date in the future
            'invalid end time': BadRequest,  # end time is a date 30 days ago; or end time is a date in the future
            '20003': ExchangeError,  # operation failed, {"status":"error","ts":1595730308979,"err_code":"bad-request","err_msg":"20003"}
            '01001': ExchangeError,  # order failed, {"status":"fail","err_code":"01001","err_msg":"系统异常，请稍后重试"}
        },
        'broad': {
            'invalid size, valid range': ExchangeError,
        },
    },
    'precisionMode': TICK_SIZE,
    'commonCurrencies': {
        'JADE': 'Jade Protocol',
    },
    'options': {
        'fetchMarkets': [
            'spot',
            'swap',
        ],
        'defaultType': 'spot',  # 'spot', 'swap'
        'defaultSubType': 'linear',  # 'linear', 'inverse'
        'broker': {
            'spot': 'iauIBf#',
            'swap': 'iauIBf#',
        },
    },
},
{
    'id': 'coinbaseprime',
    'name': 'Coinbase Prime',
    'pro': True,
    'hostname': 'exchange.coinbase.com',
    'urls': {
        'test': {
            'public': 'https://public.sandbox.exchange.coinbase.com',
            'private': 'https://public.sandbox.exchange.coinbase.com',
        },
        'logo': 'https://user-images.githubusercontent.com/1294454/44539184-29f26e00-a70c-11e8-868f-e907fc236a7c.jpg',
        'api': {
            'public': 'https://api.{hostname}',
            'private': 'https://api.{hostname}',
        },
        'www': 'https://exchange.coinbase.com',
        'doc': 'https://docs.exchange.coinbase.com',
    },
},
{
    'id': 'binanceus',
    'name': 'Binance US',
    'countries': ['US'],  # US
    'certified': False,
    'pro': True,
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/65177307-217b7c80-da5f-11e9-876e-0b748ba0a358.jpg',
        'api': {
            'web': 'https://www.binance.us',
            'sapi': 'https://api.binance.us/sapi/v1',
            'wapi': 'https://api.binance.us/wapi/v3',
            'public': 'https://api.binance.us/api/v3',
            'private': 'https://api.binance.us/api/v3',
        },
        'www': 'https://www.binance.us',
        'referral': 'https://www.binance.us/?ref=35005074',
        'doc': 'https://github.com/binance-us/binance-official-api-docs',
        'fees': 'https://www.binance.us/en/fee/schedule',
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.001'),  # 0.1% trading fee, zero fees for all trading pairs before November 1
            'maker': self.parse_number('0.001'),  # 0.1% trading fee, zero fees for all trading pairs before November 1
        },
    },
    'options': {
        'fetchCurrencies': False,
        'quoteOrderQty': False,
    },
},
{
    'id': 'therock',
    'name': 'TheRockTrading',
    'countries': ['MT'],
    'rateLimit': 1000,
    'version': 'v1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': False,
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistories': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchLedger': True,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': True,
        'fetchTransactions': 'emulated',
        'fetchWithdrawals': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg',
        'api': 'https://api.therocktrading.com',
        'www': 'https://therocktrading.com',
        'doc': [
            'https://api.therocktrading.com/doc/v1/index.html',
            'https://api.therocktrading.com/doc/',
        ],
    },
    'api': {
        'public': {
            'get': [
                'funds',
                'funds/{id}',
                'funds/{id}/orderbook',
                'funds/{id}/ticker',
                'funds/{id}/trades',
                'funds/tickers',
            ],
        },
        'private': {
            'get': [
                'balances',
                'balances/{id}',
                'discounts',
                'discounts/{id}',
                'funds',
                'funds/{id}',
                'funds/{id}/trades',
                'funds/{fund_id}/orders',
                'funds/{fund_id}/orders/{id}',
                'funds/{fund_id}/position_balances',
                'funds/{fund_id}/positions',
                'funds/{fund_id}/positions/{id}',
                'transactions',
                'transactions/{id}',
                'withdraw_limits/{id}',
                'withdraw_limits',
            ],
            'post': [
                'atms/withdraw',
                'funds/{fund_id}/orders',
            ],
            'delete': [
                'funds/{fund_id}/orders/{id}',
                'funds/{fund_id}/orders/remove_all',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {},
            'deposit': {
                'BTC': 0,
                'BCH': 0,
                'PPC': 0,
                'ETH': 0,
                'ZEC': 0,
                'LTC': 0,
                'EUR': 0,
            },
        },
    },
    'exceptions': {
        'exact': {
            'Request already running': BadRequest,
            'cannot specify multiple address types': BadRequest,
            'Currency is not included in the list': BadRequest,
            'Record not found': OrderNotFound,
        },
        'broad': {
            'before must be greater than after param': BadRequest,
            'must be shorter than 60 days': BadRequest,
            'must be a multiple of(period param) in minutes': BadRequest,
            'Address allocation limit reached for currency': InvalidAddress,
            'is not a valid value for param currency': BadRequest,
            ' is invalid': InvalidAddress,
        },
    },
},
{
    'id': 'eqonex',
    'name': 'EQONEX',
    'countries': ['US', 'SG'],  # United States, Singapore
    'rateLimit': 10,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': None,  # has but not fully implemented
        'future': None,  # has but not fully implemented
        'option': False,
        'cancelOrder': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchCanceledOrders': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchTicker': None,
        'fetchTrades': True,
        'fetchTradingFees': True,
        'fetchTradingLimits': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': 1,
        '5m': 2,
        '15m': 3,
        '1h': 4,
        '6h': 5,
        '1d': 6,
        '7d': 7,
        '1w': 7,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/122649755-1a076c80-d138-11eb-8f2e-9a9166a03d79.jpg',
        'test': {
            'public': 'https://testnet.eqonex.com/api',
            'private': 'https://testnet.eqonex.com/api',
        },
        'api': {
            'public': 'https://eqonex.com/api',
            'private': 'https://eqonex.com/api',
        },
        'www': 'https://eqonex.com',
        'doc': [
            'https://developer.eqonex.com',
        ],
        'referral': 'https://eqonex.com?referredByCode=zpa8kij4ouvBFup3',
    },
    'api': {
        'public': {
            'get': [
                'health',
                'getInstruments',
                'getInstrumentPairs',
                'getOrderBook',
                'getRisk',
                'getTradeHistory',
                'getFundingRateHistory',
                'getChart',
                'getExchangeInfo',  # not documented
            ],
        },
        'private': {
            'post': [
                'logon',
                'order',
                'cancelOrder',
                'cancelReplaceOrder',
                'getOrder',
                'getOrders',
                'getOrderStatus',
                'getOrderHistory',
                'userTrades',
                'getPositions',
                'cancelAll',
                'getUserHistory',
                'getRisk',
                'getDepositAddresses',
                'getDepositHistory',  # not documented
                'getWithdrawRequests',
                'sendWithdrawRequest',
                'getTransferHistory',
            ],
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'uid': True,
    },
    'exceptions': {
        'broad': {
            'symbol not found': BadSymbol,
        },
    },
},
{
    'id': 'zb',
    'name': 'ZB',
    'countries': ['CN'],
    'rateLimit': 100,
    'version': 'v1',
    'certified': True,
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': True,
        'swap': True,
        'future': None,
        'option': None,
        'addMargin': True,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': True,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDepositAddresses': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': True,
        'fetchFundingRates': True,
        'fetchLedger': True,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarketLeverageTiers': False,
        'fetchMarkets': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': True,
        'fetchPositions': True,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchWithdrawals': True,
        'reduceMargin': True,
        'setLeverage': True,
        'setMarginMode': False,
        'setPositionMode': False,
        'transfer': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '2h': '2h',
        '4h': '4h',
        '6h': '6h',
        '12h': '12h',
        '1d': '1d',
        '3d': '3d',
        '5d': '5d',
        '1w': '1w',
    },
    'exceptions': {
        'ws': {
            # '1000': ExchangeError,  # The call is successful.
            '1001': ExchangeError,  # General error prompt
            '1002': ExchangeError,  # Internal Error
            '1003': AuthenticationError,  # Fail to verify
            '1004': AuthenticationError,  # The transaction password is locked
            '1005': AuthenticationError,  # Wrong transaction password, please check it and re-enter。
            '1006': PermissionDenied,  # Real-name authentication is pending approval or unapproved
            '1007': ExchangeError,  # Channel does not exist
            '1009': OnMaintenance,  # This interface is under maintenance
            '1010': ExchangeNotAvailable,  # Not available now
            '1012': PermissionDenied,  # Insufficient permissions
            '1013': ExchangeError,  # Cannot trade, please contact email: support@zb.cn for support.
            '1014': ExchangeError,  # Cannot sell during the pre-sale period
            '2001': InsufficientFunds,  # Insufficient CNY account balance
            '2002': InsufficientFunds,  # Insufficient BTC account balance
            '2003': InsufficientFunds,  # Insufficient LTC account balance
            '2005': InsufficientFunds,  # Insufficient ETH account balance
            '2006': InsufficientFunds,  # ETCInsufficient account balance
            '2007': InsufficientFunds,  # BTSInsufficient account balance
            '2008': InsufficientFunds,  # EOSInsufficient account balance
            '2009': InsufficientFunds,  # BCCInsufficient account balance
            '3001': OrderNotFound,  # Order not found or is completed
            '3002': InvalidOrder,  # Invalid amount
            '3003': InvalidOrder,  # Invalid quantity
            '3004': AuthenticationError,  # User does not exist
            '3005': BadRequest,  # Invalid parameter
            '3006': PermissionDenied,  # Invalid IP or not consistent with the bound IP
            '3007': RequestTimeout,  # The request time has expired
            '3008': ExchangeError,  # Transaction not found
            '3009': InvalidOrder,  # The price exceeds the limit
            '3010': PermissionDenied,  # It fails to place an order, due to you have set up to prohibit trading of self market.
            '3011': InvalidOrder,  # The entrusted price is abnormal, please modify it and place order again
            '3012': InvalidOrder,  # Duplicate custom customerOrderId
            '4001': AccountSuspended,  # APIThe interface is locked for one hour
            '4002': RateLimitExceeded,  # Request too frequently
        },
        'exact': {
            # '1000': 'Successful operation',
            '10001': ExchangeError,  # Operation failed
            '10002': PermissionDenied,  # Operation is forbidden
            '10003': BadResponse,  # Data existed
            '10004': BadResponse,  # Date not exist
            '10005': PermissionDenied,  # Forbidden to access the interface
            '10006': BadRequest,  # Currency invalid or expired
            '10007': ExchangeError,  # {0}
            '10008': ExchangeError,  # Operation failed: {0}
            '10009': ExchangeError,  # URL error
            '1001': ExchangeError,  # 'General error message',
            '10010': AuthenticationError,  # API KEY not exist
            '10011': AuthenticationError,  # API KEY CLOSED
            '10012': AccountSuspended,  # User API has been frozen, please contact customer service for processing
            '10013': AuthenticationError,  # API verification failed
            '10014': AuthenticationError,  # Invalid signature(1001)
            '10015': AuthenticationError,  # Invalid signature(1002)
            '10016': AuthenticationError,  # Invalid ip
            '10017': PermissionDenied,  # Permission denied
            '10018': AccountSuspended,  # User has been frozen, please contact customer service
            '10019': RequestTimeout,  # Request time has expired
            '1002': ExchangeError,  # 'Internal error',
            '10020': BadRequest,  # {0}Parameter cannot be empty
            '10021': BadRequest,  # {0}Invalid parameter
            '10022': BadRequest,  # Request method error
            '10023': RateLimitExceeded,  # Request frequency is too fast, exceeding the limit allowed by the interface
            '10024': AuthenticationError,  # Login failed
            '10025': ExchangeError,  # Non-personal operation
            '10026': NetworkError,  # Failed to request interface, please try again
            '10027': RequestTimeout,  # Timed out, please try again later
            '10028': ExchangeNotAvailable,  # System busy, please try again later
            '10029': DDoSProtection,  # Frequent operation, please try again later
            '1003': AuthenticationError,  # 'Verification does not pass',
            '10030': BadRequest,  # Currency already exist
            '10031': BadRequest,  # Currency does not exist
            '10032': BadRequest,  # Market existed
            '10033': BadRequest,  # Market not exist
            '10034': BadRequest,  # Currency error
            '10035': BadRequest,  # Market not open
            '10036': BadRequest,  # Ineffective market type
            '10037': ArgumentsRequired,  # User id cannot be empty
            '10038': BadRequest,  # Market id cannot be empty
            '10039': BadResponse,  # Failed to get mark price
            '1004': AuthenticationError,  # 'Funding security password lock',
            '10040': BadResponse,  # Failed to obtain the opening margin configuration
            '10041': BadResponse,  # Failed to obtain maintenance margin allocation
            '10042': ExchangeError,  # Avg. price error
            '10043': ExchangeError,  # Abnormal acquisition of liquidation price
            '10044': ExchangeError,  # Unrealized profit and loss acquisition exception
            '10045': ExchangeError,  # jdbcData source acquisition failed
            '10046': ExchangeError,  # Invalid position opening direction
            '10047': ExchangeError,  # The maximum position allowed by the current leverage multiple has been exceeded
            '10048': ExchangeError,  # The maximum allowable order quantity has been exceeded
            '10049': NetworkError,  # Failed to get the latest price
            '1005': AuthenticationError,  # 'Funds security password is incorrect, please confirm and re-enter.',
            '1006': AuthenticationError,  # 'Real-name certification pending approval or audit does not pass',
            '1009': ExchangeNotAvailable,  # 'This interface is under maintenance',
            '1010': ExchangeNotAvailable,  # Not available now
            '10100': OnMaintenance,  # Sorry! System maintenance, stop operation
            '1012': PermissionDenied,  # Insufficient permissions
            '1013': ExchangeError,  # Cannot trade, please contact email: support@zb.cn for support.
            '1014': ExchangeError,  # Cannot sell during the pre-sale period
            '11000': ExchangeError,  # Funding change failed
            '11001': ExchangeError,  # Position change failed
            '110011': ExchangeError,  # Exceeds the maximum leverage allowed by the position
            '11002': ExchangeError,  # Funding not exist
            '11003': ExchangeError,  # Freeze records not exist
            '11004': InsufficientFunds,  # Insufficient frozen funds
            '11005': InvalidOrder,  # Insufficient positions
            '11006': InsufficientFunds,  # Insufficient frozen positions
            '11007': OrderNotFound,  # Position not exist
            '11008': ExchangeError,  # The contract have positions, cannot be modified
            '11009': ExchangeError,  # Failed to query data
            '110110': ExchangeError,  # Exceed the market's maximum leverage
            '11012': InsufficientFunds,  # Insufficient margin
            '11013': ExchangeError,  # Exceeding accuracy limit
            '11014': ExchangeError,  # Invalid bill type
            '11015': AuthenticationError,  # Failed to add default account
            '11016': AuthenticationError,  # Account not exist
            '11017': ExchangeError,  # Funds are not frozen or unfrozen
            '11018': InsufficientFunds,  # Insufficient funds
            '11019': ExchangeError,  # Bill does not exist
            '11021': InsufficientFunds,  # Inconsistent currency for funds transfer
            '11023': ExchangeError,  # Same transaction currency
            '11030': PermissionDenied,  # Position is locked, the operation is prohibited
            '11031': ExchangeError,  # The number of bill changes is zero
            '11032': ExchangeError,  # The same request is being processed, please do not submit it repeatedly
            '11033': ArgumentsRequired,  # Position configuration data is empty
            '11034': ExchangeError,  # Funding fee is being settled, please do not operate
            '12000': InvalidOrder,  # Invalid order price
            '12001': InvalidOrder,  # Invalid order amount
            '12002': InvalidOrder,  # Invalid order type
            '12003': InvalidOrder,  # Invalid price accuracy
            '12004': InvalidOrder,  # Invalid quantity precision
            '12005': InvalidOrder,  # order value less than the minimum or greater than the maximum
            '12006': InvalidOrder,  # Customize's order number format is wrong
            '12007': InvalidOrder,  # Direction error
            '12008': InvalidOrder,  # Order type error
            '12009': InvalidOrder,  # Commission type error
            '12010': InvalidOrder,  # Failed to place the order, the loss of the order placed at self price will exceed margin
            '12011': InvalidOrder,  # it's not a buz order
            '12012': OrderNotFound,  # order not exist
            '12013': InvalidOrder,  # Order user does not match
            '12014': InvalidOrder,  # Order is still in transaction
            '12015': InvalidOrder,  # Order preprocessing failed
            '12016': InvalidOrder,  # Order cannot be canceled
            '12017': InvalidOrder,  # Transaction Record not exist
            '12018': InvalidOrder,  # Order failed
            '12019': ArgumentsRequired,  # self.extend parameter cannot be empty
            '12020': ExchangeError,  # self.extend Parameter error
            '12021': InvalidOrder,  # The order price is not within the price limit rules!
            '12022': InvalidOrder,  # Stop placing an order while the system is calculating the fund fee
            '12023': OrderNotFound,  # There are no positions to close
            '12024': InvalidOrder,  # Orders are prohibited, stay tuned!
            '12025': InvalidOrder,  # Order cancellation is prohibited, so stay tuned!
            '12026': DuplicateOrderId,  # Order failed， customize order number exists
            '12027': ExchangeNotAvailable,  # System busy, please try again later
            '12028': InvalidOrder,  # The market has banned trading
            '12029': InvalidOrder,  # Forbidden place order, stay tuned
            '12201': InvalidOrder,  # Delegation strategy does not exist or the status has changed
            '12202': InvalidOrder,  # Delegation strategy has been changed, cannot be canceled
            '12203': InvalidOrder,  # Wrong order type
            '12204': InvalidOrder,  # Invalid trigger price
            '12205': InvalidOrder,  # The trigger price must be greater than the market’s selling price or lower than the buying price.
            '12206': InvalidOrder,  # Direction and order type do not match
            '12207': RateLimitExceeded,  # Submission failed, exceeding the allowed limit
            '13001': AuthenticationError,  # User not exist
            '13002': PermissionDenied,  # User did not activate futures
            # '13003': AuthenticationError,  # User is locked
            '13003': InvalidOrder,  # Margin gear is not continuous
            '13004': InvalidOrder,  # The margin quick calculation amount is less than 0
            '13005': RateLimitExceeded,  # You have exceeded the number of exports that day
            '13006': ExchangeError,  # No markets are bookmarked
            '13007': ExchangeError,  # Market not favorited
            '13008': ExchangeError,  # Not in any market user whitelist
            '13009': ExchangeError,  # Not in the whitelist of users in self market
            '14000': ExchangeError,  # {0}not support
            '14001': AuthenticationError,  # Already logged in, no need to log in multiple times
            '14002': AuthenticationError,  # Not logged in yet, please log in before subscribing
            '14003': ExchangeError,  # This is a channel for one-time queries, no need to unsubscribe
            '14100': ExchangeError,  # Accuracy does not support
            '14101': RateLimitExceeded,  # Request exceeded frequency limit
            '14200': ArgumentsRequired,  # id empty
            '14300': ExchangeError,  # activity not exist
            '14301': ExchangeError,  # The event has been opened and cannot be admitted
            '14302': ExchangeError,  # The purchase time has passed and cannot be admitted
            '14303': ExchangeError,  # Not yet open for the purchase
            '14305': ExchangeError,  # Cannot enter, the maximum number of returns has been exceeded
            '14306': ExchangeError,  # Cannot repeat admission
            '14307': InvalidOrder,  # Unable to cancel, status has been changed
            '14308': InvalidOrder,  # Unable to cancel, the amount does not match
            '14309': ExchangeError,  # Activity has not started
            '14310': NotSupported,  # Activity is over
            '14311': NotSupported,  # The activity does not support orders placed in self market
            '14312': ExchangeError,  # You have not participated in self activity
            '14313': PermissionDenied,  # Sorry! The purchase failed, the maximum number of participants has been reached
            '14314': ExchangeError,  # Active period id error
            '2001': InsufficientFunds,  # 'Insufficient CNY Balance',
            '2002': InsufficientFunds,  # 'Insufficient BTC Balance',
            '2003': InsufficientFunds,  # 'Insufficient LTC Balance',
            '2005': InsufficientFunds,  # 'Insufficient ETH Balance',
            '2006': InsufficientFunds,  # 'Insufficient ETC Balance',
            '2007': InsufficientFunds,  # 'Insufficient BTS Balance',
            '2008': InsufficientFunds,  # EOSInsufficient account balance
            '2009': InsufficientFunds,  # 'Account balance is not enough',
            '3001': OrderNotFound,  # 'Pending orders not found',
            '3002': InvalidOrder,  # 'Invalid price',
            '3003': InvalidOrder,  # 'Invalid amount',
            '3004': AuthenticationError,  # 'User does not exist',
            '3005': BadRequest,  # 'Invalid parameter',
            '3006': AuthenticationError,  # 'Invalid IP or inconsistent with the bound IP',
            '3007': AuthenticationError,  # 'The request time has expired',
            '3008': OrderNotFound,  # 'Transaction records not found',
            '3009': InvalidOrder,  # 'The price exceeds the limit',
            '3010': PermissionDenied,  # It fails to place an order, due to you have set up to prohibit trading of self market.
            '3011': InvalidOrder,  # 'The entrusted price is abnormal, please modify it and place order again',
            '3012': InvalidOrder,  # Duplicate custom customerOrderId
            '4001': ExchangeNotAvailable,  # 'API interface is locked or not enabled',
            '4002': RateLimitExceeded,  # 'Request too often',
            '9999': ExchangeError,  # Unknown error
        },
        'broad': {
            '提币地址有误, 请先添加提币地址。': InvalidAddress,  # {"code":1001,"message":"提币地址有误，请先添加提币地址。"}
            '资金不足,无法划账': InsufficientFunds,  # {"code":1001,"message":"资金不足,无法划账"}
            '响应超时': RequestTimeout,  # {"code":1001,"message":"响应超时"}
        },
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg',
        'api': {
            'spot': {
                'v1': {
                    'public': 'https://api.zb.work/data',
                    'private': 'https://trade.zb.work/api',
                },
            },
            'contract': {
                'v1': {
                    'public': 'https://fapi.zb.com/api/public',
                },
                'v2': {
                    'public': 'https://fapi.zb.com/Server/api',
                    'private': 'https://fapi.zb.com/Server/api',
                },
            },
        },
        'www': 'https://www.zb.com',
        'doc': 'https://www.zb.com/i/developer',
        'fees': 'https://www.zb.com/i/rate',
        'referral': {
            'url': 'https://www.zbex.club/en/register?ref=4301lera',
            'discount': 0.16,
        },
    },
    'api': {
        'spot': {
            'v1': {
                'public': {
                    'get': [
                        'markets',
                        'ticker',
                        'allTicker',
                        'depth',
                        'trades',
                        'kline',
                        'getGroupMarkets',
                        'getFeeInfo',
                    ],
                },
                'private': {
                    'get': [
                        # spot API
                        'order',
                        'orderMoreV2',
                        'cancelOrder',
                        'getOrder',
                        'getOrders',
                        'getOrdersNew',
                        'getOrdersIgnoreTradeType',
                        'getUnfinishedOrdersIgnoreTradeType',
                        'getFinishedAndPartialOrders',
                        'getAccountInfo',
                        'getUserAddress',
                        'getPayinAddress',
                        'getWithdrawAddress',
                        'getWithdrawRecord',
                        'getChargeRecord',
                        'getCnyWithdrawRecord',
                        'getCnyChargeRecord',
                        'withdraw',
                        # sub accounts
                        'addSubUser',
                        'getSubUserList',
                        'doTransferFunds',
                        'createSubUserKey',  # removed on 2021-03-16 according to the update log in the API doc
                        # leverage API
                        'getLeverAssetsInfo',
                        'getLeverBills',
                        'transferInLever',
                        'transferOutLever',
                        'loan',
                        'cancelLoan',
                        'getLoans',
                        'getLoanRecords',
                        'borrow',
                        'autoBorrow',
                        'repay',
                        'doAllRepay',
                        'getRepayments',
                        'getFinanceRecords',
                        'changeInvestMark',
                        'changeLoop',
                        # cross API
                        'getCrossAssets',
                        'getCrossBills',
                        'transferInCross',
                        'transferOutCross',
                        'doCrossLoan',
                        'doCrossRepay',
                        'getCrossRepayRecords',
                    ],
                },
            },
        },
        'contract': {
            'v1': {
                'public': {
                    'get': [
                        'depth',
                        'fundingRate',
                        'indexKline',
                        'indexPrice',
                        'kline',
                        'markKline',
                        'markPrice',
                        'ticker',
                        'trade',
                    ],
                },
            },
            'v2': {
                'public': {
                    'get': [
                        'allForceOrders',
                        'config/marketList',
                        'topLongShortAccountRatio',
                        'topLongShortPositionRatio',
                        'fundingRate',
                        'premiumIndex',
                    ],
                },
                'private': {
                    'get': [
                        'Fund/balance',
                        'Fund/getAccount',
                        'Fund/getBill',
                        'Fund/getBillTypeList',
                        'Fund/marginHistory',
                        'Positions/getPositions',
                        'Positions/getNominalValue',
                        'Positions/marginInfo',
                        'setting/get',
                        'trade/getAllOrders',
                        'trade/getOrder',
                        'trade/getOrderAlgos',
                        'trade/getTradeList',
                        'trade/getUndoneOrders',
                        'trade/tradeHistory',
                    ],
                    'post': [
                        'activity/buyTicket',
                        'Fund/transferFund',
                        'Positions/setMarginCoins',
                        'Positions/updateAppendUSDValue',
                        'Positions/updateMargin',
                        'setting/setLeverage',
                        'trade/batchOrder',
                        'trade/batchCancelOrder',
                        'trade/cancelAlgos',
                        'trade/cancelAllOrders',
                        'trade/cancelOrder',
                        'trade/order',
                        'trade/orderAlgo',
                        'trade/updateOrderAlgo',
                    ],
                },
            },
        },
    },
    'fees': {
        'funding': {
            'withdraw': {},
        },
        'trading': {
            'maker': 0.2 / 100,
            'taker': 0.2 / 100,
        },
    },
    'commonCurrencies': {
        'ANG': 'Anagram',
        'ENT': 'ENTCash',
        'BCHABC': 'BCHABC',  # conflict with BCH / BCHA
        'BCHSV': 'BCHSV',  # conflict with BCH / BSV
    },
    'options': {
        'timeframes': {
            'spot': {
                '1m': '1min',
                '3m': '3min',
                '5m': '5min',
                '15m': '15min',
                '30m': '30min',
                '1h': '1hour',
                '2h': '2hour',
                '4h': '4hour',
                '6h': '6hour',
                '12h': '12hour',
                '1d': '1day',
                '3d': '3day',
                '1w': '1week',
            },
            'swap': {
                '1m': '1M',
                '5m': '5M',
                '15m': '15M',
                '30m': '30M',
                '1h': '1H',
                '6h': '6H',
                '1d': '1D',
                '5d': '5D',
            },
        },
    },
},
{
    'id': 'stex',
    'name': 'STEX',  # formerly known as stocks.exchange
    'countries': ['EE'],  # Estonia
    'rateLimit': 1000 / 3,  # https://help.stex.com/en/articles/2815043-api-3-rate-limits
    'certified': False,
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createMarketOrder': None,  # limit orders only
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrder': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFees': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderTrades': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': False,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'version': 'v3',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/69680782-03fd0b80-10bd-11ea-909e-7f603500e9cc.jpg',
        'api': 'https://api3.stex.com',
        'www': 'https://www.stex.com',
        'doc': [
            'https://help.stex.com/en/collections/1593608-api-v3-documentation',
        ],
        'fees': 'https://app.stex.com/en/pairs-specification',
        'referral': 'https://app.stex.com?ref=36416021',
    },
    'requiredCredentials': {
        'apiKey': False,
        'secret': False,
        'token': True,
    },
    'timeframes': {
        '1m': '1',
        '5m': '5',
        '30m': '30',
        '1h': '60',
        '4h': '240',
        '12h': '720',
        '1d': '1D',  # default
    },
    'api': {
        'public': {
            'get': {
                'currencies': 1,  # Available Currencies
                'currencies/{currencyId}': 1,  # Get currency info
                'markets': 1,  # Available markets
                'pairs-groups': 1,  # Available currency pairs groups(as displayed at stex trading page)
                'currency_pairs/list/{code}': 1,  # Available currency pairs
                'currency_pairs/group/{currencyPairGroupId}': 1,  # Available currency pairs for a given group
                'currency_pairs/{currencyPairId}': 1,  # Get currency pair information
                'ticker': 1,  # Tickers list for all currency pairs
                'ticker/{currencyPairId}': 1,  # Ticker for currency pair
                'trades/{currencyPairId}': 1,  # Trades for given currency pair
                'orderbook/{currencyPairId}': 1,  # Orderbook for given currency pair
                'chart/{currencyPairId}/{candlesType}': 1,  # A list of candles for given currency pair
                'deposit-statuses': 1,  # Available Deposit Statuses
                'deposit-statuses/{statusId}': 1,  # Get deposit status info
                'withdrawal-statuses': 1,  # Available Withdrawal Statuses
                'withdrawal-statuses/{statusId}': 1,  # Get status info
                'ping': 1,  # Test API is working and get server time
                'mobile-versions': 1,  # Shows the official mobile applications data
                'twitter': 1,  # Get the last 20 posts(stex.com) on Twitter
            },
        },
        'trading': {
            'get': {
                'fees/{currencyPairId}': 1,  # Returns the user's fees for a given currency pair
                'orders': 12,  # List your currently open orders
                'orders/{currencyPairId}': 6,  # List your currently open orders for given currency pair
                'order/{orderId}': 12,  # Get a single order
            },
            'post': {
                'orders/{currencyPairId}': 1.5,  # Create new order and put it to the orders processing queue
                'orders/bulk/{currencyPairId}': 12,  # Create new orders in a bulk and put it to the orders processing queue
            },
            'delete': {
                'orders': 30,  # Delete all active orders
                'orders/{currencyPairId}': 12,  # Delete active orders for given currency pair
                'order/{orderId}': 1.5,  # Cancel order
            },
        },
        'reports': {
            'get': {
                'currencies': 12,  # Get a list of currencies user had any activity in
                'currency_pairs': 12,  # Gets the list of currency pairs the user had orders in for all the time
                'orders': 12,  # Get past orders
                'orders/{orderId}': 12,  # Get specified order details
                'trades/{currencyPairId}': 12,  # Get a list of user trades according to request parameters
                'background/{listMode}': 12,  # Get reports list for category
                'background/{id}': 12,  # Get some report info
                'background/download/{id}': 12,  # Get file by id
            },
            'post': {
                'background/create': 12,  # Create new report
            },
            'delete': {
                'background/{id}': 12,  # Remove report by id
            },
        },
        'profile': {
            'get': {
                'info': 3,  # Account information
                'wallets': 3,  # Get a list of user wallets
                'wallets/{walletId}': 3,  # Single wallet information
                'wallets/address/{walletId}': 3,  # Get deposit address for given wallet
                'deposits': 3,  # Get a list of deposits made by user
                'deposits/{id}': 3,  # Get deposit by id
                'rewards': 3,  # Get a list of rewards obtained by user(e.g. in trading competitions)
                'rewards/{id}': 3,  # Get reward by id
                'addressbook': 3,  # Get a list of user address book items
                'addressbook/{itemId}': 3,  # Single address book item
                'withdrawals': 3,  # Get a list of withdrawals made by user
                'withdrawals/{id}': 3,  # Get withdrawal by id
                'notifications': 3,  # Get notifications
                'notifications/price': 3,  # Get a list of active price alerts
                'favorite/currency_pairs': 3,  # Get favorite currency pairs
                'token-scopes': 3,  # Get current token scopes
            },
            'post': {
                'wallets/burn/{walletId}': 3,  # Burns the given wallet
                'wallets/{walletId}/hold_amount': 3,  # Move a part of the funds on the wallet to the "hold" to keep it safe from trading
                'wallets/{currencyId}': 3,  # Create a wallet for given currency
                'wallets/address/{walletId}': 3,  # Create new deposit address
                'addressbook/disable_item/{itemId}': 3,  # Disables the address book item
                'addressbook/enable_item/{itemId}': 3,  # Enable the address book item
                'addressbook/enable_strict_wd': 3,  # Restrict the withdrawals to only addresses that are active in addressbook
                'addressbook/disable_strict_wd': 3,  # Remove restriction to withdraw to only addresses that are active in addressbook. E.g. allow to withdraw to any address.
                'withdraw': 30,  # Create withdrawal request
                'notifications/price': 3,  # Create new price alert
                'referral/program': 3,  # Create referral program
                'referral/insert/{code}': 3,  # Insert referral code
                'referral/bonus_transfer/{currencyId}': 3,  # Transfer referral bonuses balance to main balance for given currency
            },
            'put': {
                'favorite/currency_pairs/set': 3,  # Set favorite currency pairs
            },
            'delete': {
                'addressbook/{itemId}': 3,  # Deletes address book item
                'withdraw/{withdrawalId}': 30,  # Cancel unconfirmed withdrawal
                'notifications/price/{priceAlertId}': 3,  # Delete the price alert by ID
            },
        },
        'verification': {
            'get': {
                'countries': 1,  # Countries list, beta
                'status': 1,  # Get status verify
                'fractal/url': 1,  # Generate verify url from Fractal
                'smart-id': 1,  # Check Smart-ID verify
                'stex': 1,  # Get information about your KYC, beta
                'cryptonomica/code': 1,  # Get Discount code for Cryptonomica
            },
            'post': {
                'smart-id': 1,  # Initialization Smart-ID verify(Send request to Smart-ID App)
                'stex': 1,  # Update information regarding of your KYC verification, beta
                'cryptonomica': 1,  # Add verification from Cryptonomica
            },
        },
        'settings': {
            'get': {
                'notifications/{event}': 1,  # User event notification settings
                'notifications': 1,  # User events notification settings
            },
            'put': {
                'notifications': 1,  # Set notification settings
                'notifications/set': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.002'),
            'maker': self.parse_number('0.002'),
        },
    },
    'commonCurrencies': {
        'BC': 'Bitcoin Confidential',
        'BITS': 'Bitcoinus',
        'BITSW': 'BITS',
        'BHD': 'Bithold',
        'BTH': 'Bithereum',
        'MPH': 'Chasyr Token',
        'SBTC': 'SBTCT',  # SiamBitcoin
    },
    'options': {
        'parseOrderToPrecision': False,
        'networks': {
            'ERC20': 5,
            'ETH': 5,
            'OMNI': 10,
            'XLM': 20,
            'BEP2': 22,
            'TRC20': 24,
            'TRX': 24,
            'SOL': 25,
            'BEP20': 501,
        },
    },
    'exceptions': {
        'exact': {
            # {"success":false,"message":"Wrong parameters","errors":{"candleType":["Invalid Candle Type!"]}}
            # {"success":false,"message":"Wrong parameters","errors":{"time":["timeStart or timeEnd is less then 1"]}}
            'Wrong parameters': BadRequest,
            'Unauthenticated.': AuthenticationError,  # {"message":"Unauthenticated."}
            'Server Error': ExchangeError,  # {"message": "Server Error"}
            'This feature is only enabled for users verifies by Cryptonomica': PermissionDenied,  # {"success":false,"message":"This feature is only enabled for users verifies by Cryptonomica"}
            'Too Many Attempts.': DDoSProtection,  # {"message": "Too Many Attempts."}
            'Selected Pair is disabled': BadSymbol,  # {"success":false,"message":"Selected Pair is disabled"}
            'Invalid scope(s) provided.': PermissionDenied,  # {"message": "Invalid scope(s) provided."}
            'The maximum amount of open orders with the same price cannot exceed 10': InvalidOrder,  # {"success":false,"message":"The maximum amount of open orders with the same price cannot exceed 10"}
            'Your account not verified!': AccountSuspended,  # {"success":false,"message":"Your account not verified!","unified_message":{"message_id":"verification_required_to_continue","substitutions":null},"notice":"Please be informed that parameter `message` is deprecated and will be removed. Use unified_message instead."}
        },
        'broad': {
            'Not enough': InsufficientFunds,  # {"success":false,"message":"Not enough  ETH"}
        },
    },
},
{
    'id': 'xena',
    'name': 'Xena Exchange',
    'countries': ['VC', 'UK'],
    'rateLimit': 100,
    'has': {
        'CORS': None,
        'spot': False,
        'margin': False,
        'swap': None,  # has but not fully implemented
        'future': None,  # has but not fully implemented
        'option': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'editOrder': True,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchLedger': True,
        'fetchLeverageTiers': True,
        'fetchMarketLeverageTiers': 'emulated',
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrderBook': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87489843-bb469280-c64c-11ea-91aa-69c6326506af.jpg',
        'test': {
            'public': 'https://trading.demo.xena.io/api',
            'private': 'https://api.demo.xena.io',
        },
        'api': {
            'public': 'https://trading.xena.exchange/api',
            'private': 'https://api.xena.exchange',
        },
        'www': 'https://xena.exchange',
        'doc': 'https://support.xena.exchange/support/solutions/44000808700',
        'fees': 'https://trading.xena.exchange/en/contracts/terms-and-condition',
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '12h': '12h',
        '1d': '1d',
        '1w': '1w',
    },
    'api': {
        'public': {
            'get': [
                'common/currencies',
                'common/instruments',
                'common/features',
                'common/commissions',
                'common/news',
                'market-data/candles/{marketId}/{timeframe}',
                'market-data/market-watch',
                'market-data/dom/{symbol}',
                'market-data/candles/{symbol}/{timeframe}',
                'market-data/trades/{symbol}',
                'market-data/server-time',
                'market-data/v2/candles/{symbol}/{timeframe}',
                'market-data/v2/trades/{symbol}',
                'market-data/v2/dom/{symbol}/',
                'market-data/v2/server-time',
            ],
        },
        'private': {
            'get': [
                'trading/accounts/{accountId}/order',
                'trading/accounts/{accountId}/active-orders',
                'trading/accounts/{accountId}/last-order-statuses',
                'trading/accounts/{accountId}/positions',
                'trading/accounts/{accountId}/positions-history',
                'trading/accounts/{accountId}/margin-requirements',
                'trading/accounts',
                'trading/accounts/{accountId}/balance',
                'trading/accounts/{accountId}/trade-history',
                # 'trading/accounts/{accountId}/trade-history?symbol=BTC/USDT&client_order_id=EMBB8Veke&trade_id=220143254',
                'transfers/accounts',
                'transfers/accounts/{accountId}',
                'transfers/accounts/{accountId}/deposit-address/{currency}',
                'transfers/accounts/{accountId}/deposits',
                'transfers/accounts/{accountId}/trusted-addresses',
                'transfers/accounts/{accountId}/withdrawals',
                'transfers/accounts/{accountId}/balance-history',
                # 'transfers/accounts/{accountId}/balance-history?currency={currency}&from={time}&to={time}&kind={kind}&kind={kind}',
                # 'transfers/accounts/{accountId}/balance-history?page={page}&limit={limit}',
                # 'transfers/accounts/{accountId}/balance-history?txid=3e1db982c4eed2d6355e276c5bae01a52a27c9cef61574b0e8c67ee05fc26ccf',
            ],
            'post': [
                'trading/order/new',
                'trading/order/heartbeat',
                'trading/order/cancel',
                'trading/order/mass-cancel',
                'trading/order/replace',
                'trading/position/maintenance',
                'transfers/accounts/{accountId}/withdrawals',
                'transfers/accounts/{accountId}/deposit-address/{currency}',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': 0.0005,
            'taker': 0.001,
            'tierBased': True,
            'percentage': True,
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {},
            'deposit': {},
        },
    },
    'exceptions': {
        'exact': {
            'Validation failed': BadRequest,
            'Unknown derivative symbol': BadSymbol,  # {"error":"Unknown derivative symbol"}
            'Unknown account': BadRequest,  # {"error":"Unknown account"}
            'Wrong TransactTime': BadRequest,  # {"error":"Wrong TransactTime"}
            'ClOrdId is empty': BadRequest,  # {"error":"ClOrdId is empty"}
        },
        'broad': {
            'Invalid aggregation ratio or depth': BadRequest,
            'address': InvalidAddress,
            'Money not enough': InsufficientFunds,
            'parse error': BadRequest,
            'Not enough': InsufficientFunds,  # {"error":"Not enough free margin"}
        },
    },
    'options': {
        'defaultType': 'margin',  # 'margin',
        'accountId': None,  # '1012838157',
    },
},
{
    'id': 'whitebit',
    'name': 'WhiteBit',
    'version': 'v2',
    'countries': ['EE'],
    'rateLimit': 500,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': False,
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createDepositAddress': None,
        'createLimitOrder': None,
        'createMarketOrder': None,
        'createOrder': True,
        'deposit': None,
        'editOrder': None,
        'fetchBalance': True,
        'fetchBidsAsks': None,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchFundingFees': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrderBook': True,
        'fetchOrderTrades': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '2h': '2h',
        '4h': '4h',
        '6h': '6h',
        '8h': '8h',
        '12h': '12h',
        '1d': '1d',
        '3d': '3d',
        '1w': '1w',
        '1M': '1M',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/66732963-8eb7dd00-ee66-11e9-849b-10d9282bb9e0.jpg',
        'api': {
            'v1': {
                'public': 'https://whitebit.com/api/v1/public',
                'private': 'https://whitebit.com/api/v1',
            },
            'v2': {
                'public': 'https://whitebit.com/api/v2/public',
            },
            'v4': {
                'public': 'https://whitebit.com/api/v4/public',
                'private': 'https://whitebit.com/api/v4',
            },
        },
        'www': 'https://www.whitebit.com',
        'doc': 'https://github.com/whitebit-exchange/api-docs',
        'fees': 'https://whitebit.com/fee-schedule',
        'referral': 'https://whitebit.com/referral/d9bdf40e-28f2-4b52-b2f9-cd1415d82963',
    },
    'api': {
        'web': {
            'get': [
                'v1/healthcheck',
            ],
        },
        'v1': {
            'public': {
                'get': [
                    'markets',
                    'tickers',
                    'ticker',
                    'symbols',
                    'depth/result',
                    'history',
                    'kline',
                ],
            },
            'private': {
                'post': [
                    'account/balance',
                    'order/new',
                    'order/cancel',
                    'orders',
                    'account/order_history',
                    'account/executed_history',
                    'account/executed_history/all',
                    'account/order',
                ],
            },
        },
        'v2': {
            'public': {
                'get': [
                    'markets',
                    'ticker',
                    'assets',
                    'fee',
                    'depth/{market}',
                    'trades/{market}',
                ],
            },
        },
        'v4': {
            'public': {
                'get': [
                    'assets',
                    'fee',
                    'orderbook/{market}',
                    'ticker',
                    'trades/{market}',
                    'time',
                    'ping',
                ],
            },
            'private': {
                'post': [
                    'main-account/address',
                    'main-account/balance',
                    'main-account/create-new-address',
                    'main-account/codes',
                    'main-account/codes/apply',
                    'main-account/codes/my',
                    'main-account/codes/history',
                    'main-account/fiat-deposit-url',
                    'main-account/history',
                    'main-account/withdraw',
                    'main-account/withdraw-pay',
                    'trade-account/balance',
                    'trade-account/executed-history',
                    'trade-account/order',
                    'trade-account/order/history',
                    'order/new',
                    'order/market',
                    'order/stock_market',
                    'order/stop_limit',
                    'order/stop_market',
                    'order/cancel',
                    'orders',
                ],
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.001'),
            'maker': self.parse_number('0.001'),
        },
    },
    'options': {
        'createMarketBuyOrderRequiresPrice': True,
        'fiatCurrencies': ['EUR', 'USD', 'RUB', 'UAH'],
    },
    'exceptions': {
        'exact': {
            'Unauthorized request.': AuthenticationError,  # {"code":10,"message":"Unauthorized request."}
            'The market format is invalid.': BadSymbol,  # {"code":0,"message":"Validation failed","errors":{"market":["The market format is invalid."]}}
            'Market is not available': BadSymbol,  # {"success":false,"message":{"market":["Market is not available"]},"result":[]}
            'Invalid payload.': BadRequest,  # {"code":9,"message":"Invalid payload."}
            'Amount must be greater than 0': InvalidOrder,  # {"code":0,"message":"Validation failed","errors":{"amount":["Amount must be greater than 0"]}}
            'The order id field is required.': InvalidOrder,  # {"code":0,"message":"Validation failed","errors":{"orderId":["The order id field is required."]}}
            'Not enough balance': InsufficientFunds,  # {"code":0,"message":"Validation failed","errors":{"amount":["Not enough balance"]}}
            'This action is unauthorized.': PermissionDenied,  # {"code":0,"message":"This action is unauthorized."}
            'This API Key is not authorized to perform self action.': PermissionDenied,  # {"code":4,"message":"This API Key is not authorized to perform self action."}
            'Unexecuted order was not found.': OrderNotFound,  # {"code":2,"message":"Inner validation failed","errors":{"order_id":["Unexecuted order was not found."]}}
            '503': ExchangeNotAvailable,  # {"response":null,"status":503,"errors":{"message":[""]},"notification":null,"warning":null,"_token":null},
            '422': OrderNotFound,  # {"response":null,"status":422,"errors":{"orderId":["Finished order id 1295772653 not found on your account"]},"notification":null,"warning":"Finished order id 1295772653 not found on your account","_token":null}
        },
        'broad': {
            'Given amount is less than min amount': InvalidOrder,  # {"code":0,"message":"Validation failed","errors":{"amount":["Given amount is less than min amount 200000"],"total":["Total is less than 5.05"]}}
            'Total is less than': InvalidOrder,  # {"code":0,"message":"Validation failed","errors":{"amount":["Given amount is less than min amount 200000"],"total":["Total is less than 5.05"]}}
            'fee must be no less than': InvalidOrder,  # {"code":0,"message":"Validation failed","errors":{"amount":["Total amount + fee must be no less than 5.05505"]}}
            'Enable your key in API settings': PermissionDenied,  # {"code":2,"message":"This action is unauthorized. Enable your key in API settings"}
        },
    },
},
{
    'id': 'exmo',
    'name': 'EXMO',
    'countries': ['LT'],  # Lithuania
    'rateLimit': 350,  # once every 350 ms ≈ 180 requests per minute ≈ 3 requests per second
    'version': 'v1.1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': False,
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchFundingFees': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': 'emulated',
        'fetchOrderBook': True,
        'fetchOrderBooks': True,
        'fetchOrderTrades': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '45m': '45',
        '1h': '60',
        '2h': '120',
        '3h': '180',
        '4h': '240',
        '1d': 'D',
        '1w': 'W',
        '1M': 'M',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg',
        'api': {
            'public': 'https://api.exmo.com',
            'private': 'https://api.exmo.com',
            'web': 'https://exmo.me',
        },
        'www': 'https://exmo.me',
        'referral': 'https://exmo.me/?ref=131685',
        'doc': [
            'https://exmo.me/en/api_doc?ref=131685',
            'https://github.com/exmo-dev/exmo_api_lib/tree/master/nodejs',
        ],
        'fees': 'https://exmo.com/en/docs/fees',
    },
    'api': {
        'web': {
            'get': [
                'ctrl/feesAndLimits',
                'en/docs/fees',
            ],
        },
        'public': {
            'get': [
                'currency',
                'currency/list/extended',
                'order_book',
                'pair_settings',
                'ticker',
                'trades',
                'candles_history',
                'required_amount',
                'payments/providers/crypto/list',
            ],
        },
        'private': {
            'post': [
                'user_info',
                'order_create',
                'order_cancel',
                'stop_market_order_create',
                'stop_market_order_cancel',
                'user_open_orders',
                'user_trades',
                'user_cancelled_orders',
                'order_trades',
                'deposit_address',
                'withdraw_crypt',
                'withdraw_get_txid',
                'excode_create',
                'excode_load',
                'code_check',
                'wallet_history',
                'wallet_operations',
                'margin/user/order/create',
                'margin/user/order/update',
                'margin/user/order/cancel',
                'margin/user/position/close',
                'margin/user/position/margin_add',
                'margin/user/position/margin_remove',
                'margin/currency/list',
                'margin/pair/list',
                'margin/settings',
                'margin/funding/list',
                'margin/user/info',
                'margin/user/order/list',
                'margin/user/order/history',
                'margin/user/order/trades',
                'margin/user/order/max_quantity',
                'margin/user/position/list',
                'margin/user/position/margin_remove_info',
                'margin/user/position/margin_add_info',
                'margin/user/wallet/list',
                'margin/user/wallet/history',
                'margin/user/trade/list',
                'margin/trades',
                'margin/liquidation/feed',
            ],
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
        'funding': {
            'tierBased': False,
            'percentage': False,  # fixed funding fees for crypto, see fetchFundingFees below
        },
    },
    'options': {
        'networks': {
            'ETH': 'ERC20',
            'TRX': 'TRC20',
        },
    },
    'exceptions': {
        'exact': {
            '40005': AuthenticationError,  # Authorization error, incorrect signature
            '40009': InvalidNonce,  #
            '40015': ExchangeError,  # API function do not exist
            '40016': OnMaintenance,  # {"result":false,"error":"Error 40016: Maintenance work in progress"}
            '40017': AuthenticationError,  # Wrong API Key
            '40032': PermissionDenied,  # {"result":false,"error":"Error 40032: Access is denied for self API key"}
            '40033': PermissionDenied,  # {"result":false,"error":"Error 40033: Access is denied, self resources are temporarily blocked to user"}
            '40034': RateLimitExceeded,  # {"result":false,"error":"Error 40034: Access is denied, rate limit is exceeded"}
            '50052': InsufficientFunds,
            '50054': InsufficientFunds,
            '50304': OrderNotFound,  # "Order was not found '123456789'"(fetching order trades for an order that does not have trades yet)
            '50173': OrderNotFound,  # "Order with id X was not found."(cancelling non-existent, closed and cancelled order)
            '50277': InvalidOrder,
            '50319': InvalidOrder,  # Price by order is less than permissible minimum for self pair
            '50321': InvalidOrder,  # Price by order is more than permissible maximum for self pair
            '50381': InvalidOrder,  # {"result":false,"error":"Error 50381: More than 2 decimal places are not permitted for pair BTC_USD"}
        },
        'broad': {
            'range period is too long': BadRequest,
            'invalid syntax': BadRequest,
            'API rate limit exceeded': RateLimitExceeded,  # {"result":false,"error":"API rate limit exceeded for x.x.x.x. Retry after 60 sec.","history":[],"begin":1579392000,"end":1579478400}
        },
    },
},
{
    'id': 'bigone',
    'name': 'BigONE',
    'countries': ['CN'],
    'version': 'v3',
    'rateLimit': 1200,  # 500 request per 10 minutes
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': None,  # has but unimplemented
        'future': None,  # has but unimplemented
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': 'min1',
        '5m': 'min5',
        '15m': 'min15',
        '30m': 'min30',
        '1h': 'hour1',
        '3h': 'hour3',
        '4h': 'hour4',
        '6h': 'hour6',
        '12h': 'hour12',
        '1d': 'day1',
        '1w': 'week1',
        '1M': 'month1',
    },
    'hostname': 'big.one',  # or 'bigone.com'
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/69354403-1d532180-0c91-11ea-88ed-44c06cefdf87.jpg',
        'api': {
            'public': 'https://{hostname}/api/v3',
            'private': 'https://{hostname}/api/v3/viewer',
        },
        'www': 'https://big.one',
        'doc': 'https://open.big.one/docs/api.html',
        'fees': 'https://bigone.zendesk.com/hc/en-us/articles/115001933374-BigONE-Fee-Policy',
        'referral': 'https://b1.run/users/new?code=D3LLBVFT',
    },
    'api': {
        'public': {
            'get': [
                'ping',
                'asset_pairs',
                'asset_pairs/{asset_pair_name}/depth',
                'asset_pairs/{asset_pair_name}/trades',
                'asset_pairs/{asset_pair_name}/ticker',
                'asset_pairs/{asset_pair_name}/candles',
                'asset_pairs/tickers',
            ],
        },
        'private': {
            'get': [
                'accounts',
                'fund/accounts',
                'assets/{asset_symbol}/address',
                'orders',
                'orders/{id}',
                'orders/multi',
                'trades',
                'withdrawals',
                'deposits',
            ],
            'post': [
                'orders',
                'orders/{id}/cancel',
                'orders/cancel',
                'withdrawals',
                'transfer',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.001'),
            'taker': self.parse_number('0.001'),
        },
        'funding': {
            'withdraw': {},
        },
    },
    'exceptions': {
        'exact': {
            '10001': BadRequest,  # syntax error
            '10005': ExchangeError,  # internal error
            "Amount's scale must greater than AssetPair's base scale": InvalidOrder,
            "Price mulit with amount should larger than AssetPair's min_quote_value": InvalidOrder,
            '10007': BadRequest,  # parameter error, {"code":10007,"message":"Amount's scale must greater than AssetPair's base scale"}
            '10011': ExchangeError,  # system error
            '10013': BadSymbol,  # {"code":10013,"message":"Resource not found"}
            '10014': InsufficientFunds,  # {"code":10014,"message":"Insufficient funds"}
            '10403': PermissionDenied,  # permission denied
            '10429': RateLimitExceeded,  # too many requests
            '40004': AuthenticationError,  # {"code":40004,"message":"invalid jwt"}
            '40103': AuthenticationError,  # invalid otp code
            '40104': AuthenticationError,  # invalid asset pin code
            '40301': PermissionDenied,  # {"code":40301,"message":"Permission denied withdrawal create"}
            '40302': ExchangeError,  # already requested
            '40601': ExchangeError,  # resource is locked
            '40602': ExchangeError,  # resource is depleted
            '40603': InsufficientFunds,  # insufficient resource
            '40605': InvalidOrder,  # {"code":40605,"message":"Price less than the minimum order price"}
            '40120': InvalidOrder,  # Order is in trading
            '40121': InvalidOrder,  # Order is already cancelled or filled
            '60100': BadSymbol,  # {"code":60100,"message":"Asset pair is suspended"}
        },
        'broad': {
        },
    },
    'commonCurrencies': {
        'CRE': 'Cybereits',
        'FXT': 'FXTTOKEN',
        'FREE': 'FreeRossDAO',
        'MBN': 'Mobilian Coin',
        'ONE': 'BigONE Token',
    },
},
{
    'id': 'hitbtc3',
    'name': 'HitBTC',
    'countries': ['HK'],
    # 300 requests per second => 1000ms / 300 = 3.333(Trading: placing, replacing, deleting)
    # 30 requests per second =>( 1000ms / rateLimit ) / 30 = cost = 10(Market Data and other Public Requests)
    # 20 requests per second =>( 1000ms / rateLimit ) / 20 = cost = 15(All Other)
    'rateLimit': 3.333,  # TODO: optimize https://api.hitbtc.com/#rate-limiting
    'version': '3',
    'pro': True,
    'has': {
        'CORS': False,
        'spot': True,
        'margin': None,  # has but not fully unimplemented
        'swap': None,  # has but not fully unimplemented
        'future': None,  # has but not fully unimplemented
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingRateHistory': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': True,
        'fetchOrders': False,
        'fetchOrderTrades': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'transfer': True,
        'withdraw': True,
    },
    'precisionMode': TICK_SIZE,
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
        'test': {
            'public': 'https://api.demo.hitbtc.com',
            'private': 'https://api.demo.hitbtc.com',
        },
        'api': {
            'public': 'https://api.hitbtc.com/api/3',
            'private': 'https://api.hitbtc.com/api/3',
        },
        'www': 'https://hitbtc.com',
        'referral': 'https://hitbtc.com/?ref_id=5a5d39a65d466',
        'doc': [
            'https://api.hitbtc.com',
            'https://github.com/hitbtc-com/hitbtc-api/blob/master/APIv2.md',
        ],
        'fees': [
            'https://hitbtc.com/fees-and-limits',
            'https://support.hitbtc.com/hc/en-us/articles/115005148605-Fees-and-limits',
        ],
    },
    'api': {
        'public': {
            'get': {
                'public/currency': 10,
                'public/symbol': 10,
                'public/ticker': 10,
                'public/price/rate': 10,
                'public/trades': 10,
                'public/orderbook': 10,
                'public/candles': 10,
                'public/futures/info': 10,
                'public/futures/history/funding': 10,
                'public/futures/candles/index_price': 10,
                'public/futures/candles/mark_price': 10,
                'public/futures/candles/premium_index': 10,
                'public/futures/candles/open_interest': 10,
            },
        },
        'private': {
            'get': {
                'spot/balance': 15,
                'spot/order': 15,
                'spot/order/{client_order_id}': 15,
                'spot/fee': 15,
                'spot/fee/{symbol}': 15,
                'spot/history/order': 15,
                'spot/history/trade': 15,
                'margin/account': 15,
                'margin/account/isolated/{symbol}': 15,
                'margin/order': 15,
                'margin/order/{client_order_id}': 15,
                'margin/history/order': 15,
                'margin/history/trade': 15,
                'futures/balance': 15,
                'futures/account': 15,
                'futures/account/isolated/{symbol}': 15,
                'futures/order': 15,
                'futures/order/{client_order_id}': 15,
                'futures/fee': 15,
                'futures/fee/{symbol}': 15,
                'futures/history/order': 15,
                'futures/history/trade': 15,
                'wallet/balance': 15,
                'wallet/crypto/address': 15,
                'wallet/crypto/address/recent-deposit': 15,
                'wallet/crypto/address/recent-withdraw': 15,
                'wallet/crypto/address/check-mine': 15,
                'wallet/transactions': 15,
                'wallet/crypto/check-offchain-available': 15,
                'wallet/crypto/fee/estimate': 15,
                'sub-account': 15,
                'sub-account/acl': 15,
                'sub-account/balance/{subAccID}': 15,
                'sub-account/crypto/address/{subAccID}/{currency}': 15,
            },
            'post': {
                'spot/order': 1,
                'margin/order': 1,
                'futures/order': 1,
                'wallet/convert': 15,
                'wallet/crypto/withdraw': 15,
                'wallet/transfer': 15,
                'sub-account/freeze': 15,
                'sub-account/activate': 15,
                'sub-account/transfer': 15,
                'sub-account/acl': 15,
            },
            'patch': {
                'spot/order/{client_order_id}': 1,
                'margin/order/{client_order_id}': 1,
                'futures/order/{client_order_id}': 1,
            },
            'delete': {
                'spot/order': 1,
                'spot/order/{client_order_id}': 1,
                'margin/position': 1,
                'margin/position/isolated/{symbol}': 1,
                'margin/order': 1,
                'margin/order/{client_order_id}': 1,
                'futures/position': 1,
                'futures/position/isolated/{symbol}': 1,
                'futures/order': 1,
                'futures/order/{client_order_id}': 1,
                'wallet/crypto/withdraw/{id}': 1,
            },
            'put': {
                'margin/account/isolated/{symbol}': 1,
                'futures/account/isolated/{symbol}': 1,
                'wallet/crypto/withdraw/{id}': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.0009'),
            'maker': self.parse_number('0.0009'),
            'tiers': {
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.0009')],
                    [self.parse_number('10'), self.parse_number('0.0007')],
                    [self.parse_number('100'), self.parse_number('0.0006')],
                    [self.parse_number('500'), self.parse_number('0.0005')],
                    [self.parse_number('1000'), self.parse_number('0.0003')],
                    [self.parse_number('5000'), self.parse_number('0.0002')],
                    [self.parse_number('10000'), self.parse_number('0.0001')],
                    [self.parse_number('20000'), self.parse_number('0')],
                    [self.parse_number('50000'), self.parse_number('-0.0001')],
                    [self.parse_number('100000'), self.parse_number('-0.0001')],
                ],
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.0009')],
                    [self.parse_number('10'), self.parse_number('0.0008')],
                    [self.parse_number('100'), self.parse_number('0.0007')],
                    [self.parse_number('500'), self.parse_number('0.0007')],
                    [self.parse_number('1000'), self.parse_number('0.0006')],
                    [self.parse_number('5000'), self.parse_number('0.0006')],
                    [self.parse_number('10000'), self.parse_number('0.0005')],
                    [self.parse_number('20000'), self.parse_number('0.0004')],
                    [self.parse_number('50000'), self.parse_number('0.0003')],
                    [self.parse_number('100000'), self.parse_number('0.0002')],
                ],
            },
        },
    },
    'timeframes': {
        '1m': 'M1',
        '3m': 'M3',
        '5m': 'M5',
        '15m': 'M15',
        '30m': 'M30',  # default
        '1h': 'H1',
        '4h': 'H4',
        '1d': 'D1',
        '1w': 'D7',
        '1M': '1M',
    },
    'exceptions': {
        'exact': {
            '429': RateLimitExceeded,
            '500': ExchangeError,
            '503': ExchangeNotAvailable,
            '504': ExchangeNotAvailable,
            '600': PermissionDenied,
            '800': ExchangeError,
            '1002': AuthenticationError,
            '1003': PermissionDenied,
            '1004': AuthenticationError,
            '1005': AuthenticationError,
            '2001': BadSymbol,
            '2002': BadRequest,
            '2003': BadRequest,
            '2010': BadRequest,
            '2011': BadRequest,
            '2012': BadRequest,
            '2020': BadRequest,
            '2022': BadRequest,
            '10001': BadRequest,
            '10021': AccountSuspended,
            '10022': BadRequest,
            '20001': InsufficientFunds,
            '20002': OrderNotFound,
            '20003': ExchangeError,
            '20004': ExchangeError,
            '20005': ExchangeError,
            '20006': ExchangeError,
            '20007': ExchangeError,
            '20008': InvalidOrder,
            '20009': InvalidOrder,
            '20010': OnMaintenance,
            '20011': ExchangeError,
            '20012': ExchangeError,
            '20014': ExchangeError,
            '20016': ExchangeError,
            '20031': ExchangeError,
            '20032': ExchangeError,
            '20033': ExchangeError,
            '20034': ExchangeError,
            '20040': ExchangeError,
            '20041': ExchangeError,
            '20042': ExchangeError,
            '20043': ExchangeError,
            '20044': PermissionDenied,
            '20045': ExchangeError,
            '20080': ExchangeError,
            '21001': ExchangeError,
            '21003': AccountSuspended,
            '21004': AccountSuspended,
        },
        'broad': {},
    },
    'options': {
        'networks': {
            'ETH': 'USDT20',
            'ERC20': 'USDT20',
            'TRX': 'USDTRX',
            'TRC20': 'USDTRX',
            'OMNI': 'USDT',
        },
        'accountsByType': {
            'spot': 'spot',
            'wallet': 'wallet',
            'derivatives': 'derivatives',
        },
    },
},
{
    'id': 'equos',
    'name': 'EQUOS',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/107758499-05edd180-6d38-11eb-9e09-0b69602a7a15.jpg',
    },
},
{
    'id': 'bithumb',
    'name': 'Bithumb',
    'countries': ['KR'],  # South Korea
    'rateLimit': 500,
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'hostname': 'bithumb.com',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/30597177-ea800172-9d5e-11e7-804c-b9d4fa9b56b0.jpg',
        'api': {
            'public': 'https://api.{hostname}/public',
            'private': 'https://api.{hostname}',
        },
        'www': 'https://www.bithumb.com',
        'doc': 'https://apidocs.bithumb.com',
        'fees': 'https://en.bithumb.com/customer_support/info_fee',
    },
    'api': {
        'public': {
            'get': [
                'ticker/{currency}',
                'ticker/all',
                'ticker/ALL_BTC',
                'ticker/ALL_KRW',
                'orderbook/{currency}',
                'orderbook/all',
                'transaction_history/{currency}',
                'transaction_history/all',
                'candlestick/{currency}/{interval}',
            ],
        },
        'private': {
            'post': [
                'info/account',
                'info/balance',
                'info/wallet_address',
                'info/ticker',
                'info/orders',
                'info/user_transactions',
                'info/order_detail',
                'trade/place',
                'trade/cancel',
                'trade/btc_withdrawal',
                'trade/krw_deposit',
                'trade/krw_withdrawal',
                'trade/market_buy',
                'trade/market_sell',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.0025'),
            'taker': self.parse_number('0.0025'),
        },
    },
    'precisionMode': SIGNIFICANT_DIGITS,
    'exceptions': {
        'Bad Request(SSL)': BadRequest,
        'Bad Request(Bad Method)': BadRequest,
        'Bad Request.(Auth Data)': AuthenticationError,  # {"status": "5100", "message": "Bad Request.(Auth Data)"}
        'Not Member': AuthenticationError,
        'Invalid Apikey': AuthenticationError,  # {"status":"5300","message":"Invalid Apikey"}
        'Method Not Allowed.(Access IP)': PermissionDenied,
        'Method Not Allowed.(BTC Adress)': InvalidAddress,
        'Method Not Allowed.(Access)': PermissionDenied,
        'Database Fail': ExchangeNotAvailable,
        'Invalid Parameter': BadRequest,
        '5600': ExchangeError,
        'Unknown Error': ExchangeError,
        'After May 23th, recent_transactions is no longer, hence users will not be able to connect to recent_transactions': ExchangeError,  # {"status":"5100","message":"After May 23th, recent_transactions is no longer, hence users will not be able to connect to recent_transactions"}
    },
    'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '10m': '10m',
        '30m': '30m',
        '1h': '1h',
        '6h': '6h',
        '12h': '12h',
        '1d': '24h',
    },
    'options': {
        'quoteCurrencies': {
            'BTC': {
                'limits': {
                    'cost': {
                        'min': 0.0002,
                        'max': 100,
                    },
                },
            },
            'KRW': {
                'limits': {
                    'cost': {
                        'min': 500,
                        'max': 5000000000,
                    },
                },
            },
        },
    },
    'commonCurrencies': {
        'FTC': 'FTC2',
        'MIR': 'MIR COIN',
        'SOC': 'Soda Coin',
    },
},
{
    'id': 'bl3p',
    'name': 'BL3P',
    'countries': ['NL'],  # Netherlands
    'rateLimit': 1000,
    'version': '1',
    'comment': 'An exchange market by BitonicNL',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkOHLCV': False,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg',
        'api': 'https://api.bl3p.eu',
        'www': 'https://bl3p.eu',  # 'https://bitonic.nl'
        'doc': [
            'https://github.com/BitonicNL/bl3p-api/tree/master/docs',
            'https://bl3p.eu/api',
            'https://bitonic.nl/en/api',
        ],
    },
    'api': {
        'public': {
            'get': [
                '{market}/ticker',
                '{market}/orderbook',
                '{market}/trades',
            ],
        },
        'private': {
            'post': [
                '{market}/money/depth/full',
                '{market}/money/order/add',
                '{market}/money/order/cancel',
                '{market}/money/order/result',
                '{market}/money/orders',
                '{market}/money/orders/history',
                '{market}/money/trades/fetch',
                'GENMKT/money/info',
                'GENMKT/money/deposit_address',
                'GENMKT/money/new_deposit_address',
                'GENMKT/money/wallet/history',
                'GENMKT/money/withdraw',
            ],
        },
    },
    'markets': {
        'BTC/EUR': {'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'BTC', 'quoteId': 'EUR', 'maker': 0.0025, 'taker': 0.0025, 'type': 'spot', 'spot': True},
        'LTC/EUR': {'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR', 'baseId': 'LTC', 'quoteId': 'EUR', 'maker': 0.0025, 'taker': 0.0025, 'type': 'spot', 'spot': True},
    },
},
{
    'id': 'bitmex',
    'name': 'BitMEX',
    'countries': ['SC'],  # Seychelles
    'version': 'v1',
    'userAgent': None,
    'rateLimit': 2000,
    'pro': True,
    'has': {
        'CORS': None,
        'spot': False,
        'margin': False,
        'swap': None,  # has but not fully implemented
        'future': None,  # has but not fully implemented
        'option': None,  # has but not fully implemented
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchIndexOHLCV': False,
        'fetchLedger': True,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPositions': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTransactions': 'emulated',
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '1h': '1h',
        '1d': '1d',
    },
    'urls': {
        'test': {
            'public': 'https://testnet.bitmex.com',
            'private': 'https://testnet.bitmex.com',
        },
        'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',
        'api': {
            'public': 'https://www.bitmex.com',
            'private': 'https://www.bitmex.com',
        },
        'www': 'https://www.bitmex.com',
        'doc': [
            'https://www.bitmex.com/app/apiOverview',
            'https://github.com/BitMEX/api-connectors/tree/master/official-http',
        ],
        'fees': 'https://www.bitmex.com/app/fees',
        'referral': 'https://www.bitmex.com/register/upZpOX',
    },
    'api': {
        'public': {
            'get': [
                'announcement',
                'announcement/urgent',
                'funding',
                'instrument',
                'instrument/active',
                'instrument/activeAndIndices',
                'instrument/activeIntervals',
                'instrument/compositeIndex',
                'instrument/indices',
                'insurance',
                'leaderboard',
                'liquidation',
                'orderBook',
                'orderBook/L2',
                'quote',
                'quote/bucketed',
                'schema',
                'schema/websocketHelp',
                'settlement',
                'stats',
                'stats/history',
                'trade',
                'trade/bucketed',
            ],
        },
        'private': {
            'get': [
                'apiKey',
                'chat',
                'chat/channels',
                'chat/connected',
                'execution',
                'execution/tradeHistory',
                'notification',
                'order',
                'position',
                'user',
                'user/affiliateStatus',
                'user/checkReferralCode',
                'user/commission',
                'user/depositAddress',
                'user/executionHistory',
                'user/margin',
                'user/minWithdrawalFee',
                'user/wallet',
                'user/walletHistory',
                'user/walletSummary',
            ],
            'post': [
                'apiKey',
                'apiKey/disable',
                'apiKey/enable',
                'chat',
                'order',
                'order/bulk',
                'order/cancelAllAfter',
                'order/closePosition',
                'position/isolate',
                'position/leverage',
                'position/riskLimit',
                'position/transferMargin',
                'user/cancelWithdrawal',
                'user/confirmEmail',
                'user/confirmEnableTFA',
                'user/confirmWithdrawal',
                'user/disableTFA',
                'user/logout',
                'user/logoutAll',
                'user/preferences',
                'user/requestEnableTFA',
                'user/requestWithdrawal',
            ],
            'put': [
                'order',
                'order/bulk',
                'user',
            ],
            'delete': [
                'apiKey',
                'order',
                'order/all',
            ],
        },
    },
    'exceptions': {
        'exact': {
            'Invalid API Key.': AuthenticationError,
            'This key is disabled.': PermissionDenied,
            'Access Denied': PermissionDenied,
            'Duplicate clOrdID': InvalidOrder,
            'orderQty is invalid': InvalidOrder,
            'Invalid price': InvalidOrder,
            'Invalid stopPx for ordType': InvalidOrder,
        },
        'broad': {
            'Signature not valid': AuthenticationError,
            'overloaded': ExchangeNotAvailable,
            'Account has insufficient Available Balance': InsufficientFunds,
            'Service unavailable': ExchangeNotAvailable,  # {"error":{"message":"Service unavailable","name":"HTTPError"}}
            'Server Error': ExchangeError,  # {"error":{"message":"Server Error","name":"HTTPError"}}
            'Unable to cancel order due to existing state': InvalidOrder,
        },
    },
    'precisionMode': TICK_SIZE,
    'options': {
        # https://blog.bitmex.com/api_announcement/deprecation-of-api-nonce-header/
        # https://github.com/ccxt/ccxt/issues/4789
        'api-expires': 5,  # in seconds
        'fetchOHLCVOpenTimestamp': True,
    },
    'commonCurrencies': {
        'USDt': 'USDT',
        'XBt': 'BTC',
        'XBT': 'BTC',
    },
},
{
    'id': 'indodax',
    'name': 'INDODAX',
    'countries': ['ID'],  # Indonesia
    # 10 requests per second for making trades => 1000ms / 10 = 100ms
    # 180 requests per minute(public endpoints) = 2 requests per second => cost = (1000ms / rateLimit) / 2 = 5
    'rateLimit': 100,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': None,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': None,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': None,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'version': '2.0',  # as of 9 April 2018
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87070508-9358c880-c221-11ea-8dc5-5391afbbb422.jpg',
        'api': {
            'public': 'https://indodax.com/api',
            'private': 'https://indodax.com/tapi',
        },
        'www': 'https://www.indodax.com',
        'doc': 'https://github.com/btcid/indodax-official-api-docs',
        'referral': 'https://indodax.com/ref/testbitcoincoid/1',
    },
    'api': {
        'public': {
            'get': {
                'server_time': 5,
                'pairs': 5,
                'price_increments': 5,
                'summaries': 5,
                'ticker_all': 5,
                '{pair}/ticker': 5,
                '{pair}/trades': 5,
                '{pair}/depth': 5,
            },
        },
        'private': {
            'post': {
                'getInfo': 4,
                'transHistory': 4,  # TODO add fetchDeposits, fetchWithdrawals, fetchTransactionsbyType
                'trade': 1,
                'tradeHistory': 4,  # TODO add fetchMyTrades
                'openOrders': 4,
                'orderHistory': 4,
                'getOrder': 4,
                'cancelOrder': 4,
                'withdrawFee': 4,
                'withdrawCoin': 4,
                'listDownline': 4,
                'checkDownline': 4,
                'createVoucher': 4,  # partner only
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': 0,
            'taker': 0.003,
        },
    },
    'exceptions': {
        'exact': {
            'invalid_pair': BadSymbol,  # {"error":"invalid_pair","error_description":"Invalid Pair"}
            'Insufficient balance.': InsufficientFunds,
            'invalid order.': OrderNotFound,
            'Invalid credentials. API not found or session has expired.': AuthenticationError,
            'Invalid credentials. Bad sign.': AuthenticationError,
        },
        'broad': {
            'Minimum price': InvalidOrder,
            'Minimum order': InvalidOrder,
        },
    },
    # exchange-specific options
    'options': {
        'recvWindow': 5 * 1000,  # default 5 sec
        'timeDifference': 0,  # the difference between system clock and exchange clock
        'adjustForTimeDifference': False,  # controls the adjustment logic upon instantiation
    },
    'commonCurrencies': {
        'STR': 'XLM',
        'BCHABC': 'BCH',
        'BCHSV': 'BSV',
        'DRK': 'DASH',
        'NEM': 'XEM',
    },
},
{
    'id': 'coinfalcon',
    'name': 'CoinFalcon',
    'countries': ['GB'],
    'rateLimit': 1000,
    'version': 'v1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradinFee': False,
        'fetchTradingFees': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/41822275-ed982188-77f5-11e8-92bb-496bcd14ca52.jpg',
        'api': 'https://coinfalcon.com',
        'www': 'https://coinfalcon.com',
        'doc': 'https://docs.coinfalcon.com',
        'fees': 'https://coinfalcon.com/fees',
        'referral': 'https://coinfalcon.com/?ref=CFJSVGTUPASB',
    },
    'api': {
        'public': {
            'get': [
                'markets',
                'markets/{market}',
                'markets/{market}/orders',
                'markets/{market}/trades',
            ],
        },
        'private': {
            'get': [
                'user/accounts',
                'user/orders',
                'user/orders/{id}',
                'user/orders/{id}/trades',
                'user/trades',
                'user/fees',
                'account/withdrawals/{id}',
                'account/withdrawals',
                'account/deposit/{id}',
                'account/deposits',
                'account/deposit_address',
            ],
            'post': [
                'user/orders',
                'account/withdraw',
            ],
            'delete': [
                'user/orders/{id}',
                'account/withdrawals/{id}',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'maker': 0.0,
            'taker': 0.002,  # tiered fee starts at 0.2%
        },
    },
    'precision': {
        'amount': 8,
        'price': 8,
    },
},
{
    'id': 'latoken',
    'name': 'Latoken',
    'countries': ['KY'],  # Cayman Islands
    'version': 'v2',
    'rateLimit': 1000,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': None,  # has but unimplemented
        'future': None,
        'option': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchCurrencies': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTransactions': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/61511972-24c39f00-aa01-11e9-9f7c-471f1d6e5214.jpg',
        'api': 'https://api.latoken.com',
        'www': 'https://latoken.com',
        'doc': [
            'https://api.latoken.com',
        ],
        'fees': 'https://latoken.com/fees',
        'referral': 'https://latoken.com/invite?r=mvgp2djk',
    },
    'api': {
        'public': {
            'get': {
                'book/{currency}/{quote}': 1,
                'chart/week': 1,
                'chart/week/{currency}/{quote}': 1,
                'currency': 1,
                'currency/available': 1,
                'currency/quotes': 1,
                'currency/{currency}': 1,
                'pair': 1,
                'pair/available': 1,
                'ticker': 1,
                'ticker/{base}/{quote}': 1,
                'time': 1,
                'trade/history/{currency}/{quote}': 1,
                'trade/fee/{currency}/{quote}': 1,
                'trade/feeLevels': 1,
                'transaction/bindings': 1,
            },
        },
        'private': {
            'get': {
                'auth/account': 1,
                'auth/account/currency/{currency}/{type}': 1,
                'auth/order': 1,
                'auth/order/getOrder/{id}': 1,
                'auth/order/pair/{currency}/{quote}': 1,
                'auth/order/pair/{currency}/{quote}/active': 1,
                'auth/stopOrder': 1,
                'auth/stopOrder/getOrder/{id}': 1,
                'auth/stopOrder/pair/{currency}/{quote}': 1,
                'auth/stopOrder/pair/{currency}/{quote}/active': 1,
                'auth/trade': 1,
                'auth/trade/pair/{currency}/{quote}': 1,
                'auth/trade/fee/{currency}/{quote}': 1,
                'auth/transaction': 1,
                'auth/transaction/bindings': 1,
                'auth/transaction/bindings/{currency}': 1,
                'auth/transaction/{id}': 1,
                'auth/transfer': 1,
            },
            'post': {
                'auth/order/cancel': 1,
                'auth/order/cancelAll': 1,
                'auth/order/cancelAll/{currency}/{quote}': 1,
                'auth/order/place': 1,
                'auth/spot/deposit': 1,
                'auth/spot/withdraw': 1,
                'auth/stopOrder/cancel': 1,
                'auth/stopOrder/cancelAll': 1,
                'auth/stopOrder/cancelAll/{currency}/{quote}': 1,
                'auth/stopOrder/place': 1,
                'auth/transaction/depositAddress': 1,
                'auth/transaction/withdraw': 1,
                'auth/transaction/withdraw/cancel': 1,
                'auth/transaction/withdraw/confirm': 1,
                'auth/transaction/withdraw/resendCode': 1,
                'auth/transfer/email': 1,
                'auth/transfer/id': 1,
                'auth/transfer/phone': 1,
            },
        },
    },
    'precisionMode': TICK_SIZE,
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.0049'),
            'taker': self.parse_number('0.0049'),
        },
    },
    'commonCurrencies': {
        'BUX': 'Buxcoin',
        'CBT': 'Community Business Token',
        'CTC': 'CyberTronchain',
        'DMD': 'Diamond Coin',
        'FREN': 'Frenchie',
        'GDX': 'GoldenX',
        'GEC': 'Geco One',
        'GEM': 'NFTmall',
        'IMC': 'IMCoin',
        'MT': 'Monarch',
        'TPAY': 'Tetra Pay',
        'TRADE': 'Smart Trade Coin',
        'TSL': 'Treasure SL',
        'UNO': 'Unobtanium',
        'WAR': 'Warrior Token',
    },
    'exceptions': {
        'exact': {
            'INTERNAL_ERROR': ExchangeError,  # internal server error. You can contact our support to solve self problem. {"message":"Internal Server Error","error":"INTERNAL_ERROR","status":"FAILURE"}
            'SERVICE_UNAVAILABLE': ExchangeNotAvailable,  # requested information currently not available. You can contact our support to solve self problem or retry later.
            'NOT_AUTHORIZED': AuthenticationError,  # user's query not authorized. Check if you are logged in.
            'FORBIDDEN': PermissionDenied,  # you don't have enough access rights.
            'BAD_REQUEST': BadRequest,  # some bad request, for example bad fields values or something else. Read response message for more information.
            'NOT_FOUND': ExchangeError,  # entity not found. Read message for more information.
            'ACCESS_DENIED': PermissionDenied,  # access is denied. Probably you don't have enough access rights, you contact our support.
            'REQUEST_REJECTED': ExchangeError,  # user's request rejected for some reasons. Check error message.
            'HTTP_MEDIA_TYPE_NOT_SUPPORTED': BadRequest,  # http media type not supported.
            'MEDIA_TYPE_NOT_ACCEPTABLE': BadRequest,  # media type not acceptable
            'METHOD_ARGUMENT_NOT_VALID': BadRequest,  # one of method argument is invalid. Check argument types and error message for more information.
            'VALIDATION_ERROR': BadRequest,  # check errors field to get reasons.
            'ACCOUNT_EXPIRED': AccountSuspended,  # restore your account or create a new one.
            'BAD_CREDENTIALS': AuthenticationError,  # invalid username or password.
            'COOKIE_THEFT': AuthenticationError,  # cookie has been stolen. Let's try reset your cookies.
            'CREDENTIALS_EXPIRED': AccountSuspended,  # credentials expired.
            'INSUFFICIENT_AUTHENTICATION': AuthenticationError,  # for example, 2FA required.
            'UNKNOWN_LOCATION': AuthenticationError,  # user logged from unusual location, email confirmation required.
            'TOO_MANY_REQUESTS': RateLimitExceeded,  # too many requests at the time. A response header X-Rate-Limit-Remaining indicates the number of allowed request per a period.
            'INSUFFICIENT_FUNDS': InsufficientFunds,  # {"message":"not enough balance on the spot account for currency(USDT), need(20.000)","error":"INSUFFICIENT_FUNDS","status":"FAILURE"}
        },
        'broad': {
            'invalid API key, signature or digest': AuthenticationError,  # {"result":false,"message":"invalid API key, signature or digest","error":"BAD_REQUEST","status":"FAILURE"}
            'request expired or bad': InvalidNonce,  # {"result":false,"message":"request expired or bad <timeAlive>/<timestamp> format","error":"BAD_REQUEST","status":"FAILURE"}
            'For input string': BadRequest,  # {"result":false,"message":"Internal error","error":"For input string: \"NaN\"","status":"FAILURE"}
        },
    },
    'options': {
        'defaultType': 'spot',
        'types': {
            'wallet': 'ACCOUNT_TYPE_WALLET',
            'spot': 'ACCOUNT_TYPE_SPOT',
        },
        'accounts': {
            'ACCOUNT_TYPE_WALLET': 'wallet',
            'ACCOUNT_TYPE_SPOT': 'spot',
        },
    },
},
{
    'id': 'okcoin',
    'name': 'OKCoin',
    'countries': ['CN', 'US'],
    'version': 'v3',
    'rateLimit': 1000,  # up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,
        'swap': None,
        'future': True,
        'option': None,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,  # see below
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchLedger': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': None,
        'fetchOrderTrades': True,
        'fetchPosition': True,
        'fetchPositions': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTransactions': None,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '60',
        '3m': '180',
        '5m': '300',
        '15m': '900',
        '30m': '1800',
        '1h': '3600',
        '2h': '7200',
        '4h': '14400',
        '6h': '21600',
        '12h': '43200',
        '1d': '86400',
        '1w': '604800',
        '1M': '2678400',
        '3M': '8035200',
        '6M': '16070400',
        '1y': '31536000',
    },
    'hostname': 'okcoin.com',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87295551-102fbf00-c50e-11ea-90a9-462eebba5829.jpg',
        'api': {
            'rest': 'https://www.{hostname}',
        },
        'www': 'https://www.okcoin.com',
        'doc': 'https://www.okcoin.com/docs/en/',
        'fees': 'https://www.okcoin.com/coin-fees',
        'referral': 'https://www.okcoin.com/account/register?flag=activity&channelId=600001513',
        'test': {
            'rest': 'https://testnet.okex.com',
        },
    },
    'api': {
        'general': {
            'get': [
                'time',
            ],
        },
        'account': {
            'get': [
                'wallet',
                'sub-account',
                'asset-valuation',
                'wallet/{currency}',
                'withdrawal/history',
                'withdrawal/history/{currency}',
                'ledger',
                'deposit/address',
                'deposit/history',
                'deposit/history/{currency}',
                'currencies',
                'withdrawal/fee',
            ],
            'post': [
                'transfer',
                'withdrawal',
            ],
        },
        'spot': {
            'get': [
                'accounts',
                'accounts/{currency}',
                'accounts/{currency}/ledger',
                'orders',
                'amend_order/{instrument_id}',
                'orders_pending',
                'orders/{order_id}',
                'orders/{client_oid}',
                'trade_fee',
                'fills',
                'algo',
                # public
                'instruments',
                'instruments/{instrument_id}/book',
                'instruments/ticker',
                'instruments/{instrument_id}/ticker',
                'instruments/{instrument_id}/trades',
                'instruments/{instrument_id}/candles',
                'instruments/{instrument_id}/history/candles',
            ],
            'post': [
                'order_algo',
                'orders',
                'batch_orders',
                'cancel_orders/{order_id}',
                'cancel_orders/{client_oid}',
                'cancel_batch_algos',
                'cancel_batch_orders',
            ],
        },
        'margin': {
            'get': [
                'accounts',
                'accounts/{instrument_id}',
                'accounts/{instrument_id}/ledger',
                'accounts/availability',
                'accounts/{instrument_id}/availability',
                'accounts/borrowed',
                'accounts/{instrument_id}/borrowed',
                'orders',
                'accounts/{instrument_id}/leverage',
                'orders/{order_id}',
                'orders/{client_oid}',
                'orders_pending',
                'fills',
                # public
                'instruments/{instrument_id}/mark_price',
            ],
            'post': [
                'accounts/borrow',
                'accounts/repayment',
                'orders',
                'batch_orders',
                'cancel_orders',
                'cancel_orders/{order_id}',
                'cancel_orders/{client_oid}',
                'cancel_batch_orders',
                'accounts/{instrument_id}/leverage',
            ],
        },
        'futures': {
            'get': [
                'position',
                '{instrument_id}/position',
                'accounts',
                'accounts/{underlying}',
                'accounts/{underlying}/leverage',
                'accounts/{underlying}/ledger',
                'order_algo/{instrument_id}',
                'orders/{instrument_id}',
                'orders/{instrument_id}/{order_id}',
                'orders/{instrument_id}/{client_oid}',
                'fills',
                'trade_fee',
                'accounts/{instrument_id}/holds',
                'order_algo/{instrument_id}',
                # public
                'instruments',
                'instruments/{instrument_id}/book',
                'instruments/ticker',
                'instruments/{instrument_id}/ticker',
                'instruments/{instrument_id}/trades',
                'instruments/{instrument_id}/candles',
                'instruments/{instrument_id}/history/candles',
                'instruments/{instrument_id}/index',
                'rate',
                'instruments/{instrument_id}/estimated_price',
                'instruments/{instrument_id}/open_interest',
                'instruments/{instrument_id}/price_limit',
                'instruments/{instrument_id}/mark_price',
                'instruments/{instrument_id}/liquidation',
            ],
            'post': [
                'accounts/{underlying}/leverage',
                'order',
                'amend_order/{instrument_id}',
                'orders',
                'cancel_order/{instrument_id}/{order_id}',
                'cancel_order/{instrument_id}/{client_oid}',
                'cancel_batch_orders/{instrument_id}',
                'accounts/margin_mode',
                'close_position',
                'cancel_all',
                'order_algo',
                'cancel_algos',
            ],
        },
        'swap': {
            'get': [
                'position',
                '{instrument_id}/position',
                'accounts',
                '{instrument_id}/accounts',
                'accounts/{instrument_id}/settings',
                'accounts/{instrument_id}/ledger',
                'orders/{instrument_id}',
                'orders/{instrument_id}/{order_id}',
                'orders/{instrument_id}/{client_oid}',
                'fills',
                'accounts/{instrument_id}/holds',
                'trade_fee',
                'order_algo/{instrument_id}',
                # public
                'instruments',
                'instruments/{instrument_id}/depth',
                'instruments/ticker',
                'instruments/{instrument_id}/ticker',
                'instruments/{instrument_id}/trades',
                'instruments/{instrument_id}/candles',
                'instruments/{instrument_id}/history/candles',
                'instruments/{instrument_id}/index',
                'rate',
                'instruments/{instrument_id}/open_interest',
                'instruments/{instrument_id}/price_limit',
                'instruments/{instrument_id}/liquidation',
                'instruments/{instrument_id}/funding_time',
                'instruments/{instrument_id}/mark_price',
                'instruments/{instrument_id}/historical_funding_rate',
            ],
            'post': [
                'accounts/{instrument_id}/leverage',
                'order',
                'amend_order/{instrument_id}',
                'orders',
                'cancel_order/{instrument_id}/{order_id}',
                'cancel_order/{instrument_id}/{client_oid}',
                'cancel_batch_orders/{instrument_id}',
                'order_algo',
                'cancel_algos',
                'close_position',
                'cancel_all',
                'order_algo',
                'cancel_algos',
            ],
        },
        'option': {
            'get': [
                'accounts',
                'position',
                '{underlying}/position',
                'accounts/{underlying}',
                'orders/{underlying}',
                'fills/{underlying}',
                'accounts/{underlying}/ledger',
                'trade_fee',
                'orders/{underlying}/{order_id}',
                'orders/{underlying}/{client_oid}',
                # public
                'underlying',
                'instruments/{underlying}',
                'instruments/{underlying}/summary',
                'instruments/{underlying}/summary/{instrument_id}',
                'instruments/{instrument_id}/book',
                'instruments/{instrument_id}/trades',
                'instruments/{instrument_id}/ticker',
                'instruments/{instrument_id}/candles',
            ],
            'post': [
                'order',
                'orders',
                'cancel_order/{underlying}/{order_id}',
                'cancel_order/{underlying}/{client_oid}',
                'cancel_batch_orders/{underlying}',
                'amend_order/{underlying}',
                'amend_batch_orders/{underlying}',
            ],
        },
        'information': {
            'get': [
                '{currency}/long_short_ratio',
                '{currency}/volume',
                '{currency}/taker',
                '{currency}/sentiment',
                '{currency}/margin',
            ],
        },
        'index': {
            'get': [
                '{instrument_id}/constituents',
            ],
        },
    },
    'fees': {
        'trading': {
            'taker': 0.002,
            'maker': 0.001,
        },
        'spot': {
            'taker': 0.0015,
            'maker': 0.0010,
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'password': True,
    },
    'exceptions': {
        # http error codes
        # 400 Bad Request — Invalid request format
        # 401 Unauthorized — Invalid API Key
        # 403 Forbidden — You do not have access to the requested resource
        # 404 Not Found
        # 429 Client Error: Too Many Requests for url
        # 500 Internal Server Error — We had a problem with our server
        'exact': {
            '1': ExchangeError,  # {"code": 1, "message": "System error"}
            # undocumented
            'failure to get a peer from the ring-balancer': ExchangeNotAvailable,  # {"message": "failure to get a peer from the ring-balancer"}
            'Server is busy, please try again.': ExchangeNotAvailable,  # {"message": "Server is busy, please try again."}
            'An unexpected error occurred': ExchangeError,  # {"message": "An unexpected error occurred"}
            'System error': ExchangeError,  # {"error_message":"System error","message":"System error"}
            '4010': PermissionDenied,  # {"code": 4010, "message": "For the security of your funds, withdrawals are not permitted within 24 hours after changing fund password  / mobile number / Google Authenticator settings "}
            # common
            # '0': ExchangeError,  # 200 successful,when the order placement / cancellation / operation is successful
            '4001': ExchangeError,  # no data received in 30s
            '4002': ExchangeError,  # Buffer full. cannot write data
            # --------------------------------------------------------
            '30001': AuthenticationError,  # {"code": 30001, "message": 'request header "OK_ACCESS_KEY" cannot be blank'}
            '30002': AuthenticationError,  # {"code": 30002, "message": 'request header "OK_ACCESS_SIGN" cannot be blank'}
            '30003': AuthenticationError,  # {"code": 30003, "message": 'request header "OK_ACCESS_TIMESTAMP" cannot be blank'}
            '30004': AuthenticationError,  # {"code": 30004, "message": 'request header "OK_ACCESS_PASSPHRASE" cannot be blank'}
            '30005': InvalidNonce,  # {"code": 30005, "message": "invalid OK_ACCESS_TIMESTAMP"}
            '30006': AuthenticationError,  # {"code": 30006, "message": "invalid OK_ACCESS_KEY"}
            '30007': BadRequest,  # {"code": 30007, "message": 'invalid Content_Type, please use "application/json" format'}
            '30008': RequestTimeout,  # {"code": 30008, "message": "timestamp request expired"}
            '30009': ExchangeError,  # {"code": 30009, "message": "system error"}
            '30010': AuthenticationError,  # {"code": 30010, "message": "API validation failed"}
            '30011': PermissionDenied,  # {"code": 30011, "message": "invalid IP"}
            '30012': AuthenticationError,  # {"code": 30012, "message": "invalid authorization"}
            '30013': AuthenticationError,  # {"code": 30013, "message": "invalid sign"}
            '30014': DDoSProtection,  # {"code": 30014, "message": "request too frequent"}
            '30015': AuthenticationError,  # {"code": 30015, "message": 'request header "OK_ACCESS_PASSPHRASE" incorrect'}
            '30016': ExchangeError,  # {"code": 30015, "message": "you are using v1 apiKey, please use v1 endpoint. If you would like to use v3 endpoint, please subscribe to v3 apiKey"}
            '30017': ExchangeError,  # {"code": 30017, "message": "apikey's broker id does not match"}
            '30018': ExchangeError,  # {"code": 30018, "message": "apikey's domain does not match"}
            '30019': ExchangeNotAvailable,  # {"code": 30019, "message": "Api is offline or unavailable"}
            '30020': BadRequest,  # {"code": 30020, "message": "body cannot be blank"}
            '30021': BadRequest,  # {"code": 30021, "message": "Json data format error"}, {"code": 30021, "message": "json data format error"}
            '30022': PermissionDenied,  # {"code": 30022, "message": "Api has been frozen"}
            '30023': BadRequest,  # {"code": 30023, "message": "{0} parameter cannot be blank"}
            '30024': BadSymbol,  # {"code":30024,"message":"\"instrument_id\" is an invalid parameter"}
            '30025': BadRequest,  # {"code": 30025, "message": "{0} parameter category error"}
            '30026': DDoSProtection,  # {"code": 30026, "message": "requested too frequent"}
            '30027': AuthenticationError,  # {"code": 30027, "message": "login failure"}
            '30028': PermissionDenied,  # {"code": 30028, "message": "unauthorized execution"}
            '30029': AccountSuspended,  # {"code": 30029, "message": "account suspended"}
            '30030': ExchangeNotAvailable,  # {"code": 30030, "message": "endpoint request failed. Please try again"}
            '30031': BadRequest,  # {"code": 30031, "message": "token does not exist"}
            '30032': BadSymbol,  # {"code": 30032, "message": "pair does not exist"}
            '30033': BadRequest,  # {"code": 30033, "message": "exchange domain does not exist"}
            '30034': ExchangeError,  # {"code": 30034, "message": "exchange ID does not exist"}
            '30035': ExchangeError,  # {"code": 30035, "message": "trading is not supported in self website"}
            '30036': ExchangeError,  # {"code": 30036, "message": "no relevant data"}
            '30037': ExchangeNotAvailable,  # {"code": 30037, "message": "endpoint is offline or unavailable"}
            # '30038': AuthenticationError,  # {"code": 30038, "message": "user does not exist"}
            '30038': OnMaintenance,  # {"client_oid":"","code":"30038","error_code":"30038","error_message":"Matching engine is being upgraded. Please try in about 1 minute.","message":"Matching engine is being upgraded. Please try in about 1 minute.","order_id":"-1","result":false}
            '30044': RequestTimeout,  # {"code":30044, "message":"Endpoint request timeout"}
            # futures
            '32001': AccountSuspended,  # {"code": 32001, "message": "futures account suspended"}
            '32002': PermissionDenied,  # {"code": 32002, "message": "futures account does not exist"}
            '32003': CancelPending,  # {"code": 32003, "message": "canceling, please wait"}
            '32004': ExchangeError,  # {"code": 32004, "message": "you have no unfilled orders"}
            '32005': InvalidOrder,  # {"code": 32005, "message": "max order quantity"}
            '32006': InvalidOrder,  # {"code": 32006, "message": "the order price or trigger price exceeds USD 1 million"}
            '32007': InvalidOrder,  # {"code": 32007, "message": "leverage level must be the same for orders on the same side of the contract"}
            '32008': InvalidOrder,  # {"code": 32008, "message": "Max. positions to open(cross margin)"}
            '32009': InvalidOrder,  # {"code": 32009, "message": "Max. positions to open(fixed margin)"}
            '32010': ExchangeError,  # {"code": 32010, "message": "leverage cannot be changed with open positions"}
            '32011': ExchangeError,  # {"code": 32011, "message": "futures status error"}
            '32012': ExchangeError,  # {"code": 32012, "message": "futures order update error"}
            '32013': ExchangeError,  # {"code": 32013, "message": "token type is blank"}
            '32014': ExchangeError,  # {"code": 32014, "message": "your number of contracts closing is larger than the number of contracts available"}
            '32015': ExchangeError,  # {"code": 32015, "message": "margin ratio is lower than 100% before opening positions"}
            '32016': ExchangeError,  # {"code": 32016, "message": "margin ratio is lower than 100% after opening position"}
            '32017': ExchangeError,  # {"code": 32017, "message": "no BBO"}
            '32018': ExchangeError,  # {"code": 32018, "message": "the order quantity is less than 1, please try again"}
            '32019': ExchangeError,  # {"code": 32019, "message": "the order price deviates from the price of the previous minute by more than 3%"}
            '32020': ExchangeError,  # {"code": 32020, "message": "the price is not in the range of the price limit"}
            '32021': ExchangeError,  # {"code": 32021, "message": "leverage error"}
            '32022': ExchangeError,  # {"code": 32022, "message": "self function is not supported in your country or region according to the regulations"}
            '32023': ExchangeError,  # {"code": 32023, "message": "self account has outstanding loan"}
            '32024': ExchangeError,  # {"code": 32024, "message": "order cannot be placed during delivery"}
            '32025': ExchangeError,  # {"code": 32025, "message": "order cannot be placed during settlement"}
            '32026': ExchangeError,  # {"code": 32026, "message": "your account is restricted from opening positions"}
            '32027': ExchangeError,  # {"code": 32027, "message": "cancelled over 20 orders"}
            '32028': ExchangeError,  # {"code": 32028, "message": "account is suspended and liquidated"}
            '32029': ExchangeError,  # {"code": 32029, "message": "order info does not exist"}
            '32030': InvalidOrder,  # The order cannot be cancelled
            '32031': ArgumentsRequired,  # client_oid or order_id is required.
            '32038': AuthenticationError,  # User does not exist
            '32040': ExchangeError,  # User have open contract orders or position
            '32044': ExchangeError,  # {"code": 32044, "message": "The margin ratio after submitting self order is lower than the minimum requirement({0}) for your tier."}
            '32045': ExchangeError,  # String of commission over 1 million
            '32046': ExchangeError,  # Each user can hold up to 10 trade plans at the same time
            '32047': ExchangeError,  # system error
            '32048': InvalidOrder,  # Order strategy track range error
            '32049': ExchangeError,  # Each user can hold up to 10 track plans at the same time
            '32050': InvalidOrder,  # Order strategy rang error
            '32051': InvalidOrder,  # Order strategy ice depth error
            '32052': ExchangeError,  # String of commission over 100 thousand
            '32053': ExchangeError,  # Each user can hold up to 6 ice plans at the same time
            '32057': ExchangeError,  # The order price is zero. Market-close-all function cannot be executed
            '32054': ExchangeError,  # Trade not allow
            '32055': InvalidOrder,  # cancel order error
            '32056': ExchangeError,  # iceberg per order average should between {0}-{1} contracts
            '32058': ExchangeError,  # Each user can hold up to 6 initiative plans at the same time
            '32059': InvalidOrder,  # Total amount should exceed per order amount
            '32060': InvalidOrder,  # Order strategy type error
            '32061': InvalidOrder,  # Order strategy initiative limit error
            '32062': InvalidOrder,  # Order strategy initiative range error
            '32063': InvalidOrder,  # Order strategy initiative rate error
            '32064': ExchangeError,  # Time Stringerval of orders should set between 5-120s
            '32065': ExchangeError,  # Close amount exceeds the limit of Market-close-all(999 for BTC, and 9999 for the rest tokens)
            '32066': ExchangeError,  # You have open orders. Please cancel all open orders before changing your leverage level.
            '32067': ExchangeError,  # Account equity < required margin in self setting. Please adjust your leverage level again.
            '32068': ExchangeError,  # The margin for self position will fall short of the required margin in self setting. Please adjust your leverage level or increase your margin to proceed.
            '32069': ExchangeError,  # Target leverage level too low. Your account balance is insufficient to cover the margin required. Please adjust the leverage level again.
            '32070': ExchangeError,  # Please check open position or unfilled order
            '32071': ExchangeError,  # Your current liquidation mode does not support self action.
            '32072': ExchangeError,  # The highest available margin for your order’s tier is {0}. Please edit your margin and place a new order.
            '32073': ExchangeError,  # The action does not apply to the token
            '32074': ExchangeError,  # The number of contracts of your position, open orders, and the current order has exceeded the maximum order limit of self asset.
            '32075': ExchangeError,  # Account risk rate breach
            '32076': ExchangeError,  # Liquidation of the holding position(s) at market price will require cancellation of all pending close orders of the contracts.
            '32077': ExchangeError,  # Your margin for self asset in futures account is insufficient and the position has been taken over for liquidation.(You will not be able to place orders, close positions, transfer funds, or add margin during self period of time. Your account will be restored after the liquidation is complete.)
            '32078': ExchangeError,  # Please cancel all open orders before switching the liquidation mode(Please cancel all open orders before switching the liquidation mode)
            '32079': ExchangeError,  # Your open positions are at high risk.(Please add margin or reduce positions before switching the mode)
            '32080': ExchangeError,  # Funds cannot be transferred out within 30 minutes after futures settlement
            '32083': ExchangeError,  # The number of contracts should be a positive multiple of %%. Please place your order again
            # token and margin trading
            '33001': PermissionDenied,  # {"code": 33001, "message": "margin account for self pair is not enabled yet"}
            '33002': AccountSuspended,  # {"code": 33002, "message": "margin account for self pair is suspended"}
            '33003': InsufficientFunds,  # {"code": 33003, "message": "no loan balance"}
            '33004': ExchangeError,  # {"code": 33004, "message": "loan amount cannot be smaller than the minimum limit"}
            '33005': ExchangeError,  # {"code": 33005, "message": "repayment amount must exceed 0"}
            '33006': ExchangeError,  # {"code": 33006, "message": "loan order not found"}
            '33007': ExchangeError,  # {"code": 33007, "message": "status not found"}
            '33008': InsufficientFunds,  # {"code": 33008, "message": "loan amount cannot exceed the maximum limit"}
            '33009': ExchangeError,  # {"code": 33009, "message": "user ID is blank"}
            '33010': ExchangeError,  # {"code": 33010, "message": "you cannot cancel an order during session 2 of call auction"}
            '33011': ExchangeError,  # {"code": 33011, "message": "no new market data"}
            '33012': ExchangeError,  # {"code": 33012, "message": "order cancellation failed"}
            '33013': InvalidOrder,  # {"code": 33013, "message": "order placement failed"}
            '33014': OrderNotFound,  # {"code": 33014, "message": "order does not exist"}
            '33015': InvalidOrder,  # {"code": 33015, "message": "exceeded maximum limit"}
            '33016': ExchangeError,  # {"code": 33016, "message": "margin trading is not open for self token"}
            '33017': InsufficientFunds,  # {"code": 33017, "message": "insufficient balance"}
            '33018': ExchangeError,  # {"code": 33018, "message": "self parameter must be smaller than 1"}
            '33020': ExchangeError,  # {"code": 33020, "message": "request not supported"}
            '33021': BadRequest,  # {"code": 33021, "message": "token and the pair do not match"}
            '33022': InvalidOrder,  # {"code": 33022, "message": "pair and the order do not match"}
            '33023': ExchangeError,  # {"code": 33023, "message": "you can only place market orders during call auction"}
            '33024': InvalidOrder,  # {"code": 33024, "message": "trading amount too small"}
            '33025': InvalidOrder,  # {"code": 33025, "message": "base token amount is blank"}
            '33026': ExchangeError,  # {"code": 33026, "message": "transaction completed"}
            '33027': InvalidOrder,  # {"code": 33027, "message": "cancelled order or order cancelling"}
            '33028': InvalidOrder,  # {"code": 33028, "message": "the decimal places of the trading price exceeded the limit"}
            '33029': InvalidOrder,  # {"code": 33029, "message": "the decimal places of the trading size exceeded the limit"}
            '33034': ExchangeError,  # {"code": 33034, "message": "You can only place limit order after Call Auction has started"}
            '33035': ExchangeError,  # This type of order cannot be canceled(This type of order cannot be canceled)
            '33036': ExchangeError,  # Exceeding the limit of entrust order
            '33037': ExchangeError,  # The buy order price should be lower than 130% of the trigger price
            '33038': ExchangeError,  # The sell order price should be higher than 70% of the trigger price
            '33039': ExchangeError,  # The limit of callback rate is 0 < x <= 5%
            '33040': ExchangeError,  # The trigger price of a buy order should be lower than the latest transaction price
            '33041': ExchangeError,  # The trigger price of a sell order should be higher than the latest transaction price
            '33042': ExchangeError,  # The limit of price variance is 0 < x <= 1%
            '33043': ExchangeError,  # The total amount must be larger than 0
            '33044': ExchangeError,  # The average amount should be 1/1000 * total amount <= x <= total amount
            '33045': ExchangeError,  # The price should not be 0, including trigger price, order price, and price limit
            '33046': ExchangeError,  # Price variance should be 0 < x <= 1%
            '33047': ExchangeError,  # Sweep ratio should be 0 < x <= 100%
            '33048': ExchangeError,  # Per order limit: Total amount/1000 < x <= Total amount
            '33049': ExchangeError,  # Total amount should be X > 0
            '33050': ExchangeError,  # Time interval should be 5 <= x <= 120s
            '33051': ExchangeError,  # cancel order number not higher limit: plan and track entrust no more than 10, ice and time entrust no more than 6
            '33059': BadRequest,  # {"code": 33059, "message": "client_oid or order_id is required"}
            '33060': BadRequest,  # {"code": 33060, "message": "Only fill in either parameter client_oid or order_id"}
            '33061': ExchangeError,  # Value of a single market price order cannot exceed 100,000 USD
            '33062': ExchangeError,  # The leverage ratio is too high. The borrowed position has exceeded the maximum position of self leverage ratio. Please readjust the leverage ratio
            '33063': ExchangeError,  # Leverage multiple is too low, there is insufficient margin in the account, please readjust the leverage ratio
            '33064': ExchangeError,  # The setting of the leverage ratio cannot be less than 2, please readjust the leverage ratio
            '33065': ExchangeError,  # Leverage ratio exceeds maximum leverage ratio, please readjust leverage ratio
            '33085': InvalidOrder,  # The value of the position and buying order has reached the position limit, and no further buying is allowed.
            # account
            '21009': ExchangeError,  # Funds cannot be transferred out within 30 minutes after swap settlement(Funds cannot be transferred out within 30 minutes after swap settlement)
            '34001': PermissionDenied,  # {"code": 34001, "message": "withdrawal suspended"}
            '34002': InvalidAddress,  # {"code": 34002, "message": "please add a withdrawal address"}
            '34003': ExchangeError,  # {"code": 34003, "message": "sorry, self token cannot be withdrawn to xx at the moment"}
            '34004': ExchangeError,  # {"code": 34004, "message": "withdrawal fee is smaller than minimum limit"}
            '34005': ExchangeError,  # {"code": 34005, "message": "withdrawal fee exceeds the maximum limit"}
            '34006': ExchangeError,  # {"code": 34006, "message": "withdrawal amount is lower than the minimum limit"}
            '34007': ExchangeError,  # {"code": 34007, "message": "withdrawal amount exceeds the maximum limit"}
            '34008': InsufficientFunds,  # {"code": 34008, "message": "insufficient balance"}
            '34009': ExchangeError,  # {"code": 34009, "message": "your withdrawal amount exceeds the daily limit"}
            '34010': ExchangeError,  # {"code": 34010, "message": "transfer amount must be larger than 0"}
            '34011': ExchangeError,  # {"code": 34011, "message": "conditions not met"}
            '34012': ExchangeError,  # {"code": 34012, "message": "the minimum withdrawal amount for NEO is 1, and the amount must be an integer"}
            '34013': ExchangeError,  # {"code": 34013, "message": "please transfer"}
            '34014': ExchangeError,  # {"code": 34014, "message": "transfer limited"}
            '34015': ExchangeError,  # {"code": 34015, "message": "subaccount does not exist"}
            '34016': PermissionDenied,  # {"code": 34016, "message": "transfer suspended"}
            '34017': AccountSuspended,  # {"code": 34017, "message": "account suspended"}
            '34018': AuthenticationError,  # {"code": 34018, "message": "incorrect trades password"}
            '34019': PermissionDenied,  # {"code": 34019, "message": "please bind your email before withdrawal"}
            '34020': PermissionDenied,  # {"code": 34020, "message": "please bind your funds password before withdrawal"}
            '34021': InvalidAddress,  # {"code": 34021, "message": "Not verified address"}
            '34022': ExchangeError,  # {"code": 34022, "message": "Withdrawals are not available for sub accounts"}
            '34023': PermissionDenied,  # {"code": 34023, "message": "Please enable futures trading before transferring your funds"}
            '34026': RateLimitExceeded,  # transfer too frequently(transfer too frequently)
            '34036': ExchangeError,  # Parameter is incorrect, please refer to API documentation
            '34037': ExchangeError,  # Get the sub-account balance interface, account type is not supported
            '34038': ExchangeError,  # Since your C2C transaction is unusual, you are restricted from fund transfer. Please contact our customer support to cancel the restriction
            '34039': ExchangeError,  # You are now restricted from transferring out your funds due to abnormal trades on C2C Market. Please transfer your fund on our website or app instead to verify your identity
            # swap
            '35001': ExchangeError,  # {"code": 35001, "message": "Contract does not exist"}
            '35002': ExchangeError,  # {"code": 35002, "message": "Contract settling"}
            '35003': ExchangeError,  # {"code": 35003, "message": "Contract paused"}
            '35004': ExchangeError,  # {"code": 35004, "message": "Contract pending settlement"}
            '35005': AuthenticationError,  # {"code": 35005, "message": "User does not exist"}
            '35008': InvalidOrder,  # {"code": 35008, "message": "Risk ratio too high"}
            '35010': InvalidOrder,  # {"code": 35010, "message": "Position closing too large"}
            '35012': InvalidOrder,  # {"code": 35012, "message": "Incorrect order size"}
            '35014': InvalidOrder,  # {"code": 35014, "message": "Order price is not within limit"}
            '35015': InvalidOrder,  # {"code": 35015, "message": "Invalid leverage level"}
            '35017': ExchangeError,  # {"code": 35017, "message": "Open orders exist"}
            '35019': InvalidOrder,  # {"code": 35019, "message": "Order size too large"}
            '35020': InvalidOrder,  # {"code": 35020, "message": "Order price too high"}
            '35021': InvalidOrder,  # {"code": 35021, "message": "Order size exceeded current tier limit"}
            '35022': BadRequest,  # {"code": 35022, "message": "Contract status error"}
            '35024': BadRequest,  # {"code": 35024, "message": "Contract not initialized"}
            '35025': InsufficientFunds,  # {"code": 35025, "message": "No account balance"}
            '35026': BadRequest,  # {"code": 35026, "message": "Contract settings not initialized"}
            '35029': OrderNotFound,  # {"code": 35029, "message": "Order does not exist"}
            '35030': InvalidOrder,  # {"code": 35030, "message": "Order size too large"}
            '35031': InvalidOrder,  # {"code": 35031, "message": "Cancel order size too large"}
            '35032': ExchangeError,  # {"code": 35032, "message": "Invalid user status"}
            '35037': ExchangeError,  # No last traded price in cache
            '35039': InsufficientFunds,  # {"code": 35039, "message": "Open order quantity exceeds limit"}
            '35040': InvalidOrder,  # {"error_message":"Invalid order type","result":"true","error_code":"35040","order_id":"-1"}
            '35044': ExchangeError,  # {"code": 35044, "message": "Invalid order status"}
            '35046': InsufficientFunds,  # {"code": 35046, "message": "Negative account balance"}
            '35047': InsufficientFunds,  # {"code": 35047, "message": "Insufficient account balance"}
            '35048': ExchangeError,  # {"code": 35048, "message": "User contract is frozen and liquidating"}
            '35049': InvalidOrder,  # {"code": 35049, "message": "Invalid order type"}
            '35050': InvalidOrder,  # {"code": 35050, "message": "Position settings are blank"}
            '35052': InsufficientFunds,  # {"code": 35052, "message": "Insufficient cross margin"}
            '35053': ExchangeError,  # {"code": 35053, "message": "Account risk too high"}
            '35055': InsufficientFunds,  # {"code": 35055, "message": "Insufficient account balance"}
            '35057': ExchangeError,  # {"code": 35057, "message": "No last traded price"}
            '35058': ExchangeError,  # {"code": 35058, "message": "No limit"}
            '35059': BadRequest,  # {"code": 35059, "message": "client_oid or order_id is required"}
            '35060': BadRequest,  # {"code": 35060, "message": "Only fill in either parameter client_oid or order_id"}
            '35061': BadRequest,  # {"code": 35061, "message": "Invalid instrument_id"}
            '35062': InvalidOrder,  # {"code": 35062, "message": "Invalid match_price"}
            '35063': InvalidOrder,  # {"code": 35063, "message": "Invalid order_size"}
            '35064': InvalidOrder,  # {"code": 35064, "message": "Invalid client_oid"}
            '35066': InvalidOrder,  # Order interval error
            '35067': InvalidOrder,  # Time-weighted order ratio error
            '35068': InvalidOrder,  # Time-weighted order range error
            '35069': InvalidOrder,  # Time-weighted single transaction limit error
            '35070': InvalidOrder,  # Algo order type error
            '35071': InvalidOrder,  # Order total must be larger than single order limit
            '35072': InvalidOrder,  # Maximum 6 unfulfilled time-weighted orders can be held at the same time
            '35073': InvalidOrder,  # Order price is 0. Market-close-all not available
            '35074': InvalidOrder,  # Iceberg order single transaction average error
            '35075': InvalidOrder,  # Failed to cancel order
            '35076': InvalidOrder,  # LTC 20x leverage. Not allowed to open position
            '35077': InvalidOrder,  # Maximum 6 unfulfilled iceberg orders can be held at the same time
            '35078': InvalidOrder,  # Order amount exceeded 100,000
            '35079': InvalidOrder,  # Iceberg order price variance error
            '35080': InvalidOrder,  # Callback rate error
            '35081': InvalidOrder,  # Maximum 10 unfulfilled trail orders can be held at the same time
            '35082': InvalidOrder,  # Trail order callback rate error
            '35083': InvalidOrder,  # Each user can only hold a maximum of 10 unfulfilled stop-limit orders at the same time
            '35084': InvalidOrder,  # Order amount exceeded 1 million
            '35085': InvalidOrder,  # Order amount is not in the correct range
            '35086': InvalidOrder,  # Price exceeds 100 thousand
            '35087': InvalidOrder,  # Price exceeds 100 thousand
            '35088': InvalidOrder,  # Average amount error
            '35089': InvalidOrder,  # Price exceeds 100 thousand
            '35090': ExchangeError,  # No stop-limit orders available for cancelation
            '35091': ExchangeError,  # No trail orders available for cancellation
            '35092': ExchangeError,  # No iceberg orders available for cancellation
            '35093': ExchangeError,  # No trail orders available for cancellation
            '35094': ExchangeError,  # Stop-limit order last traded price error
            '35095': BadRequest,  # Instrument_id error
            '35096': ExchangeError,  # Algo order status error
            '35097': ExchangeError,  # Order status and order ID cannot exist at the same time
            '35098': ExchangeError,  # An order status or order ID must exist
            '35099': ExchangeError,  # Algo order ID error
            '35102': RateLimitExceeded,  # {"error_message":"The operation that close all at market price is too frequent","result":"true","error_code":"35102","order_id":"-1"}
            # option
            '36001': BadRequest,  # Invalid underlying index.
            '36002': BadRequest,  # Instrument does not exist.
            '36005': ExchangeError,  # Instrument status is invalid.
            '36101': AuthenticationError,  # Account does not exist.
            '36102': PermissionDenied,  # Account status is invalid.
            '36103': PermissionDenied,  # Account is suspended due to ongoing liquidation.
            '36104': PermissionDenied,  # Account is not enabled for options trading.
            '36105': PermissionDenied,  # Please enable the account for option contract.
            '36106': PermissionDenied,  # Funds cannot be transferred in or out, as account is suspended.
            '36107': PermissionDenied,  # Funds cannot be transferred out within 30 minutes after option exercising or settlement.
            '36108': InsufficientFunds,  # Funds cannot be transferred in or out, as equity of the account is less than zero.
            '36109': PermissionDenied,  # Funds cannot be transferred in or out during option exercising or settlement.
            '36201': PermissionDenied,  # New order function is blocked.
            '36202': PermissionDenied,  # Account does not have permission to short option.
            '36203': InvalidOrder,  # Invalid format for client_oid.
            '36204': ExchangeError,  # Invalid format for request_id.
            '36205': BadRequest,  # Instrument id does not match underlying index.
            '36206': BadRequest,  # Order_id and client_oid can not be used at the same time.
            '36207': InvalidOrder,  # Either order price or fartouch price must be present.
            '36208': InvalidOrder,  # Either order price or size must be present.
            '36209': InvalidOrder,  # Either order_id or client_oid must be present.
            '36210': InvalidOrder,  # Either order_ids or client_oids must be present.
            '36211': InvalidOrder,  # Exceeding max batch size for order submission.
            '36212': InvalidOrder,  # Exceeding max batch size for oder cancellation.
            '36213': InvalidOrder,  # Exceeding max batch size for order amendment.
            '36214': ExchangeError,  # Instrument does not have valid bid/ask quote.
            '36216': OrderNotFound,  # Order does not exist.
            '36217': InvalidOrder,  # Order submission failed.
            '36218': InvalidOrder,  # Order cancellation failed.
            '36219': InvalidOrder,  # Order amendment failed.
            '36220': InvalidOrder,  # Order is pending cancel.
            '36221': InvalidOrder,  # Order qty is not valid multiple of lot size.
            '36222': InvalidOrder,  # Order price is breaching highest buy limit.
            '36223': InvalidOrder,  # Order price is breaching lowest sell limit.
            '36224': InvalidOrder,  # Exceeding max order size.
            '36225': InvalidOrder,  # Exceeding max open order count for instrument.
            '36226': InvalidOrder,  # Exceeding max open order count for underlying.
            '36227': InvalidOrder,  # Exceeding max open size across all orders for underlying
            '36228': InvalidOrder,  # Exceeding max available qty for instrument.
            '36229': InvalidOrder,  # Exceeding max available qty for underlying.
            '36230': InvalidOrder,  # Exceeding max position limit for underlying.
        },
        'broad': {
        },
    },
    'precisionMode': TICK_SIZE,
    'options': {
        'fetchOHLCV': {
            'type': 'Candles',  # Candles or HistoryCandles
        },
        'createMarketBuyOrderRequiresPrice': True,
        'fetchMarkets': ['spot'],
        'defaultType': 'spot',  # 'account', 'spot', 'margin', 'futures', 'swap', 'option'
        'auth': {
            'time': 'public',
            'currencies': 'private',
            'instruments': 'public',
            'rate': 'public',
            '{instrument_id}/constituents': 'public',
        },
        'warnOnFetchCurrenciesWithoutAuthorization': False,
    },
    'commonCurrencies': {
        # OKEX refers to ERC20 version of Aeternity(AEToken)
        'AE': 'AET',  # https://github.com/ccxt/ccxt/issues/4981
        'BOX': 'DefiBox',
        'HOT': 'Hydro Protocol',
        'HSR': 'HC',
        'MAG': 'Maggie',
        'SBTC': 'Super Bitcoin',
        'TRADE': 'Unitrade',
        'YOYO': 'YOYOW',
        'WIN': 'WinToken',  # https://github.com/ccxt/ccxt/issues/5701
    },
},
{
    'id': 'binance',
    'name': 'Binance',
    'countries': ['JP', 'MT'],  # Japan, Malta
    'rateLimit': 50,
    'certified': True,
    'pro': True,
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': True,
        'swap': True,
        'future': True,
        'option': None,
        'addMargin': True,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': None,
        'createDepositAddress': None,
        'createOrder': True,
        'createReduceOnlyOrder': True,
        'deposit': None,
        'fetchAccounts': None,
        'fetchBalance': True,
        'fetchBidsAsks': True,
        'fetchBorrowRate': True,
        'fetchBorrowRateHistories': True,
        'fetchBorrowRateHistory': True,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchCanceledOrders': None,
        'fetchClosedOrder': None,
        'fetchClosedOrders': 'emulated',
        'fetchCurrencies': True,
        'fetchDeposit': None,
        'fetchDepositAddress': True,
        'fetchDepositAddresses': None,
        'fetchDepositAddressesByNetwork': None,
        'fetchDeposits': True,
        'fetchFundingFee': None,
        'fetchFundingFees': True,
        'fetchFundingHistory': True,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': True,
        'fetchFundingRates': True,
        'fetchIndexOHLCV': True,
        'fetchIsolatedPositions': None,
        'fetchL3OrderBook': None,
        'fetchLedger': None,
        'fetchLeverage': None,
        'fetchLeverageTiers': True,
        'fetchMarketLeverageTiers': 'emulated',
        'fetchMarkets': True,
        'fetchMarkOHLCV': True,
        'fetchMyBuys': None,
        'fetchMySells': None,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': None,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': None,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPosition': None,
        'fetchPositions': True,
        'fetchPositionsRisk': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': True,
        'fetchTradingLimits': None,
        'fetchTransactions': False,
        'fetchTransfers': True,
        'fetchWithdrawal': False,
        'fetchWithdrawals': True,
        'fetchWithdrawalWhitelist': False,
        'reduceMargin': True,
        'setLeverage': True,
        'setMarginMode': True,
        'setPositionMode': True,
        'signIn': False,
        'transfer': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '2h': '2h',
        '4h': '4h',
        '6h': '6h',
        '8h': '8h',
        '12h': '12h',
        '1d': '1d',
        '3d': '3d',
        '1w': '1w',
        '1M': '1M',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',
        'test': {
            'dapiPublic': 'https://testnet.binancefuture.com/dapi/v1',
            'dapiPrivate': 'https://testnet.binancefuture.com/dapi/v1',
            'vapiPublic': 'https://testnet.binanceops.com/vapi/v1',
            'vapiPrivate': 'https://testnet.binanceops.com/vapi/v1',
            'fapiPublic': 'https://testnet.binancefuture.com/fapi/v1',
            'fapiPrivate': 'https://testnet.binancefuture.com/fapi/v1',
            'fapiPrivateV2': 'https://testnet.binancefuture.com/fapi/v2',
            'public': 'https://testnet.binance.vision/api/v3',
            'private': 'https://testnet.binance.vision/api/v3',
            'v1': 'https://testnet.binance.vision/api/v1',
        },
        'api': {
            'wapi': 'https://api.binance.com/wapi/v3',
            'sapi': 'https://api.binance.com/sapi/v1',
            'dapiPublic': 'https://dapi.binance.com/dapi/v1',
            'dapiPrivate': 'https://dapi.binance.com/dapi/v1',
            'vapiPublic': 'https://vapi.binance.com/vapi/v1',
            'vapiPrivate': 'https://vapi.binance.com/vapi/v1',
            'dapiPrivateV2': 'https://dapi.binance.com/dapi/v2',
            'dapiData': 'https://dapi.binance.com/futures/data',
            'fapiPublic': 'https://fapi.binance.com/fapi/v1',
            'fapiPrivate': 'https://fapi.binance.com/fapi/v1',
            'fapiData': 'https://fapi.binance.com/futures/data',
            'fapiPrivateV2': 'https://fapi.binance.com/fapi/v2',
            'public': 'https://api.binance.com/api/v3',
            'private': 'https://api.binance.com/api/v3',
            'v1': 'https://api.binance.com/api/v1',
        },
        'www': 'https://www.binance.com',
        'referral': {
            'url': 'https://www.binance.com/en/register?ref=D7YA7CLY',
            'discount': 0.1,
        },
        'doc': [
            'https://binance-docs.github.io/apidocs/spot/en',
        ],
        'api_management': 'https://www.binance.com/en/usercenter/settings/api-management',
        'fees': 'https://www.binance.com/en/fee/schedule',
    },
    'depth': 1,
    'api': {
        # the API structure below will need 3-layer apidefs
        'sapi': {
            # IP(api) = 1200 per minute =>(rateLimit = 50)
            # IP(sapi) request rate limit of 12 000 per minute
            # 1 IP(sapi) => cost = 0.1
            # 10 IP(sapi) => cost = 1
            # UID(sapi) request rate limit of 180 000 per minute
            # 1 UID(sapi) => cost = 1200 / 180 000 = 0.006667
            'get': {
                'system/status': 0.1,
                # these endpoints require self.apiKey
                'accountSnapshot': 240,  # Weight(IP): 2400 => cost = 0.1 * 2400 = 240
                'margin/asset': 1,  # Weight(IP): 10 => cost = 0.1 * 10 = 1
                'margin/pair': 1,
                'margin/allAssets': 0.1,
                'margin/allPairs': 0.1,
                'margin/priceIndex': 1,
                # these endpoints require self.apiKey + self.secret
                'asset/assetDividend': 1,
                'asset/dribblet': 0.1,
                'asset/transfer': 0.1,
                'asset/assetDetail': 0.1,
                'asset/tradeFee': 0.1,
                'margin/loan': 1,
                'margin/repay': 1,
                'margin/account': 1,
                'margin/transfer': 0.1,
                'margin/interestHistory': 0.1,
                'margin/forceLiquidationRec': 0.1,
                'margin/order': 1,
                'margin/openOrders': 1,
                'margin/allOrders': 20,  # Weight(IP): 200 => cost = 0.1 * 200 = 20
                'margin/myTrades': 1,
                'margin/maxBorrowable': 5,  # Weight(IP): 50 => cost = 0.1 * 50 = 5
                'margin/maxTransferable': 5,
                'margin/isolated/transfer': 0.1,
                'margin/isolated/account': 1,
                'margin/isolated/pair': 1,
                'margin/isolated/allPairs': 1,
                'margin/isolated/accountLimit': 0.1,
                'margin/interestRateHistory': 0.1,
                'margin/orderList': 1,
                'margin/allOrderList': 20,  # Weight(IP): 200 => cost = 0.1 * 200 = 20
                'margin/openOrderList': 1,
                'margin/crossMarginData': {'cost': 0.1, 'noCoin': 0.5},
                'margin/isolatedMarginData': {'cost': 0.1, 'noCoin': 1},
                'margin/isolatedMarginTier': 0.1,
                'loan/income': 40,  # Weight(UID): 6000 => cost = 0.006667 * 6000 = 40
                'fiat/orders': 0.1,
                'fiat/payments': 0.1,
                'futures/transfer': 1,
                'futures/loan/borrow/history': 1,
                'futures/loan/repay/history': 1,
                'futures/loan/wallet': 1,
                'futures/loan/configs': 1,
                'futures/loan/calcAdjustLevel': 5,  # Weight(IP): 50 => cost = 0.1 * 50 = 5
                'futures/loan/calcMaxAdjustAmount': 5,
                'futures/loan/adjustCollateral/history': 1,
                'futures/loan/liquidationHistory': 1,
                'rebate/taxQuery': 20.001,  # Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                # https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
                'capital/config/getall': 1,  # get networks for withdrawing USDT ERC20 vs USDT Omni
                'capital/deposit/address': 1,
                'capital/deposit/hisrec': 0.1,
                'capital/deposit/subAddress': 0.1,
                'capital/deposit/subHisrec': 0.1,
                'capital/withdraw/history': 0.1,
                'convert/tradeFlow': 20.001,  # Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                'account/status': 0.1,
                'account/apiTradingStatus': 0.1,
                'account/apiRestrictions/ipRestriction': 0.1,
                'bnbBurn': 0.1,
                # 'sub-account/assets': 1,(v3 endpoint)
                'sub-account/futures/account': 1,
                'sub-account/futures/accountSummary': 0.1,
                'sub-account/futures/positionRisk': 1,
                'sub-account/futures/internalTransfer': 0.1,
                'sub-account/list': 0.1,
                'sub-account/margin/account': 1,
                'sub-account/margin/accountSummary': 1,
                'sub-account/spotSummary': 0.1,
                'sub-account/status': 1,
                'sub-account/sub/transfer/history': 0.1,
                'sub-account/transfer/subUserHistory': 0.1,
                'sub-account/universalTransfer': 0.1,
                'managed-subaccount/asset': 0.1,
                # lending endpoints
                'lending/daily/product/list': 0.1,
                'lending/daily/userLeftQuota': 0.1,
                'lending/daily/userRedemptionQuota': 0.1,
                'lending/daily/token/position': 0.1,
                'lending/union/account': 0.1,
                'lending/union/purchaseRecord': 0.1,
                'lending/union/redemptionRecord': 0.1,
                'lending/union/interestHistory': 0.1,
                'lending/project/list': 0.1,
                'lending/project/position/list': 0.1,
                # mining endpoints
                'mining/pub/algoList': 0.1,
                'mining/pub/coinList': 0.1,
                'mining/worker/detail': 0.5,  # Weight(IP): 5 => cost = 0.1 * 5 = 0.5
                'mining/worker/list': 0.5,
                'mining/payment/list': 0.5,
                'mining/statistics/user/status': 0.5,
                'mining/statistics/user/list': 0.5,
                'mining/payment/uid': 0.5,
                # liquid swap endpoints
                'bswap/pools': 0.1,
                'bswap/liquidity': {'cost': 0.1, 'noPoolId': 1},
                'bswap/liquidityOps': 20.001,  # Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                'bswap/quote': 1.00005,  # Weight(UID): 150 => cost = 0.006667 * 150 = 1.00005
                'bswap/swap': 20.001,  # Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                'bswap/poolConfigure': 1.00005,  # Weight(UID): 150 => cost = 0.006667 * 150 = 1.00005
                'bswap/addLiquidityPreview': 1.00005,  # Weight(UID): 150 => cost = 0.006667 * 150 = 1.00005
                'bswap/removeLiquidityPreview': 1.00005,  # Weight(UID): 150 => cost = 0.006667 * 150 = 1.00005
                'bswap/unclaimedRewards': 6.667,  # Weight(UID): 1000 => cost = 0.006667 * 1000 = 6.667
                'bswap/claimedHistory': 6.667,  # Weight(UID): 1000 => cost = 0.006667 * 1000 = 6.667
                # leveraged token endpoints
                'blvt/tokenInfo': 0.1,
                'blvt/subscribe/record': 0.1,
                'blvt/redeem/record': 0.1,
                'blvt/userLimit': 0.1,
                # broker api TODO(NOT IN DOCS)
                'apiReferral/ifNewUser': 1,
                'apiReferral/customization': 1,
                'apiReferral/userCustomization': 1,
                'apiReferral/rebate/recentRecord': 1,
                'apiReferral/rebate/historicalRecord': 1,
                'apiReferral/kickback/recentRecord': 1,
                'apiReferral/kickback/historicalRecord': 1,
                # brokerage API TODO https://binance-docs.github.io/Brokerage-API/General/ does not state ratelimits
                'broker/subAccountApi': 1,
                'broker/subAccount': 1,
                'broker/subAccountApi/commission/futures': 1,
                'broker/subAccountApi/commission/coinFutures': 1,
                'broker/info': 1,
                'broker/transfer': 1,
                'broker/transfer/futures': 1,
                'broker/rebate/recentRecord': 1,
                'broker/rebate/historicalRecord': 1,
                'broker/subAccount/bnbBurn/status': 1,
                'broker/subAccount/depositHist': 1,
                'broker/subAccount/spotSummary': 1,
                'broker/subAccount/marginSummary': 1,
                'broker/subAccount/futuresSummary': 1,
                'broker/rebate/futures/recentRecord': 1,
                'broker/subAccountApi/ipRestriction': 1,
                'broker/universalTransfer': 1,
                # v2 not supported yet
                # GET /sapi/v2/broker/subAccount/futuresSummary
                'account/apiRestrictions': 0.1,
                # c2c / p2p
                'c2c/orderMatch/listUserOrderHistory': 0.1,
                # nft endpoints
                'nft/history/transactions': 20.001,  # Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                'nft/history/deposit': 20.001,
                'nft/history/withdraw': 20.001,
                'nft/user/getAsset': 20.001,
                'pay/transactions': 20.001,  # Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                'giftcard/verify': 0.1,
            },
            'post': {
                'asset/dust': 0.06667,  # Weight(UID): 10 => cost = 0.006667 * 10 = 0.06667
                'asset/transfer': 0.1,
                'asset/get-funding-asset': 0.1,
                'account/disableFastWithdrawSwitch': 0.1,
                'account/enableFastWithdrawSwitch': 0.1,
                # 'account/apiRestrictions/ipRestriction': 1, discontinued
                # 'account/apiRestrictions/ipRestriction/ipList': 1, discontinued
                'capital/withdraw/apply': 0.1,
                'margin/transfer': 1,  # Weight(IP): 600 => cost = 0.1 * 600 = 60
                'margin/loan': 20.001,  # Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                'margin/repay': 20.001,
                'margin/order': 0.040002,  # Weight(UID): 6 => cost = 0.006667 * 6 = 0.040002
                'margin/order/oco': 0.040002,
                # 'margin/isolated/create': 1, discontinued
                'margin/isolated/transfer': 4.0002,  # Weight(UID): 600 => cost = 0.006667 * 600 = 4.0002
                'margin/isolated/account': 2.0001,  # Weight(UID): 300 => cost = 0.006667 * 300 = 2.0001
                'bnbBurn': 0.1,
                'sub-account/margin/transfer': 4.0002,  # Weight(UID): 600 => cost =  0.006667 * 600 = 4.0002
                'sub-account/margin/enable': 0.1,
                'sub-account/futures/enable': 0.1,
                'sub-account/futures/transfer': 0.1,
                'sub-account/futures/internalTransfer': 0.1,
                'sub-account/transfer/subToSub': 0.1,
                'sub-account/transfer/subToMaster': 0.1,
                'sub-account/universalTransfer': 0.1,
                'managed-subaccount/deposit': 0.1,
                'managed-subaccount/withdraw': 0.1,
                'userDataStream': 0.1,
                'userDataStream/isolated': 0.1,
                'futures/transfer': 0.1,
                'futures/loan/borrow': 20.001,  # Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                'futures/loan/repay': 20.001,
                'futures/loan/adjustCollateral': 20.001,
                # lending
                'lending/customizedFixed/purchase': 0.1,
                'lending/daily/purchase': 0.1,
                'lending/daily/redeem': 0.1,
                # liquid swap endpoints
                'bswap/liquidityAdd': 60,  # Weight(UID): 1000 + (Additional: 1 request every 3 seconds =  0.333 requests per second) => cost = ( 1000 / rateLimit ) / 0.333 = 60.0000006
                'bswap/liquidityRemove': 60,  # Weight(UID): 1000 + (Additional: 1 request every three seconds)
                'bswap/swap': 60,  # Weight(UID): 1000 + (Additional: 1 request every three seconds)
                'bswap/claimRewards': 6.667,  # Weight(UID): 1000 => cost = 0.006667 * 1000 = 6.667
                # leveraged token endpoints
                'blvt/subscribe': 0.1,
                'blvt/redeem': 0.1,
                # brokerage API TODO: NO MENTION OF RATELIMITS IN BROKERAGE DOCS
                'apiReferral/customization': 1,
                'apiReferral/userCustomization': 1,
                'apiReferral/rebate/historicalRecord': 1,
                'apiReferral/kickback/historicalRecord': 1,
                'broker/subAccount': 1,
                'broker/subAccount/margin': 1,
                'broker/subAccount/futures': 1,
                'broker/subAccountApi': 1,
                'broker/subAccountApi/permission': 1,
                'broker/subAccountApi/commission': 1,
                'broker/subAccountApi/commission/futures': 1,
                'broker/subAccountApi/commission/coinFutures': 1,
                'broker/transfer': 1,
                'broker/transfer/futures': 1,
                'broker/rebate/historicalRecord': 1,
                'broker/subAccount/bnbBurn/spot': 1,
                'broker/subAccount/bnbBurn/marginInterest': 1,
                'broker/subAccount/blvt': 1,
                'broker/subAccountApi/ipRestriction': 1,
                'broker/subAccountApi/ipRestriction/ipList': 1,
                'broker/universalTransfer': 1,
                'broker/subAccountApi/permission/universalTransfer': 1,
                'broker/subAccountApi/permission/vanillaOptions': 1,
                #
                'giftcard/createCode': 0.1,
                'giftcard/redeemCode': 0.1,
            },
            'put': {
                'userDataStream': 0.1,
                'userDataStream/isolated': 0.1,
            },
            'delete': {
                # 'account/apiRestrictions/ipRestriction/ipList': 1, discontinued
                'margin/openOrders': 0.1,
                'margin/order': 0.0066667,  # Weight(UID): 1 => cost = 0.006667
                'margin/orderList': 0.0066667,
                'margin/isolated/account': 2.0001,  # Weight(UID): 300 => cost =  0.006667 * 300 = 2.0001
                'userDataStream': 0.1,
                'userDataStream/isolated': 0.1,
                # brokerage API TODO NO MENTION OF RATELIMIT IN BROKERAGE DOCS
                'broker/subAccountApi': 1,
                'broker/subAccountApi/ipRestriction/ipList': 1,
            },
        },
        # deprecated
        'wapi': {
            'post': {
                'withdraw': 1,
                'sub-account/transfer': 1,
            },
            'get': {
                'depositHistory': 1,
                'withdrawHistory': 1,
                'depositAddress': 1,
                'accountStatus': 1,
                'systemStatus': 1,
                'apiTradingStatus': 1,
                'userAssetDribbletLog': 1,
                'tradeFee': 1,
                'assetDetail': 1,
                'sub-account/list': 1,
                'sub-account/transfer/history': 1,
                'sub-account/assets': 1,
            },
        },
        'dapiPublic': {
            'get': {
                'ping': 1,
                'time': 1,
                'exchangeInfo': 1,
                'depth': {'cost': 2, 'byLimit': [[50, 2], [100, 5], [500, 10], [1000, 20]]},
                'trades': 1,
                'historicalTrades': 20,
                'aggTrades': 20,
                'premiumIndex': 10,
                'fundingRate': 1,
                'klines': {'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]},
                'continuousKlines': {'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]},
                'indexPriceKlines': {'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]},
                'markPriceKlines': {'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]},
                'ticker/24hr': {'cost': 1, 'noSymbol': 40},
                'ticker/price': {'cost': 1, 'noSymbol': 2},
                'ticker/bookTicker': {'cost': 1, 'noSymbol': 2},
                'openInterest': 1,
            },
        },
        'dapiData': {
            'get': {
                'openInterestHist': 1,
                'topLongShortAccountRatio': 1,
                'topLongShortPositionRatio': 1,
                'globalLongShortAccountRatio': 1,
                'takerBuySellVol': 1,
                'basis': 1,
            },
        },
        'dapiPrivate': {
            'get': {
                'positionSide/dual': 30,
                'order': 1,
                'openOrder': 1,
                'openOrders': {'cost': 1, 'noSymbol': 5},
                'allOrders': {'cost': 20, 'noSymbol': 40},
                'balance': 1,
                'account': 5,
                'positionMargin/history': 1,
                'positionRisk': 1,
                'userTrades': {'cost': 20, 'noSymbol': 40},
                'income': 20,
                'leverageBracket': 1,
                'forceOrders': {'cost': 20, 'noSymbol': 50},
                'adlQuantile': 5,
            },
            'post': {
                'positionSide/dual': 1,
                'order': 4,
                'batchOrders': 5,
                'countdownCancelAll': 10,
                'leverage': 1,
                'marginType': 1,
                'positionMargin': 1,
                'listenKey': 1,
            },
            'put': {
                'listenKey': 1,
            },
            'delete': {
                'order': 1,
                'allOpenOrders': 1,
                'batchOrders': 5,
                'listenKey': 1,
            },
        },
        'dapiPrivateV2': {
            'get': {
                'leverageBracket': 1,
            },
        },
        'fapiPublic': {
            'get': {
                'ping': 1,
                'time': 1,
                'exchangeInfo': 1,
                'depth': {'cost': 2, 'byLimit': [[50, 2], [100, 5], [500, 10], [1000, 20]]},
                'trades': 1,
                'historicalTrades': 20,
                'aggTrades': 20,
                'klines': {'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]},
                'continuousKlines': {'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]},
                'markPriceKlines': {'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]},
                'indexPriceKlines': {'cost': 1, 'byLimit': [[99, 1], [499, 2], [1000, 5], [10000, 10]]},
                'fundingRate': 1,
                'premiumIndex': 1,
                'ticker/24hr': {'cost': 1, 'noSymbol': 40},
                'ticker/price': {'cost': 1, 'noSymbol': 2},
                'ticker/bookTicker': {'cost': 1, 'noSymbol': 2},
                'openInterest': 1,
                'indexInfo': 1,
                'apiTradingStatus': {'cost': 1, 'noSymbol': 10},
                'lvtKlines': 1,
            },
        },
        'fapiData': {
            'get': {
                'openInterestHist': 1,
                'topLongShortAccountRatio': 1,
                'topLongShortPositionRatio': 1,
                'globalLongShortAccountRatio': 1,
                'takerlongshortRatio': 1,
            },
        },
        'fapiPrivate': {
            'get': {
                'forceOrders': {'cost': 20, 'noSymbol': 50},
                'allOrders': 5,
                'openOrder': 1,
                'openOrders': 1,
                'order': 1,
                'account': 5,
                'balance': 5,
                'leverageBracket': 1,
                'positionMargin/history': 1,
                'positionRisk': 5,
                'positionSide/dual': 30,
                'userTrades': 5,
                'income': 30,
                'commissionRate': 20,
                'apiTradingStatus': 1,
                'multiAssetsMargin': 30,
                # broker endpoints
                'apiReferral/ifNewUser': 1,
                'apiReferral/customization': 1,
                'apiReferral/userCustomization': 1,
                'apiReferral/traderNum': 1,
                'apiReferral/overview': 1,
                'apiReferral/tradeVol': 1,
                'apiReferral/rebateVol': 1,
                'apiReferral/traderSummary': 1,
                'adlQuantile': 5,
            },
            'post': {
                'batchOrders': 5,
                'positionSide/dual': 1,
                'positionMargin': 1,
                'marginType': 1,
                'order': 4,
                'leverage': 1,
                'listenKey': 1,
                'countdownCancelAll': 10,
                'multiAssetsMargin': 1,
                # broker endpoints
                'apiReferral/customization': 1,
                'apiReferral/userCustomization': 1,
            },
            'put': {
                'listenKey': 1,
            },
            'delete': {
                'batchOrders': 1,
                'order': 1,
                'allOpenOrders': 1,
                'listenKey': 1,
            },
        },
        'fapiPrivateV2': {
            'get': {
                'account': 1,
                'balance': 1,
                'positionRisk': 1,
            },
        },
        'vapiPublic': {
            'get': [
                'ping',
                'time',
                'optionInfo',
                'exchangeInfo',
                'index',
                'ticker',
                'mark',
                'depth',
                'klines',
                'trades',
                'historicalTrades',
            ],
        },
        'vapiPrivate': {
            'get': [
                'account',
                'position',
                'order',
                'openOrders',
                'historyOrders',
                'userTrades',
            ],
            'post': [
                'transfer',
                'bill',
                'order',
                'batchOrders',
                'userDataStream',
            ],
            'put': [
                'userDataStream',
            ],
            'delete': [
                'order',
                'batchOrders',
                'allOpenOrders',
                'userDataStream',
            ],
        },
        'public': {
            'get': {
                'ping': 1,
                'time': 1,
                'depth': {'cost': 1, 'byLimit': [[100, 1], [500, 5], [1000, 10], [5000, 50]]},
                'trades': 1,
                'aggTrades': 1,
                'historicalTrades': 5,
                'klines': 1,
                'ticker/24hr': {'cost': 1, 'noSymbol': 40},
                'ticker/price': {'cost': 1, 'noSymbol': 2},
                'ticker/bookTicker': {'cost': 1, 'noSymbol': 2},
                'exchangeInfo': 10,
            },
            'put': {
                'userDataStream': 1,
            },
            'post': {
                'userDataStream': 1,
            },
            'delete': {
                'userDataStream': 1,
            },
        },
        'private': {
            'get': {
                'allOrderList': 10,  # oco
                'openOrderList': 3,  # oco
                'orderList': 2,  # oco
                'order': 2,
                'openOrders': {'cost': 3, 'noSymbol': 40},
                'allOrders': 10,
                'account': 10,
                'myTrades': 10,
                'rateLimit/order': 20,
            },
            'post': {
                'order/oco': 1,
                'order': 1,
                'order/test': 1,
            },
            'delete': {
                'openOrders': 1,  # added on 2020-04-25 for canceling all open orders per symbol
                'orderList': 1,  # oco
                'order': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.001'),
            'maker': self.parse_number('0.001'),
        },
        'future': {
            'trading': {
                'feeSide': 'quote',
                'tierBased': True,
                'percentage': True,
                'taker': self.parse_number('0.000400'),
                'maker': self.parse_number('0.000200'),
                'tiers': {
                    'taker': [
                        [self.parse_number('0'), self.parse_number('0.000400')],
                        [self.parse_number('250'), self.parse_number('0.000400')],
                        [self.parse_number('2500'), self.parse_number('0.000350')],
                        [self.parse_number('7500'), self.parse_number('0.000320')],
                        [self.parse_number('22500'), self.parse_number('0.000300')],
                        [self.parse_number('50000'), self.parse_number('0.000270')],
                        [self.parse_number('100000'), self.parse_number('0.000250')],
                        [self.parse_number('200000'), self.parse_number('0.000220')],
                        [self.parse_number('400000'), self.parse_number('0.000200')],
                        [self.parse_number('750000'), self.parse_number('0.000170')],
                    ],
                    'maker': [
                        [self.parse_number('0'), self.parse_number('0.000200')],
                        [self.parse_number('250'), self.parse_number('0.000160')],
                        [self.parse_number('2500'), self.parse_number('0.000140')],
                        [self.parse_number('7500'), self.parse_number('0.000120')],
                        [self.parse_number('22500'), self.parse_number('0.000100')],
                        [self.parse_number('50000'), self.parse_number('0.000080')],
                        [self.parse_number('100000'), self.parse_number('0.000060')],
                        [self.parse_number('200000'), self.parse_number('0.000040')],
                        [self.parse_number('400000'), self.parse_number('0.000020')],
                        [self.parse_number('750000'), self.parse_number('0')],
                    ],
                },
            },
        },
        'delivery': {
            'trading': {
                'feeSide': 'base',
                'tierBased': True,
                'percentage': True,
                'taker': self.parse_number('0.000500'),
                'maker': self.parse_number('0.000100'),
                'tiers': {
                    'taker': [
                        [self.parse_number('0'), self.parse_number('0.000500')],
                        [self.parse_number('250'), self.parse_number('0.000450')],
                        [self.parse_number('2500'), self.parse_number('0.000400')],
                        [self.parse_number('7500'), self.parse_number('0.000300')],
                        [self.parse_number('22500'), self.parse_number('0.000250')],
                        [self.parse_number('50000'), self.parse_number('0.000240')],
                        [self.parse_number('100000'), self.parse_number('0.000240')],
                        [self.parse_number('200000'), self.parse_number('0.000240')],
                        [self.parse_number('400000'), self.parse_number('0.000240')],
                        [self.parse_number('750000'), self.parse_number('0.000240')],
                    ],
                    'maker': [
                        [self.parse_number('0'), self.parse_number('0.000100')],
                        [self.parse_number('250'), self.parse_number('0.000080')],
                        [self.parse_number('2500'), self.parse_number('0.000050')],
                        [self.parse_number('7500'), self.parse_number('0.0000030')],
                        [self.parse_number('22500'), self.parse_number('0')],
                        [self.parse_number('50000'), self.parse_number('-0.000050')],
                        [self.parse_number('100000'), self.parse_number('-0.000060')],
                        [self.parse_number('200000'), self.parse_number('-0.000070')],
                        [self.parse_number('400000'), self.parse_number('-0.000080')],
                        [self.parse_number('750000'), self.parse_number('-0.000090')],
                    ],
                },
            },
        },
        'option': {},
    },
    'commonCurrencies': {
        'BCC': 'BCC',  # kept for backward-compatibility https://github.com/ccxt/ccxt/issues/4848
        'YOYO': 'YOYOW',
    },
    # exchange-specific options
    'options': {
        'fetchCurrencies': True,  # self is a private call and it requires API keys
        # 'fetchTradesMethod': 'publicGetAggTrades',  # publicGetTrades, publicGetHistoricalTrades
        'defaultTimeInForce': 'GTC',  # 'GTC' = Good To Cancel(default), 'IOC' = Immediate Or Cancel
        'defaultType': 'spot',  # 'spot', 'future', 'margin', 'delivery'
        'hasAlreadyAuthenticatedSuccessfully': False,
        'warnOnFetchOpenOrdersWithoutSymbol': True,
        # not an error
        # https://github.com/ccxt/ccxt/issues/11268
        # https://github.com/ccxt/ccxt/pull/11624
        # POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
        # binanceusdm
        'throwMarginModeAlreadySet': False,
        'fetchPositions': 'positionRisk',  # or 'account'
        'recvWindow': 5 * 1000,  # 5 sec, binance default
        'timeDifference': 0,  # the difference between system clock and Binance clock
        'adjustForTimeDifference': False,  # controls the adjustment logic upon instantiation
        'newOrderRespType': {
            'market': 'FULL',  # 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
            'limit': 'FULL',  # we change it from 'ACK' by default to 'FULL'(returns immediately if limit is not hit)
        },
        'quoteOrderQty': True,  # whether market orders support amounts in quote currency
        'broker': {
            'spot': 'x-R4BD3S82',
            'margin': 'x-R4BD3S82',
            'future': 'x-xcKtGhcu',
            'delivery': 'x-xcKtGhcu',
        },
        'accountsByType': {
            'main': 'MAIN',
            'spot': 'MAIN',
            'funding': 'FUNDING',
            'margin': 'MARGIN',
            'future': 'UMFUTURE',
            'delivery': 'CMFUTURE',
            'mining': 'MINING',
        },
        'typesByAccount': {
            'MAIN': 'spot',
            'FUNDING': 'funding',
            'MARGIN': 'margin',
            'UMFUTURE': 'future',
            'CMFUTURE': 'delivery',
            'MINING': 'mining',
        },
        'networks': {
            'ERC20': 'ETH',
            'TRC20': 'TRX',
            'BEP2': 'BNB',
            'BEP20': 'BSC',
            'OMNI': 'OMNI',
            'EOS': 'EOS',
            'SPL': 'SOL',
        },
        'reverseNetworks': {
            'tronscan.org': 'TRC20',
            'etherscan.io': 'ERC20',
            'bscscan.com': 'BSC',
            'explorer.binance.org': 'BEP2',
            'bithomp.com': 'XRP',
            'bloks.io': 'EOS',
            'stellar.expert': 'XLM',
            'blockchair.com/bitcoin': 'BTC',
            'blockchair.com/bitcoin-cash': 'BCH',
            'blockchair.com/ecash': 'XEC',
            'explorer.litecoin.net': 'LTC',
            'explorer.avax.network': 'AVAX',
            'solscan.io': 'SOL',
            'polkadot.subscan.io': 'DOT',
            'dashboard.internetcomputer.org': 'ICP',
            'explorer.chiliz.com': 'CHZ',
            'cardanoscan.io': 'ADA',
            'mainnet.theoan.com': 'AION',
            'algoexplorer.io': 'ALGO',
            'explorer.ambrosus.com': 'AMB',
            'viewblock.io/zilliqa': 'ZIL',
            'viewblock.io/arweave': 'AR',
            'explorer.ark.io': 'ARK',
            'atomscan.com': 'ATOM',
            'www.mintscan.io': 'CTK',
            'explorer.bitcoindiamond.org': 'BCD',
            'btgexplorer.com': 'BTG',
            'bts.ai': 'BTS',
            'explorer.celo.org': 'CELO',
            'explorer.nervos.org': 'CKB',
            'cerebro.cortexlabs.ai': 'CTXC',
            'chainz.cryptoid.info': 'VIA',
            'explorer.dcrdata.org': 'DCR',
            'digiexplorer.info': 'DGB',
            'dock.subscan.io': 'DOCK',
            'dogechain.info': 'DOGE',
            'explorer.elrond.com': 'EGLD',
            'blockscout.com': 'ETC',
            'explore-fetchhub.fetch.ai': 'FET',
            'filfox.info': 'FIL',
            'fio.bloks.io': 'FIO',
            'explorer.firo.org': 'FIRO',
            'neoscan.io': 'NEO',
            'ftmscan.com': 'FTM',
            'explorer.gochain.io': 'GO',
            'block.gxb.io': 'GXS',
            'hash-hash.info': 'HBAR',
            'www.hiveblockexplorer.com': 'HIVE',
            'explorer.helium.com': 'HNT',
            'tracker.icon.foundation': 'ICX',
            'www.iostabc.com': 'IOST',
            'explorer.iota.org': 'IOTA',
            'iotexscan.io': 'IOTX',
            'irishub.iobscan.io': 'IRIS',
            'kava.mintscan.io': 'KAVA',
            'scope.klaytn.com': 'KLAY',
            'kmdexplorer.io': 'KMD',
            'kusama.subscan.io': 'KSM',
            'explorer.lto.network': 'LTO',
            'polygonscan.com': 'POLYGON',
            'explorer.ont.io': 'ONT',
            'minaexplorer.com': 'MINA',
            'nanolooker.com': 'NANO',
            'explorer.nebulas.io': 'NAS',
            'explorer.nbs.plus': 'NBS',
            'explorer.nebl.io': 'NEBL',
            'nulscan.io': 'NULS',
            'nxscan.com': 'NXS',
            'explorer.harmony.one': 'ONE',
            'explorer.poa.network': 'POA',
            'qtum.info': 'QTUM',
            'explorer.rsk.co': 'RSK',
            'www.oasisscan.com': 'ROSE',
            'ravencoin.network': 'RVN',
            'sc.tokenview.com': 'SC',
            'secretnodes.com': 'SCRT',
            'explorer.skycoin.com': 'SKY',
            'steemscan.com': 'STEEM',
            'explorer.stacks.co': 'STX',
            'www.thetascan.io': 'THETA',
            'scan.tomochain.com': 'TOMO',
            'explore.vechain.org': 'VET',
            'explorer.vite.net': 'VITE',
            'www.wanscan.org': 'WAN',
            'wavesexplorer.com': 'WAVES',
            'wax.eosx.io': 'WAXP',
            'waltonchain.pro': 'WTC',
            'chain.nem.ninja': 'XEM',
            'verge-blockchain.info': 'XVG',
            'explorer.yoyow.org': 'YOYOW',
            'explorer.zcha.in': 'ZEC',
            'explorer.zensystem.io': 'ZEN',
        },
        'impliedNetworks': {
            'ETH': {'ERC20': 'ETH'},
            'TRX': {'TRC20': 'TRX'},
        },
        'legalMoney': {
            'MXN': True,
            'UGX': True,
            'SEK': True,
            'CHF': True,
            'VND': True,
            'AED': True,
            'DKK': True,
            'KZT': True,
            'HUF': True,
            'PEN': True,
            'PHP': True,
            'USD': True,
            'TRY': True,
            'EUR': True,
            'NGN': True,
            'PLN': True,
            'BRL': True,
            'ZAR': True,
            'KES': True,
            'ARS': True,
            'RUB': True,
            'AUD': True,
            'NOK': True,
            'CZK': True,
            'GBP': True,
            'UAH': True,
            'GHS': True,
            'HKD': True,
            'CAD': True,
            'INR': True,
            'JPY': True,
            'NZD': True,
        },
    },
    # https://binance-docs.github.io/apidocs/spot/en/#error-codes-2
    'exceptions': {
        'exact': {
            'System is under maintenance.': OnMaintenance,  # {"code":1,"msg":"System is under maintenance."}
            'System abnormality': ExchangeError,  # {"code":-1000,"msg":"System abnormality"}
            'You are not authorized to execute self request.': PermissionDenied,  # {"msg":"You are not authorized to execute self request."}
            'API key does not exist': AuthenticationError,
            'Order would trigger immediately.': OrderImmediatelyFillable,
            'Stop price would trigger immediately.': OrderImmediatelyFillable,  # {"code":-2010,"msg":"Stop price would trigger immediately."}
            'Order would immediately match and take.': OrderImmediatelyFillable,  # {"code":-2010,"msg":"Order would immediately match and take."}
            'Account has insufficient balance for requested action.': InsufficientFunds,
            'Rest API trading is not enabled.': ExchangeNotAvailable,
            "You don't have permission.": PermissionDenied,  # {"msg":"You don't have permission.","success":false}
            'Market is closed.': ExchangeNotAvailable,  # {"code":-1013,"msg":"Market is closed."}
            'Too many requests. Please try again later.': DDoSProtection,  # {"msg":"Too many requests. Please try again later.","success":false}
            'This action disabled is on self account.': AccountSuspended,  # {"code":-2010,"msg":"This action disabled is on self account."}
            '-1000': ExchangeNotAvailable,  # {"code":-1000,"msg":"An unknown error occured while processing the request."}
            '-1001': ExchangeNotAvailable,  # {"code":-1001,"msg":"'Internal error; unable to process your request. Please try again.'"}
            '-1002': AuthenticationError,  # {"code":-1002,"msg":"'You are not authorized to execute self request.'"}
            '-1003': RateLimitExceeded,  # {"code":-1003,"msg":"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API."}
            '-1004': DDoSProtection,  # {"code":-1004,"msg":"Server is busy, please wait and try again"}
            '-1005': PermissionDenied,  # {"code":-1005,"msg":"No such IP has been white listed"}
            '-1006': BadResponse,  # {"code":-1006,"msg":"An unexpected response was received from the message bus. Execution status unknown."}
            '-1007': RequestTimeout,  # {"code":-1007,"msg":"Timeout waiting for response from backend server. Send status unknown; execution status unknown."}
            '-1010': BadResponse,  # {"code":-1010,"msg":"ERROR_MSG_RECEIVED."}
            '-1011': PermissionDenied,  # {"code":-1011,"msg":"This IP cannot access self route."}
            '-1013': InvalidOrder,  # {"code":-1013,"msg":"createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL"}
            '-1014': InvalidOrder,  # {"code":-1014,"msg":"Unsupported order combination."}
            '-1015': RateLimitExceeded,  # {"code":-1015,"msg":"'Too many new orders; current limit is %s orders per %s.'"}
            '-1016': ExchangeNotAvailable,  # {"code":-1016,"msg":"'This service is no longer available.',"}
            '-1020': BadRequest,  # {"code":-1020,"msg":"'This operation is not supported.'"}
            '-1021': InvalidNonce,  # {"code":-1021,"msg":"'your time is ahead of server'"}
            '-1022': AuthenticationError,  # {"code":-1022,"msg":"Signature for self request is not valid."}
            '-1023': BadRequest,  # {"code":-1023,"msg":"Start time is greater than end time."}
            '-1099': AuthenticationError,  # {"code":-1099,"msg":"Not found, authenticated, or authorized"}
            '-1100': BadRequest,  # {"code":-1100,"msg":"createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'"}
            '-1101': BadRequest,  # {"code":-1101,"msg":"Too many parameters; expected %s and received %s."}
            '-1102': BadRequest,  # {"code":-1102,"msg":"Param %s or %s must be sent, but both were empty"}
            '-1103': BadRequest,  # {"code":-1103,"msg":"An unknown parameter was sent."}
            '-1104': BadRequest,  # {"code":-1104,"msg":"Not all sent parameters were read, read 8 parameters but was sent 9"}
            '-1105': BadRequest,  # {"code":-1105,"msg":"Parameter %s was empty."}
            '-1106': BadRequest,  # {"code":-1106,"msg":"Parameter %s sent when not required."}
            '-1108': BadRequest,  # {"code":-1108,"msg":"Invalid asset."}
            '-1109': AuthenticationError,  # {"code":-1109,"msg":"Invalid account."}
            '-1110': BadRequest,  # {"code":-1110,"msg":"Invalid symbolType."}
            '-1111': BadRequest,  # {"code":-1111,"msg":"Precision is over the maximum defined for self asset."}
            '-1112': InvalidOrder,  # {"code":-1112,"msg":"No orders on book for symbol."}
            '-1113': BadRequest,  # {"code":-1113,"msg":"Withdrawal amount must be negative."}
            '-1114': BadRequest,  # {"code":-1114,"msg":"TimeInForce parameter sent when not required."}
            '-1115': BadRequest,  # {"code":-1115,"msg":"Invalid timeInForce."}
            '-1116': BadRequest,  # {"code":-1116,"msg":"Invalid orderType."}
            '-1117': BadRequest,  # {"code":-1117,"msg":"Invalid side."}
            '-1118': BadRequest,  # {"code":-1118,"msg":"New client order ID was empty."}
            '-1119': BadRequest,  # {"code":-1119,"msg":"Original client order ID was empty."}
            '-1120': BadRequest,  # {"code":-1120,"msg":"Invalid interval."}
            '-1121': BadSymbol,  # {"code":-1121,"msg":"Invalid symbol."}
            '-1125': AuthenticationError,  # {"code":-1125,"msg":"This listenKey does not exist."}
            '-1127': BadRequest,  # {"code":-1127,"msg":"More than %s hours between startTime and endTime."}
            '-1128': BadRequest,  # {"code":-1128,"msg":"{"code":-1128,"msg":"Combination of optional parameters invalid."}"}
            '-1130': BadRequest,  # {"code":-1130,"msg":"Data sent for paramter %s is not valid."}
            '-1131': BadRequest,  # {"code":-1131,"msg":"recvWindow must be less than 60000"}
            '-1136': BadRequest,  # {"code":-1136,"msg":"Invalid newOrderRespType"}
            '-2008': AuthenticationError,  # {"code":-2008,"msg":"Invalid Api-Key ID."}
            '-2010': ExchangeError,  # {"code":-2010,"msg":"generic error code for createOrder -> 'Account has insufficient balance for requested action.', {"code":-2010,"msg":"Rest API trading is not enabled."}, etc..."}
            '-2011': OrderNotFound,  # {"code":-2011,"msg":"cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'"}
            '-2013': OrderNotFound,  # {"code":-2013,"msg":"fetchOrder(1, 'BTC/USDT') -> 'Order does not exist'"}
            '-2014': AuthenticationError,  # {"code":-2014,"msg":"API-key format invalid."}
            '-2015': AuthenticationError,  # {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
            '-2016': BadRequest,  # {"code":-2016,"msg":"No trading window could be found for the symbol. Try ticker/24hrs instead."}
            '-2018': InsufficientFunds,  # {"code":-2018,"msg":"Balance is insufficient"}
            '-2019': InsufficientFunds,  # {"code":-2019,"msg":"Margin is insufficient."}
            '-2020': OrderNotFillable,  # {"code":-2020,"msg":"Unable to fill."}
            '-2021': OrderImmediatelyFillable,  # {"code":-2021,"msg":"Order would immediately trigger."}
            '-2022': InvalidOrder,  # {"code":-2022,"msg":"ReduceOnly Order is rejected."}
            '-2023': InsufficientFunds,  # {"code":-2023,"msg":"User in liquidation mode now."}
            '-2024': InsufficientFunds,  # {"code":-2024,"msg":"Position is not sufficient."}
            '-2025': InvalidOrder,  # {"code":-2025,"msg":"Reach max open order limit."}
            '-2026': InvalidOrder,  # {"code":-2026,"msg":"This OrderType is not supported when reduceOnly."}
            '-2027': InvalidOrder,  # {"code":-2027,"msg":"Exceeded the maximum allowable position at current leverage."}
            '-2028': InsufficientFunds,  # {"code":-2028,"msg":"Leverage is smaller than permitted: insufficient margin balance"}
            '-3000': ExchangeError,  # {"code":-3000,"msg":"Internal server error."}
            '-3001': AuthenticationError,  # {"code":-3001,"msg":"Please enable 2FA first."}
            '-3002': BadSymbol,  # {"code":-3002,"msg":"We don't have self asset."}
            '-3003': BadRequest,  # {"code":-3003,"msg":"Margin account does not exist."}
            '-3004': ExchangeError,  # {"code":-3004,"msg":"Trade not allowed."}
            '-3005': InsufficientFunds,  # {"code":-3005,"msg":"Transferring out not allowed. Transfer out amount exceeds max amount."}
            '-3006': InsufficientFunds,  # {"code":-3006,"msg":"Your borrow amount has exceed maximum borrow amount."}
            '-3007': ExchangeError,  # {"code":-3007,"msg":"You have pending transaction, please try again later.."}
            '-3008': InsufficientFunds,  # {"code":-3008,"msg":"Borrow not allowed. Your borrow amount has exceed maximum borrow amount."}
            '-3009': BadRequest,  # {"code":-3009,"msg":"This asset are not allowed to transfer into margin account currently."}
            '-3010': ExchangeError,  # {"code":-3010,"msg":"Repay not allowed. Repay amount exceeds borrow amount."}
            '-3011': BadRequest,  # {"code":-3011,"msg":"Your input date is invalid."}
            '-3012': ExchangeError,  # {"code":-3012,"msg":"Borrow is banned for self asset."}
            '-3013': BadRequest,  # {"code":-3013,"msg":"Borrow amount less than minimum borrow amount."}
            '-3014': AccountSuspended,  # {"code":-3014,"msg":"Borrow is banned for self account."}
            '-3015': ExchangeError,  # {"code":-3015,"msg":"Repay amount exceeds borrow amount."}
            '-3016': BadRequest,  # {"code":-3016,"msg":"Repay amount less than minimum repay amount."}
            '-3017': ExchangeError,  # {"code":-3017,"msg":"This asset are not allowed to transfer into margin account currently."}
            '-3018': AccountSuspended,  # {"code":-3018,"msg":"Transferring in has been banned for self account."}
            '-3019': AccountSuspended,  # {"code":-3019,"msg":"Transferring out has been banned for self account."}
            '-3020': InsufficientFunds,  # {"code":-3020,"msg":"Transfer out amount exceeds max amount."}
            '-3021': BadRequest,  # {"code":-3021,"msg":"Margin account are not allowed to trade self trading pair."}
            '-3022': AccountSuspended,  # {"code":-3022,"msg":"You account's trading is banned."}
            '-3023': BadRequest,  # {"code":-3023,"msg":"You can't transfer out/place order under current margin level."}
            '-3024': ExchangeError,  # {"code":-3024,"msg":"The unpaid debt is too small after self repayment."}
            '-3025': BadRequest,  # {"code":-3025,"msg":"Your input date is invalid."}
            '-3026': BadRequest,  # {"code":-3026,"msg":"Your input param is invalid."}
            '-3027': BadSymbol,  # {"code":-3027,"msg":"Not a valid margin asset."}
            '-3028': BadSymbol,  # {"code":-3028,"msg":"Not a valid margin pair."}
            '-3029': ExchangeError,  # {"code":-3029,"msg":"Transfer failed."}
            '-3036': AccountSuspended,  # {"code":-3036,"msg":"This account is not allowed to repay."}
            '-3037': ExchangeError,  # {"code":-3037,"msg":"PNL is clearing. Wait a second."}
            '-3038': BadRequest,  # {"code":-3038,"msg":"Listen key not found."}
            '-3041': InsufficientFunds,  # {"code":-3041,"msg":"Balance is not enough"}
            '-3042': BadRequest,  # {"code":-3042,"msg":"PriceIndex not available for self margin pair."}
            '-3043': BadRequest,  # {"code":-3043,"msg":"Transferring in not allowed."}
            '-3044': DDoSProtection,  # {"code":-3044,"msg":"System busy."}
            '-3045': ExchangeError,  # {"code":-3045,"msg":"The system doesn't have enough asset now."}
            '-3999': ExchangeError,  # {"code":-3999,"msg":"This function is only available for invited users."}
            '-4001': BadRequest,  # {"code":-4001 ,"msg":"Invalid operation."}
            '-4002': BadRequest,  # {"code":-4002 ,"msg":"Invalid get."}
            '-4003': BadRequest,  # {"code":-4003 ,"msg":"Your input email is invalid."}
            '-4004': AuthenticationError,  # {"code":-4004,"msg":"You don't login or auth."}
            '-4005': RateLimitExceeded,  # {"code":-4005 ,"msg":"Too many new requests."}
            '-4006': BadRequest,  # {"code":-4006 ,"msg":"Support main account only."}
            '-4007': BadRequest,  # {"code":-4007 ,"msg":"Address validation is not passed."}
            '-4008': BadRequest,  # {"code":-4008 ,"msg":"Address tag validation is not passed."}
            '-4010': BadRequest,  # {"code":-4010 ,"msg":"White list mail has been confirmed."}  # [TODO] possible bug: it should probably be "has not been confirmed"
            '-4011': BadRequest,  # {"code":-4011 ,"msg":"White list mail is invalid."}
            '-4012': BadRequest,  # {"code":-4012 ,"msg":"White list is not opened."}
            '-4013': AuthenticationError,  # {"code":-4013 ,"msg":"2FA is not opened."}
            '-4014': PermissionDenied,  # {"code":-4014 ,"msg":"Withdraw is not allowed within 2 min login."}
            '-4015': ExchangeError,  # {"code":-4015 ,"msg":"Withdraw is limited."}
            '-4016': PermissionDenied,  # {"code":-4016 ,"msg":"Within 24 hours after password modification, withdrawal is prohibited."}
            '-4017': PermissionDenied,  # {"code":-4017 ,"msg":"Within 24 hours after the release of 2FA, withdrawal is prohibited."}
            '-4018': BadSymbol,  # {"code":-4018,"msg":"We don't have self asset."}
            '-4019': BadSymbol,  # {"code":-4019,"msg":"Current asset is not open for withdrawal."}
            '-4021': BadRequest,  # {"code":-4021,"msg":"Asset withdrawal must be an %s multiple of %s."}
            '-4022': BadRequest,  # {"code":-4022,"msg":"Not less than the minimum pick-up quantity %s."}
            '-4023': ExchangeError,  # {"code":-4023,"msg":"Within 24 hours, the withdrawal exceeds the maximum amount."}
            '-4024': InsufficientFunds,  # {"code":-4024,"msg":"You don't have self asset."}
            '-4025': InsufficientFunds,  # {"code":-4025,"msg":"The number of hold asset is less than zero."}
            '-4026': InsufficientFunds,  # {"code":-4026,"msg":"You have insufficient balance."}
            '-4027': ExchangeError,  # {"code":-4027,"msg":"Failed to obtain tranId."}
            '-4028': BadRequest,  # {"code":-4028,"msg":"The amount of withdrawal must be greater than the Commission."}
            '-4029': BadRequest,  # {"code":-4029,"msg":"The withdrawal record does not exist."}
            '-4030': ExchangeError,  # {"code":-4030,"msg":"Confirmation of successful asset withdrawal. [TODO] possible bug in docs"}
            '-4031': ExchangeError,  # {"code":-4031,"msg":"Cancellation failed."}
            '-4032': ExchangeError,  # {"code":-4032,"msg":"Withdraw verification exception."}
            '-4033': BadRequest,  # {"code":-4033,"msg":"Illegal address."}
            '-4034': ExchangeError,  # {"code":-4034,"msg":"The address is suspected of fake."}
            '-4035': PermissionDenied,  # {"code":-4035,"msg":"This address is not on the whitelist. Please join and try again."}
            '-4036': BadRequest,  # {"code":-4036,"msg":"The new address needs to be withdrawn in {0} hours."}
            '-4037': ExchangeError,  # {"code":-4037,"msg":"Re-sending Mail failed."}
            '-4038': ExchangeError,  # {"code":-4038,"msg":"Please try again in 5 minutes."}
            '-4039': BadRequest,  # {"code":-4039,"msg":"The user does not exist."}
            '-4040': BadRequest,  # {"code":-4040,"msg":"This address not charged."}
            '-4041': ExchangeError,  # {"code":-4041,"msg":"Please try again in one minute."}
            '-4042': ExchangeError,  # {"code":-4042,"msg":"This asset cannot get deposit address again."}
            '-4043': BadRequest,  # {"code":-4043,"msg":"More than 100 recharge addresses were used in 24 hours."}
            '-4044': BadRequest,  # {"code":-4044,"msg":"This is a blacklist country."}
            '-4045': ExchangeError,  # {"code":-4045,"msg":"Failure to acquire assets."}
            '-4046': AuthenticationError,  # {"code":-4046,"msg":"Agreement not confirmed."}
            '-4047': BadRequest,  # {"code":-4047,"msg":"Time interval must be within 0-90 days"}
            '-5001': BadRequest,  # {"code":-5001,"msg":"Don't allow transfer to micro assets."}
            '-5002': InsufficientFunds,  # {"code":-5002,"msg":"You have insufficient balance."}
            '-5003': InsufficientFunds,  # {"code":-5003,"msg":"You don't have self asset."}
            '-5004': BadRequest,  # {"code":-5004,"msg":"The residual balances of %s have exceeded 0.001BTC, Please re-choose."}
            '-5005': InsufficientFunds,  # {"code":-5005,"msg":"The residual balances of %s is too low, Please re-choose."}
            '-5006': BadRequest,  # {"code":-5006,"msg":"Only transfer once in 24 hours."}
            '-5007': BadRequest,  # {"code":-5007,"msg":"Quantity must be greater than zero."}
            '-5008': InsufficientFunds,  # {"code":-5008,"msg":"Insufficient amount of returnable assets."}
            '-5009': BadRequest,  # {"code":-5009,"msg":"Product does not exist."}
            '-5010': ExchangeError,  # {"code":-5010,"msg":"Asset transfer fail."}
            '-5011': BadRequest,  # {"code":-5011,"msg":"future account not exists."}
            '-5012': ExchangeError,  # {"code":-5012,"msg":"Asset transfer is in pending."}
            '-5013': InsufficientFunds,  # {"code":-5013,"msg":"Asset transfer failed: insufficient balance""}  # undocumented
            '-5021': BadRequest,  # {"code":-5021,"msg":"This parent sub have no relation"}
            '-6001': BadRequest,  # {"code":-6001,"msg":"Daily product not exists."}
            '-6003': BadRequest,  # {"code":-6003,"msg":"Product not exist or you don't have permission"}
            '-6004': ExchangeError,  # {"code":-6004,"msg":"Product not in purchase status"}
            '-6005': InvalidOrder,  # {"code":-6005,"msg":"Smaller than min purchase limit"}
            '-6006': BadRequest,  # {"code":-6006,"msg":"Redeem amount error"}
            '-6007': BadRequest,  # {"code":-6007,"msg":"Not in redeem time"}
            '-6008': BadRequest,  # {"code":-6008,"msg":"Product not in redeem status"}
            '-6009': RateLimitExceeded,  # {"code":-6009,"msg":"Request frequency too high"}
            '-6011': BadRequest,  # {"code":-6011,"msg":"Exceeding the maximum num allowed to purchase per user"}
            '-6012': InsufficientFunds,  # {"code":-6012,"msg":"Balance not enough"}
            '-6013': ExchangeError,  # {"code":-6013,"msg":"Purchasing failed"}
            '-6014': BadRequest,  # {"code":-6014,"msg":"Exceed up-limit allowed to purchased"}
            '-6015': BadRequest,  # {"code":-6015,"msg":"Empty request body"}
            '-6016': BadRequest,  # {"code":-6016,"msg":"Parameter err"}
            '-6017': BadRequest,  # {"code":-6017,"msg":"Not in whitelist"}
            '-6018': BadRequest,  # {"code":-6018,"msg":"Asset not enough"}
            '-6019': AuthenticationError,  # {"code":-6019,"msg":"Need confirm"}
            '-6020': BadRequest,  # {"code":-6020,"msg":"Project not exists"}
            '-7001': BadRequest,  # {"code":-7001,"msg":"Date range is not supported."}
            '-7002': BadRequest,  # {"code":-7002,"msg":"Data request type is not supported."}
            '-10017': BadRequest,  # {"code":-10017,"msg":"Repay amount should not be larger than liability."}
            '-11008': InsufficientFunds,  # {"code":-11008,"msg":"Exceeding the account's maximum borrowable limit."}  # undocumented
            '-12014': RateLimitExceeded,  # {"code":-12014,"msg":"More than 1 request in 3 seconds"}
            '-13000': BadRequest,  # {"code":-13000,"msg":"Redeption of the token is forbiden now"}
            '-13001': BadRequest,  # {"code":-13001,"msg":"Exceeds individual 24h redemption limit of the token"}
            '-13002': BadRequest,  # {"code":-13002,"msg":"Exceeds total 24h redemption limit of the token"}
            '-13003': BadRequest,  # {"code":-13003,"msg":"Subscription of the token is forbiden now"}
            '-13004': BadRequest,  # {"code":-13004,"msg":"Exceeds individual 24h subscription limit of the token"}
            '-13005': BadRequest,  # {"code":-13005,"msg":"Exceeds total 24h subscription limit of the token"}
            '-13006': InvalidOrder,  # {"code":-13006,"msg":"Subscription amount is too small"}
            '-13007': AuthenticationError,  # {"code":-13007,"msg":"The Agreement is not signed"}
            '100001003': BadRequest,  # {"code":100001003,"msg":"Verification failed"}  # undocumented
        },
        'broad': {
            'has no operation privilege': PermissionDenied,
            'MAX_POSITION': InvalidOrder,  # {"code":-2010,"msg":"Filter failure: MAX_POSITION"}
        },
    },
},
{
    'id': 'coinmate',
    'name': 'CoinMate',
    'countries': ['GB', 'CZ', 'EU'],  # UK, Czech Republic
    'rateLimit': 1000,
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': False,
        'fetchTransactions': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87460806-1c9f3f00-c616-11ea-8c46-a77018a8f3f4.jpg',
        'api': 'https://coinmate.io/api',
        'www': 'https://coinmate.io',
        'fees': 'https://coinmate.io/fees',
        'doc': [
            'https://coinmate.docs.apiary.io',
            'https://coinmate.io/developers',
        ],
        'referral': 'https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0',
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'uid': True,
    },
    'api': {
        'public': {
            'get': [
                'orderBook',
                'ticker',
                'transactions',
                'tradingPairs',
            ],
        },
        'private': {
            'post': [
                'balances',
                'bitcoinCashWithdrawal',
                'bitcoinCashDepositAddresses',
                'bitcoinDepositAddresses',
                'bitcoinWithdrawal',
                'bitcoinWithdrawalFees',
                'buyInstant',
                'buyLimit',
                'cancelOrder',
                'cancelOrderWithInfo',
                'createVoucher',
                'dashDepositAddresses',
                'dashWithdrawal',
                'ethereumWithdrawal',
                'ethereumDepositAddresses',
                'litecoinWithdrawal',
                'litecoinDepositAddresses',
                'openOrders',
                'order',
                'orderHistory',
                'orderById',
                'pusherAuth',
                'redeemVoucher',
                'replaceByBuyLimit',
                'replaceByBuyInstant',
                'replaceBySellLimit',
                'replaceBySellInstant',
                'rippleDepositAddresses',
                'rippleWithdrawal',
                'sellInstant',
                'sellLimit',
                'transactionHistory',
                'traderFees',
                'tradeHistory',
                'transfer',
                'transferHistory',
                'unconfirmedBitcoinDeposits',
                'unconfirmedBitcoinCashDeposits',
                'unconfirmedDashDeposits',
                'unconfirmedEthereumDeposits',
                'unconfirmedLitecoinDeposits',
                'unconfirmedRippleDeposits',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'maker': 0.12 / 100,
            'taker': 0.25 / 100,
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.0035')],
                    [self.parse_number('10000'), self.parse_number('0.0023')],
                    [self.parse_number('100000'), self.parse_number('0.0021')],
                    [self.parse_number('250000'), self.parse_number('0.0020')],
                    [self.parse_number('500000'), self.parse_number('0.0015')],
                    [self.parse_number('1000000'), self.parse_number('0.0013')],
                    [self.parse_number('3000000'), self.parse_number('0.0010')],
                    [self.parse_number('15000000'), self.parse_number('0.0005')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.003')],
                    [self.parse_number('10000'), self.parse_number('0.0011')],
                    [self.parse_number('100000'), self.parse_number('0.0010')],
                    [self.parse_number('250000'), self.parse_number('0.0008')],
                    [self.parse_number('500000'), self.parse_number('0.0005')],
                    [self.parse_number('1000000'), self.parse_number('0.0003')],
                    [self.parse_number('3000000'), self.parse_number('0.0002')],
                    [self.parse_number('15000000'), self.parse_number('0')],
                ],
            },
        },
    },
    'exceptions': {
        'exact': {
            'No order with given ID': OrderNotFound,
        },
        'broad': {
            'Not enough account balance available': InsufficientFunds,
            'Incorrect order ID': InvalidOrder,
            'Minimum Order Size ': InvalidOrder,
            'TOO MANY REQUESTS': RateLimitExceeded,
            'Access denied.': AuthenticationError,  # {"error":true,"errorMessage":"Access denied.","data":null}
        },
    },
},
{
    'id': 'bitforex',
    'name': 'Bitforex',
    'countries': ['CN'],
    'rateLimit': 500,  # https://github.com/ccxt/ccxt/issues/5054
    'version': 'v1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': None,  # has but unimplemented
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchMarkets': True,
        'fetchMyTrades': None,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': None,
        'fetchTicker': True,
        'fetchTickers': None,
        'fetchTrades': True,
    },
    'timeframes': {
        '1m': '1min',
        '5m': '5min',
        '15m': '15min',
        '30m': '30min',
        '1h': '1hour',
        '2h': '2hour',
        '4h': '4hour',
        '12h': '12hour',
        '1d': '1day',
        '1w': '1week',
        '1M': '1month',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87295553-1160ec00-c50e-11ea-8ea0-df79276a9646.jpg',
        'api': 'https://api.bitforex.com',
        'www': 'https://www.bitforex.com',
        'doc': 'https://github.com/githubdev2020/API_Doc_en/wiki',
        'fees': 'https://help.bitforex.com/en_us/?cat=13',
        'referral': 'https://www.bitforex.com/en/invitationRegister?inviterId=1867438',
    },
    'api': {
        'public': {
            'get': {
                'api/v1/market/symbols': 20,
                'api/v1/market/ticker': 4,
                'api/v1/market/depth': 4,
                'api/v1/market/trades': 20,
                'api/v1/market/kline': 20,
            },
        },
        'private': {
            'post': {
                'api/v1/fund/mainAccount': 1,
                'api/v1/fund/allAccount': 30,
                'api/v1/trade/placeOrder': 1,
                'api/v1/trade/placeMultiOrder': 10,
                'api/v1/trade/cancelOrder': 1,
                'api/v1/trade/cancelMultiOrder': 20,
                'api/v1/trade/cancelAllOrder': 20,
                'api/v1/trade/orderInfo': 1,
                'api/v1/trade/multiOrderInfo': 10,
                'api/v1/trade/orderInfos': 20,
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.001'),
            'taker': self.parse_number('0.001'),
        },
        'funding': {
            'tierBased': False,
            'percentage': True,
            'deposit': {},
            'withdraw': {},
        },
    },
    'commonCurrencies': {
        'BKC': 'Bank Coin',
        'CAPP': 'Crypto Application Token',
        'CREDIT': 'TerraCredit',
        'CTC': 'Culture Ticket Chain',
        'EWT': 'EcoWatt Token',
        'IQ': 'IQ.Cash',
        'MIR': 'MIR COIN',
        'NOIA': 'METANOIA',
        'TON': 'To The Moon',
    },
    'exceptions': {
        '1000': OrderNotFound,  # {"code":"1000","success":false,"time":1643047898676,"message":"The order does not exist or the status is wrong"}
        '1003': BadSymbol,  # {"success":false,"code":"1003","message":"Param Invalid:param invalid -symbol:symbol error"}
        '1013': AuthenticationError,
        '1016': AuthenticationError,
        '1017': PermissionDenied,  # {"code":"1017","success":false,"time":1602670594367,"message":"IP not allow"}
        '1019': BadSymbol,  # {"code":"1019","success":false,"time":1607087743778,"message":"Symbol Invalid"}
        '3002': InsufficientFunds,
        '4002': InvalidOrder,  # {"success":false,"code":"4002","message":"Price unreasonable"}
        '4003': InvalidOrder,  # {"success":false,"code":"4003","message":"amount too small"}
        '4004': OrderNotFound,
        '10204': DDoSProtection,
    },
},
{
    'id': 'huobijp',
    'name': 'Huobi Japan',
    'countries': ['JP'],
    'rateLimit': 100,
    'userAgent': self.userAgents['chrome39'],
    'certified': False,
    'version': 'v1',
    'accounts': None,
    'accountsById': None,
    'hostname': 'api-cloud.huobi.co.jp',
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,
        'swap': False,
        'future': False,
        'option': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': False,
        'fetchDepositAddressesByNetwork': False,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingLimits': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1min',
        '5m': '5min',
        '15m': '15min',
        '30m': '30min',
        '1h': '60min',
        '4h': '4hour',
        '1d': '1day',
        '1w': '1week',
        '1M': '1mon',
        '1y': '1year',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/85734211-85755480-b705-11ea-8b35-0b7f1db33a2f.jpg',
        'api': {
            'market': 'https://{hostname}',
            'public': 'https://{hostname}',
            'private': 'https://{hostname}',
            'v2Public': 'https://{hostname}',
            'v2Private': 'https://{hostname}',
        },
        'www': 'https://www.huobi.co.jp',
        'referral': 'https://www.huobi.co.jp/register/?invite_code=znnq3',
        'doc': 'https://api-doc.huobi.co.jp',
        'fees': 'https://www.huobi.co.jp/support/fee',
    },
    'api': {
        'v2Public': {
            'get': {
                'reference/currencies': 1,  # 币链参考信息
                'market-status': 1,  # 获取当前市场状态
            },
        },
        'v2Private': {
            'get': {
                'account/ledger': 1,
                'account/withdraw/quota': 1,
                'account/withdraw/address': 1,  # 提币地址查询(限母用户可用)
                'account/deposit/address': 1,
                'account/repayment': 5,  # 还币交易记录查询
                'reference/transact-fee-rate': 1,
                'account/asset-valuation': 0.2,  # 获取账户资产估值
                'point/account': 5,  # 点卡余额查询
                'sub-user/user-list': 1,  # 获取子用户列表
                'sub-user/user-state': 1,  # 获取特定子用户的用户状态
                'sub-user/account-list': 1,  # 获取特定子用户的账户列表
                'sub-user/deposit-address': 1,  # 子用户充币地址查询
                'sub-user/query-deposit': 1,  # 子用户充币记录查询
                'user/api-key': 1,  # 母子用户API key信息查询
                'user/uid': 1,  # 母子用户获取用户UID
                'algo-orders/opening': 1,  # 查询未触发OPEN策略委托
                'algo-orders/history': 1,  # 查询策略委托历史
                'algo-orders/specific': 1,  # 查询特定策略委托
                'c2c/offers': 1,  # 查询借入借出订单
                'c2c/offer': 1,  # 查询特定借入借出订单及其交易记录
                'c2c/transactions': 1,  # 查询借入借出交易记录
                'c2c/repayment': 1,  # 查询还币交易记录
                'c2c/account': 1,  # 查询账户余额
                'etp/reference': 1,  # 基础参考信息
                'etp/transactions': 5,  # 获取杠杆ETP申赎记录
                'etp/transaction': 5,  # 获取特定杠杆ETP申赎记录
                'etp/rebalance': 1,  # 获取杠杆ETP调仓记录
                'etp/limit': 1,  # 获取ETP持仓限额
            },
            'post': {
                'account/transfer': 1,
                'account/repayment': 5,  # 归还借币（全仓逐仓通用）
                'point/transfer': 5,  # 点卡划转
                'sub-user/management': 1,  # 冻结/解冻子用户
                'sub-user/creation': 1,  # 子用户创建
                'sub-user/tradable-market': 1,  # 设置子用户交易权限
                'sub-user/transferability': 1,  # 设置子用户资产转出权限
                'sub-user/api-key-generation': 1,  # 子用户API key创建
                'sub-user/api-key-modification': 1,  # 修改子用户API key
                'sub-user/api-key-deletion': 1,  # 删除子用户API key
                'sub-user/deduct-mode': 1,  # 设置子用户手续费抵扣模式
                'algo-orders': 1,  # 策略委托下单
                'algo-orders/cancel-all-after': 1,  # 自动撤销订单
                'algo-orders/cancellation': 1,  # 策略委托（触发前）撤单
                'c2c/offer': 1,  # 借入借出下单
                'c2c/cancellation': 1,  # 借入借出撤单
                'c2c/cancel-all': 1,  # 撤销所有借入借出订单
                'c2c/repayment': 1,  # 还币
                'c2c/transfer': 1,  # 资产划转
                'etp/creation': 5,  # 杠杆ETP换入
                'etp/redemption': 5,  # 杠杆ETP换出
                'etp/{transactId}/cancel': 10,  # 杠杆ETP单个撤单
                'etp/batch-cancel': 50,  # 杠杆ETP批量撤单
            },
        },
        'market': {
            'get': {
                'history/kline': 1,  # 获取K线数据
                'detail/merged': 1,  # 获取聚合行情(Ticker)
                'depth': 1,  # 获取 Market Depth 数据
                'trade': 1,  # 获取 Trade Detail 数据
                'history/trade': 1,  # 批量获取最近的交易记录
                'detail': 1,  # 获取 Market Detail 24小时成交量数据
                'tickers': 1,
                'etp': 1,  # 获取杠杆ETP实时净值
            },
        },
        'public': {
            'get': {
                'common/symbols': 1,  # 查询系统支持的所有交易对
                'common/currencys': 1,  # 查询系统支持的所有币种
                'common/timestamp': 1,  # 查询系统当前时间
                'common/exchange': 1,  # order limits
                'settings/currencys': 1,  # ?language=en-US
            },
        },
        'private': {
            'get': {
                'account/accounts': 0.2,  # 查询当前用户的所有账户(即account-id)
                'account/accounts/{id}/balance': 0.2,  # 查询指定账户的余额
                'account/accounts/{sub-uid}': 1,
                'account/history': 4,
                'cross-margin/loan-info': 1,
                'margin/loan-info': 1,  # 查询借币币息率及额度
                'fee/fee-rate/get': 1,
                'order/openOrders': 0.4,
                'order/orders': 0.4,
                'order/orders/{id}': 0.4,  # 查询某个订单详情
                'order/orders/{id}/matchresults': 0.4,  # 查询某个订单的成交明细
                'order/orders/getClientOrder': 0.4,
                'order/history': 1,  # 查询当前委托、历史委托
                'order/matchresults': 1,  # 查询当前成交、历史成交
                # 'dw/withdraw-virtual/addresses',  # 查询虚拟币提现地址（Deprecated）
                'query/deposit-withdraw': 1,
                # 'margin/loan-info',  # duplicate
                'margin/loan-orders': 0.2,  # 借贷订单
                'margin/accounts/balance': 0.2,  # 借贷账户详情
                'cross-margin/loan-orders': 1,  # 查询借币订单
                'cross-margin/accounts/balance': 1,  # 借币账户详情
                'points/actions': 1,
                'points/orders': 1,
                'subuser/aggregate-balance': 10,
                'stable-coin/exchange_rate': 1,
                'stable-coin/quote': 1,
            },
            'post': {
                'account/transfer': 1,  # 资产划转(该节点为母用户和子用户进行资产划转的通用接口。)
                'futures/transfer': 1,
                'order/batch-orders': 0.4,
                'order/orders/place': 0.2,  # 创建并执行一个新订单(一步下单， 推荐使用)
                'order/orders/submitCancelClientOrder': 0.2,
                'order/orders/batchCancelOpenOrders': 0.4,
                # 'order/orders',  # 创建一个新的订单请求 （仅创建订单，不执行下单）
                # 'order/orders/{id}/place',  # 执行一个订单 （仅执行已创建的订单）
                'order/orders/{id}/submitcancel': 0.2,  # 申请撤销一个订单请求
                'order/orders/batchcancel': 0.4,  # 批量撤销订单
                # 'dw/balance/transfer',  # 资产划转
                'dw/withdraw/api/create': 1,  # 申请提现虚拟币
                # 'dw/withdraw-virtual/create',  # 申请提现虚拟币
                # 'dw/withdraw-virtual/{id}/place',  # 确认申请虚拟币提现（Deprecated）
                'dw/withdraw-virtual/{id}/cancel': 1,  # 申请取消提现虚拟币
                'dw/transfer-in/margin': 10,  # 现货账户划入至借贷账户
                'dw/transfer-out/margin': 10,  # 借贷账户划出至现货账户
                'margin/orders': 10,  # 申请借贷
                'margin/orders/{id}/repay': 10,  # 归还借贷
                'cross-margin/transfer-in': 1,  # 资产划转
                'cross-margin/transfer-out': 1,  # 资产划转
                'cross-margin/orders': 1,  # 申请借币
                'cross-margin/orders/{id}/repay': 1,  # 归还借币
                'stable-coin/exchange': 1,
                'subuser/transfer': 10,
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
    },
    'exceptions': {
        'broad': {
            'contract is restricted of closing positions on API.  Please contact customer service': OnMaintenance,
            'maintain': OnMaintenance,
        },
        'exact': {
            # err-code
            'bad-request': BadRequest,
            'base-date-limit-error': BadRequest,  # {"status":"error","err-code":"base-date-limit-error","err-msg":"date less than system limit","data":null}
            'api-not-support-temp-addr': PermissionDenied,  # {"status":"error","err-code":"api-not-support-temp-addr","err-msg":"API withdrawal does not support temporary addresses","data":null}
            'timeout': RequestTimeout,  # {"ts":1571653730865,"status":"error","err-code":"timeout","err-msg":"Request Timeout"}
            'gateway-internal-error': ExchangeNotAvailable,  # {"status":"error","err-code":"gateway-internal-error","err-msg":"Failed to load data. Try again later.","data":null}
            'account-frozen-balance-insufficient-error': InsufficientFunds,  # {"status":"error","err-code":"account-frozen-balance-insufficient-error","err-msg":"trade account balance is not enough, left: `0.0027`","data":null}
            'invalid-amount': InvalidOrder,  # eg "Paramemter `amount` is invalid."
            'order-limitorder-amount-min-error': InvalidOrder,  # limit order amount error, min: `0.001`
            'order-limitorder-amount-max-error': InvalidOrder,  # market order amount error, max: `1000000`
            'order-marketorder-amount-min-error': InvalidOrder,  # market order amount error, min: `0.01`
            'order-limitorder-price-min-error': InvalidOrder,  # limit order price error
            'order-limitorder-price-max-error': InvalidOrder,  # limit order price error
            'order-holding-limit-failed': InvalidOrder,  # {"status":"error","err-code":"order-holding-limit-failed","err-msg":"Order failed, exceeded the holding limit of self currency","data":null}
            'order-orderprice-precision-error': InvalidOrder,  # {"status":"error","err-code":"order-orderprice-precision-error","err-msg":"order price precision error, scale: `4`","data":null}
            'order-etp-nav-price-max-error': InvalidOrder,  # {"status":"error","err-code":"order-etp-nav-price-max-error","err-msg":"Order price cannot be higher than 5% of NAV","data":null}
            'order-orderstate-error': OrderNotFound,  # canceling an already canceled order
            'order-queryorder-invalid': OrderNotFound,  # querying a non-existent order
            'order-update-error': ExchangeNotAvailable,  # undocumented error
            'api-signature-check-failed': AuthenticationError,
            'api-signature-not-valid': AuthenticationError,  # {"status":"error","err-code":"api-signature-not-valid","err-msg":"Signature not valid: Incorrect Access key [Access key错误]","data":null}
            'base-record-invalid': OrderNotFound,  # https://github.com/ccxt/ccxt/issues/5750
            'base-symbol-trade-disabled': BadSymbol,  # {"status":"error","err-code":"base-symbol-trade-disabled","err-msg":"Trading is disabled for self symbol","data":null}
            'base-symbol-error': BadSymbol,  # {"status":"error","err-code":"base-symbol-error","err-msg":"The symbol is invalid","data":null}
            'system-maintenance': OnMaintenance,  # {"status": "error", "err-code": "system-maintenance", "err-msg": "System is in maintenance!", "data": null}
            # err-msg
            'invalid symbol': BadSymbol,  # {"ts":1568813334794,"status":"error","err-code":"invalid-parameter","err-msg":"invalid symbol"}
            'symbol trade not open now': BadSymbol,  # {"ts":1576210479343,"status":"error","err-code":"invalid-parameter","err-msg":"symbol trade not open now"}
        },
    },
    'options': {
        'defaultNetwork': 'ERC20',
        'networks': {
            'ETH': 'erc20',
            'TRX': 'trc20',
            'HRC20': 'hrc20',
            'HECO': 'hrc20',
            'HT': 'hrc20',
            'ALGO': 'algo',
            'OMNI': '',
        },
        # https://github.com/ccxt/ccxt/issues/5376
        'fetchOrdersByStatesMethod': 'private_get_order_orders',  # 'private_get_order_history'  # https://github.com/ccxt/ccxt/pull/5392
        'fetchOpenOrdersMethod': 'fetch_open_orders_v1',  # 'fetch_open_orders_v2'  # https://github.com/ccxt/ccxt/issues/5388
        'createMarketBuyOrderRequiresPrice': True,
        'fetchMarketsMethod': 'publicGetCommonSymbols',
        'fetchBalanceMethod': 'privateGetAccountAccountsIdBalance',
        'createOrderMethod': 'privatePostOrderOrdersPlace',
        'language': 'en-US',
        'broker': {
            'id': 'AA03022abc',
        },
    },
    'commonCurrencies': {
        # https://github.com/ccxt/ccxt/issues/6081
        # https://github.com/ccxt/ccxt/issues/3365
        # https://github.com/ccxt/ccxt/issues/2873
        'GET': 'Themis',  # conflict with GET(Guaranteed Entrance Token, GET Protocol)
        'GTC': 'Game.com',  # conflict with Gitcoin and Gastrocoin
        'HIT': 'HitChain',
        'HOT': 'Hydro Protocol',  # conflict with HOT(Holo) https://github.com/ccxt/ccxt/issues/4929
        # https://github.com/ccxt/ccxt/issues/7399
        # https://coinmarketcap.com/currencies/pnetwork/
        # https://coinmarketcap.com/currencies/penta/markets/
        # https://en.cryptonomist.ch/blog/eidoo/the-edo-to-pnt-upgrade-what-you-need-to-know-updated/
        'PNT': 'Penta',
        'SBTC': 'Super Bitcoin',
        'BIFI': 'Bitcoin File',  # conflict with Beefy.Finance https://github.com/ccxt/ccxt/issues/8706
    },
},
{
    'id': 'btcbox',
    'name': 'BtcBox',
    'countries': ['JP'],
    'rateLimit': 1000,
    'version': 'v1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkOHLCV': False,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': None,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87327317-98c55400-c53c-11ea-9a11-81f7d951cc74.jpg',
        'api': 'https://www.btcbox.co.jp/api',
        'www': 'https://www.btcbox.co.jp/',
        'doc': 'https://blog.btcbox.jp/en/archives/8762',
        'fees': 'https://support.btcbox.co.jp/hc/en-us/articles/360001235694-Fees-introduction',
    },
    'api': {
        'public': {
            'get': [
                'depth',
                'orders',
                'ticker',
            ],
        },
        'private': {
            'post': [
                'balance',
                'trade_add',
                'trade_cancel',
                'trade_list',
                'trade_view',
                'wallet',
            ],
        },
    },
    'markets': {
        'BTC/JPY': {'id': 'btc', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY', 'baseId': 'btc', 'quoteId': 'jpy', 'taker': 0.05 / 100, 'maker': 0.05 / 100, 'type': 'spot', 'spot': True},
        'ETH/JPY': {'id': 'eth', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY', 'baseId': 'eth', 'quoteId': 'jpy', 'taker': 0.10 / 100, 'maker': 0.10 / 100, 'type': 'spot', 'spot': True},
        'LTC/JPY': {'id': 'ltc', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY', 'baseId': 'ltc', 'quoteId': 'jpy', 'taker': 0.10 / 100, 'maker': 0.10 / 100, 'type': 'spot', 'spot': True},
        'BCH/JPY': {'id': 'bch', 'symbol': 'BCH/JPY', 'base': 'BCH', 'quote': 'JPY', 'baseId': 'bch', 'quoteId': 'jpy', 'taker': 0.10 / 100, 'maker': 0.10 / 100, 'type': 'spot', 'spot': True},
    },
    'exceptions': {
        '104': AuthenticationError,
        '105': PermissionDenied,
        '106': InvalidNonce,
        '107': InvalidOrder,  # price should be an integer
        '200': InsufficientFunds,
        '201': InvalidOrder,  # amount too small
        '202': InvalidOrder,  # price should be [0 : 1000000]
        '203': OrderNotFound,
        '401': OrderNotFound,  # cancel canceled, closed or non-existent order
        '402': DDoSProtection,
    },
},
{
    'id': 'bittrex',
    'name': 'Bittrex',
    'countries': ['US'],
    'version': 'v3',
    'rateLimit': 1500,
    'certified': False,
    'pro': True,
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createMarketOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFees': None,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': 'emulated',
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderTrades': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': True,
        'fetchTransactions': None,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': 'MINUTE_1',
        '5m': 'MINUTE_5',
        '1h': 'HOUR_1',
        '1d': 'DAY_1',
    },
    'hostname': 'bittrex.com',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87153921-edf53180-c2c0-11ea-96b9-f2a9a95a455b.jpg',
        'api': {
            'public': 'https://api.bittrex.com',
            'private': 'https://api.bittrex.com',
        },
        'www': 'https://bittrex.com',
        'doc': [
            'https://bittrex.github.io/api/v3',
        ],
        'fees': [
            'https://bittrex.zendesk.com/hc/en-us/articles/115003684371-BITTREX-SERVICE-FEES-AND-WITHDRAWAL-LIMITATIONS',
            'https://bittrex.zendesk.com/hc/en-us/articles/115000199651-What-fees-does-Bittrex-charge-',
        ],
        'referral': 'https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B',
    },
    'api': {
        'public': {
            'get': [
                'ping',
                'currencies',
                'currencies/{symbol}',
                'markets',
                'markets/tickers',
                'markets/summaries',
                'markets/{marketSymbol}',
                'markets/{marketSymbol}/summary',
                'markets/{marketSymbol}/orderbook',
                'markets/{marketSymbol}/trades',
                'markets/{marketSymbol}/ticker',
                'markets/{marketSymbol}/candles/{candleInterval}/recent',
                'markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}/{day}',
                'markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}',
                'markets/{marketSymbol}/candles/{candleInterval}/historical/{year}',
            ],
        },
        'private': {
            'get': [
                'account',
                'account/fees/fiat',
                'account/fees/fiat/{currencySymbol}',
                'account/fees/trading',
                'account/fees/trading/{marketSymbol}',
                'account/volume',
                'addresses',
                'addresses/{currencySymbol}',
                'balances',
                'balances/{currencySymbol}',
                'deposits/open',
                'deposits/closed',
                'deposits/ByTxId/{txId}',
                'deposits/{depositId}',
                'orders/closed',
                'orders/open',
                'orders/{orderId}',
                'orders/{orderId}/executions',
                'ping',
                'subaccounts/{subaccountId}',
                'subaccounts',
                'withdrawals/open',
                'withdrawals/closed',
                'withdrawals/ByTxId/{txId}',
                'withdrawals/{withdrawalId}',
                'withdrawals/whitelistAddresses',
                'conditional-orders/{conditionalOrderId}',
                'conditional-orders/closed',
                'conditional-orders/open',
                'transfers/sent',
                'transfers/received',
                'transfers/{transferId}',
            ],
            'post': [
                'addresses',
                'orders',
                'subaccounts',
                'withdrawals',
                'conditional-orders',
                'transfers',
            ],
            'delete': [
                'orders/open',
                'orders/{orderId}',
                'withdrawals/{withdrawalId}',
                'conditional-orders/{conditionalOrderId}',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'maker': self.parse_number('0.0075'),
            'taker': self.parse_number('0.0075'),
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
        },
    },
    'exceptions': {
        'exact': {
            'BAD_REQUEST': BadRequest,  # {"code":"BAD_REQUEST","detail":"Refer to the data field for specific field validation failures.","data":{"invalidRequestParameter":"day"}}
            'STARTDATE_OUT_OF_RANGE': BadRequest,  # {"code":"STARTDATE_OUT_OF_RANGE"}
            # 'Call to Cancel was throttled. Try again in 60 seconds.': DDoSProtection,
            # 'Call to GetBalances was throttled. Try again in 60 seconds.': DDoSProtection,
            'APISIGN_NOT_PROVIDED': AuthenticationError,
            'APIKEY_INVALID': AuthenticationError,
            'INVALID_SIGNATURE': AuthenticationError,
            'INVALID_CURRENCY': ExchangeError,
            'INVALID_PERMISSION': AuthenticationError,
            'INSUFFICIENT_FUNDS': InsufficientFunds,
            'INVALID_CEILING_MARKET_BUY': InvalidOrder,
            'INVALID_FIAT_ACCOUNT': InvalidOrder,
            'INVALID_ORDER_TYPE': InvalidOrder,
            'QUANTITY_NOT_PROVIDED': InvalidOrder,
            'MIN_TRADE_REQUIREMENT_NOT_MET': InvalidOrder,
            'NOT_FOUND': OrderNotFound,
            'ORDER_NOT_OPEN': OrderNotFound,
            'INVALID_ORDER': InvalidOrder,
            'UUID_INVALID': OrderNotFound,
            'RATE_NOT_PROVIDED': InvalidOrder,  # createLimitBuyOrder('ETH/BTC', 1, 0)
            'INVALID_MARKET': BadSymbol,  # {"success":false,"message":"INVALID_MARKET","result":null,"explanation":null}
            'WHITELIST_VIOLATION_IP': PermissionDenied,
            'DUST_TRADE_DISALLOWED_MIN_VALUE': InvalidOrder,
            'RESTRICTED_MARKET': BadSymbol,
            'We are down for scheduled maintenance, but we\u2019ll be back up shortly.': OnMaintenance,  # {"success":false,"message":"We are down for scheduled maintenance, but we\u2019ll be back up shortly.","result":null,"explanation":null}
        },
        'broad': {
            'throttled': DDoSProtection,
            'problem': ExchangeNotAvailable,
        },
    },
    'options': {
        'fetchTicker': {
            'method': 'publicGetMarketsMarketSymbolTicker',  # publicGetMarketsMarketSymbolSummary
        },
        'fetchTickers': {
            'method': 'publicGetMarketsTickers',  # publicGetMarketsSummaries
        },
        'parseOrderStatus': False,
        'hasAlreadyAuthenticatedSuccessfully': False,  # a workaround for APIKEY_INVALID
        # With certain currencies, like
        # AEON, BTS, GXS, NXT, SBD, STEEM, STR, XEM, XLM, XMR, XRP
        # an additional tag / memo / payment id is usually required by exchanges.
        # With Bittrex some currencies imply the "base address + tag" logic.
        # The base address for depositing is stored on self.currencies[code]
        # The base address identifies the exchange as the recipient
        # while the tag identifies the user account within the exchange
        # and the tag is retrieved with fetchDepositAddress.
        'tag': {
            'NXT': True,  # NXT, BURST
            'CRYPTO_NOTE_PAYMENTID': True,  # AEON, XMR
            'BITSHAREX': True,  # BTS
            'RIPPLE': True,  # XRP
            'NEM': True,  # XEM
            'STELLAR': True,  # XLM
            'STEEM': True,  # SBD, GOLOS
            # https://github.com/ccxt/ccxt/issues/4794
            # 'LISK': True,  # LSK
        },
        'subaccountId': None,
        # see the implementation of fetchClosedOrdersV3 below
        # 'fetchClosedOrdersMethod': 'fetch_closed_orders_v3',
        'fetchClosedOrdersFilterBySince': True,
        # 'createOrderMethod': 'create_order_v1',
    },
    'commonCurrencies': {
        'BIFI': 'Bifrost Finance',
        'BTR': 'BTRIPS',
        'MEME': 'Memetic',  # conflict with Meme Inu
        'MER': 'Mercury',  # conflict with Mercurial Finance
        'PROS': 'Pros.Finance',
        'REPV2': 'REP',
        'TON': 'Tokamak Network',
    },
},
{
    'id': 'kucoin',
    'name': 'KuCoin',
    'countries': ['SC'],
    # note "only some endpoints are rate-limited"
    # so I set the 'ratelimit' on those which supposedly 'arent ratelimited'
    # to the limit of the cheapest endpoint
    # 60 requests in 3 seconds = 20 requests per second =>( 1000ms / 20 ) = 50 ms between requests on average
    'rateLimit': 50,
    'version': 'v2',
    'certified': False,
    'pro': True,
    'comment': 'Platform 2.0',
    'quoteJsonNumbers': False,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,
        'swap': False,
        'future': False,
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRates': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFee': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchL3OrderBook': True,
        'fetchLedger': True,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrdersByStatus': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': False,
        'fetchWithdrawals': True,
        'transfer': True,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg',
        'referral': 'https://www.kucoin.com/?rcode=E5wkqe',
        'api': {
            'public': 'https://openapi-v2.kucoin.com',
            'private': 'https://openapi-v2.kucoin.com',
            'futuresPrivate': 'https://api-futures.kucoin.com',
            'futuresPublic': 'https://api-futures.kucoin.com',
        },
        'test': {
            'public': 'https://openapi-sandbox.kucoin.com',
            'private': 'https://openapi-sandbox.kucoin.com',
            'futuresPrivate': 'https://api-sandbox-futures.kucoin.com',
            'futuresPublic': 'https://api-sandbox-futures.kucoin.com',
        },
        'www': 'https://www.kucoin.com',
        'doc': [
            'https://docs.kucoin.com',
        ],
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'password': True,
    },
    'api': {
        'public': {
            'get': {
                'timestamp': 1,
                'status': 1,
                'symbols': 1,
                'markets': 1,
                'market/allTickers': 1,
                'market/orderbook/level{level}_{limit}': 1,
                'market/orderbook/level2_20': 1,
                'market/orderbook/level2_100': 1,
                'market/histories': 1,
                'market/candles': 1,
                'market/stats': 1,
                'currencies': 1,
                'currencies/{currency}': 1,
                'prices': 1,
                'mark-price/{symbol}/current': 1,
                'margin/config': 1,
            },
            'post': {
                'bullet-public': 1,
            },
        },
        'private': {
            'get': {
                'market/orderbook/level{level}': 1,
                'market/orderbook/level2': {'v3': 2},  # 30/3s = 10/s => cost = 20 / 10 = 2
                'market/orderbook/level3': 1,
                'accounts': 1,
                'accounts/{accountId}': 1,
                # 'accounts/{accountId}/ledgers': 1, Deprecated endpoint
                'accounts/ledgers': 3.333,  # 18/3s = 6/s => cost = 20 / 6 = 3.333
                'accounts/{accountId}/holds': 1,
                'accounts/transferable': 1,
                'base-fee': 1,
                'sub/user': 1,
                'sub-accounts': 1,
                'sub-accounts/{subUserId}': 1,
                'deposit-addresses': 1,
                'deposits': 10,  # 6/3s = 2/s => cost = 20 / 2 = 10
                'hist-deposits': 10,  # 6/3 = 2/s => cost = 20 / 2 = 10
                'hist-orders': 1,
                'hist-withdrawals': 10,  # 6/3 = 2/s => cost = 20 / 2 = 10
                'withdrawals': 10,  # 6/3 = 2/s => cost = 20 / 2 = 10
                'withdrawals/quotas': 1,
                'orders': 2,  # 30/3s =  10/s => cost  = 20 / 10 = 2
                'order/client-order/{clientOid}': 1,
                'orders/{orderId}': 1,
                'limit/orders': 1,
                'fills': 6.66667,  # 9/3s = 3/s => cost  = 20 / 3 = 6.666667
                'limit/fills': 1,
                'margin/account': 1,
                'margin/borrow': 1,
                'margin/borrow/outstanding': 1,
                'margin/borrow/borrow/repaid': 1,
                'margin/lend/active': 1,
                'margin/lend/done': 1,
                'margin/lend/trade/unsettled': 1,
                'margin/lend/trade/settled': 1,
                'margin/lend/assets': 1,
                'margin/market': 1,
                'margin/trade/last': 1,
                'stop-order/{orderId}': 1,
                'stop-order': 1,
                'stop-order/queryOrderByClientOid': 1,
                'trade-fees': 1.3333,  # 45/3s = 15/s => cost = 20 / 15 = 1.333
            },
            'post': {
                'accounts': 1,
                'accounts/inner-transfer': {'v2': 1},
                'accounts/sub-transfer': {'v2': 25},  # bad docs
                'deposit-addresses': 1,
                'withdrawals': 1,
                'orders': 4,  # 45/3s = 15/s => cost = 20 / 15 = 1.333333
                'orders/multi': 20,  # 3/3s = 1/s => cost = 20 / 1 = 20
                'margin/borrow': 1,
                'margin/order': 1,
                'margin/repay/all': 1,
                'margin/repay/single': 1,
                'margin/lend': 1,
                'margin/toggle-auto-lend': 1,
                'bullet-private': 1,
                'stop-order': 1,
            },
            'delete': {
                'withdrawals/{withdrawalId}': 1,
                'orders': 20,  # 3/3s = 1/s => cost = 20/1
                'orders/client-order/{clientOid}': 1,
                'orders/{orderId}': 1,  # rateLimit: 60/3s = 20/s => cost = 1
                'margin/lend/{orderId}': 1,
                'stop-order/cancelOrderByClientOid': 1,
                'stop-order/{orderId}': 1,
                'stop-order/cancel': 1,
            },
        },
        'futuresPublic': {
            # cheapest futures 'limited' endpoint is 40  requests per 3 seconds = 14.333 per second => cost = 20/14.333 = 1.3953
            'get': {
                'contracts/active': 1.3953,
                'contracts/{symbol}': 1.3953,
                'ticker': 1.3953,
                'level2/snapshot': 2,  # 30 requests per 3 seconds = 10 requests per second => cost = 20/10 = 2
                'level2/depth20': 1.3953,
                'level2/depth100': 1.3953,
                'level2/message/query': 1.3953,
                'level3/message/query': 1.3953,  # deprecated，level3/snapshot is suggested
                'level3/snapshot': 1.3953,  # v2
                'trade/history': 1.3953,
                'interest/query': 1.3953,
                'index/query': 1.3953,
                'mark-price/{symbol}/current': 1.3953,
                'premium/query': 1.3953,
                'funding-rate/{symbol}/current': 1.3953,
                'timestamp': 1.3953,
                'status': 1.3953,
                'kline/query': 1.3953,
            },
            'post': {
                'bullet-public': 1.3953,
            },
        },
        'futuresPrivate': {
            'get': {
                'account-overview': 2,  # 30 requests per 3 seconds = 10 per second => cost = 20/10 = 2
                'transaction-history': 6.666,  # 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                'deposit-address': 1.3953,
                'deposit-list': 1.3953,
                'withdrawals/quotas': 1.3953,
                'withdrawal-list': 1.3953,
                'transfer-list': 1.3953,
                'orders': 1.3953,
                'stopOrders': 1.3953,
                'recentDoneOrders': 1.3953,
                'orders/{order-id}': 1.3953,  # ?clientOid={client-order-id}  # get order by orderId
                'orders/byClientOid': 1.3953,  # ?clientOid=eresc138b21023a909e5ad59  # get order by clientOid
                'fills': 6.666,  # 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                'recentFills': 6.666,  # 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                'openOrderStatistics': 1.3953,
                'position': 1.3953,
                'positions': 6.666,  # 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                'funding-history': 6.666,  # 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
            },
            'post': {
                'withdrawals': 1.3953,
                'transfer-out': 1.3953,  # v2
                'orders': 1.3953,
                'position/margin/auto-deposit-status': 1.3953,
                'position/margin/deposit-margin': 1.3953,
                'bullet-private': 1.3953,
            },
            'delete': {
                'withdrawals/{withdrawalId}': 1.3953,
                'cancel/transfer-out': 1.3953,
                'orders/{order-id}': 1.3953,  # 40 requests per 3 seconds = 14.333 per second => cost = 20/14.333 = 1.395
                'orders': 6.666,  # 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                'stopOrders': 1.3953,
            },
        },
    },
    'timeframes': {
        '1m': '1min',
        '3m': '3min',
        '5m': '5min',
        '15m': '15min',
        '30m': '30min',
        '1h': '1hour',
        '2h': '2hour',
        '4h': '4hour',
        '6h': '6hour',
        '8h': '8hour',
        '12h': '12hour',
        '1d': '1day',
        '1w': '1week',
    },
    'exceptions': {
        'exact': {
            'order not exist': OrderNotFound,
            'order not exist.': OrderNotFound,  # duplicated error temporarily
            'order_not_exist': OrderNotFound,  # {"code":"order_not_exist","msg":"order_not_exist"} ¯\_(ツ)_/¯
            'order_not_exist_or_not_allow_to_cancel': InvalidOrder,  # {"code":"400100","msg":"order_not_exist_or_not_allow_to_cancel"}
            'Order size below the minimum requirement.': InvalidOrder,  # {"code":"400100","msg":"Order size below the minimum requirement."}
            'The withdrawal amount is below the minimum requirement.': ExchangeError,  # {"code":"400100","msg":"The withdrawal amount is below the minimum requirement."}
            'Unsuccessful! Exceeded the max. funds out-transfer limit': InsufficientFunds,  # {"code":"200000","msg":"Unsuccessful! Exceeded the max. funds out-transfer limit"}
            '400': BadRequest,
            '401': AuthenticationError,
            '403': NotSupported,
            '404': NotSupported,
            '405': NotSupported,
            '429': RateLimitExceeded,
            '500': ExchangeNotAvailable,  # Internal Server Error -- We had a problem with our server. Try again later.
            '503': ExchangeNotAvailable,
            '101030': PermissionDenied,  # {"code":"101030","msg":"You haven't yet enabled the margin trading"}
            '200004': InsufficientFunds,
            '230003': InsufficientFunds,  # {"code":"230003","msg":"Balance insufficient!"}
            '260100': InsufficientFunds,  # {"code":"260100","msg":"account.noBalance"}
            '300000': InvalidOrder,
            '400000': BadSymbol,
            '400001': AuthenticationError,
            '400002': InvalidNonce,
            '400003': AuthenticationError,
            '400004': AuthenticationError,
            '400005': AuthenticationError,
            '400006': AuthenticationError,
            '400007': AuthenticationError,
            '400008': NotSupported,
            '400100': BadRequest,
            '400350': InvalidOrder,  # {"code":"400350","msg":"Upper limit for holding: 10,000USDT, you can still buy 10,000USDT worth of coin."}
            '400500': InvalidOrder,  # {"code":"400500","msg":"Your located country/region is currently not supported for the trading of self token"}
            '401000': BadRequest,  # {"code":"401000","msg":"The interface has been deprecated"}
            '411100': AccountSuspended,
            '415000': BadRequest,  # {"code":"415000","msg":"Unsupported Media Type"}
            '500000': ExchangeNotAvailable,  # {"code":"500000","msg":"Internal Server Error"}
            '260220': InvalidAddress,  # {"code": "260220", "msg": "deposit.address.not.exists"}
        },
        'broad': {
            'Exceeded the access frequency': RateLimitExceeded,
            'require more permission': PermissionDenied,
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.001'),
            'maker': self.parse_number('0.001'),
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.001')],
                    [self.parse_number('50'), self.parse_number('0.001')],
                    [self.parse_number('200'), self.parse_number('0.0009')],
                    [self.parse_number('500'), self.parse_number('0.0008')],
                    [self.parse_number('1000'), self.parse_number('0.0007')],
                    [self.parse_number('2000'), self.parse_number('0.0007')],
                    [self.parse_number('4000'), self.parse_number('0.0006')],
                    [self.parse_number('8000'), self.parse_number('0.0005')],
                    [self.parse_number('15000'), self.parse_number('0.00045')],
                    [self.parse_number('25000'), self.parse_number('0.0004')],
                    [self.parse_number('40000'), self.parse_number('0.00035')],
                    [self.parse_number('60000'), self.parse_number('0.0003')],
                    [self.parse_number('80000'), self.parse_number('0.00025')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.001')],
                    [self.parse_number('50'), self.parse_number('0.0009')],
                    [self.parse_number('200'), self.parse_number('0.0007')],
                    [self.parse_number('500'), self.parse_number('0.0005')],
                    [self.parse_number('1000'), self.parse_number('0.0003')],
                    [self.parse_number('2000'), self.parse_number('0')],
                    [self.parse_number('4000'), self.parse_number('0')],
                    [self.parse_number('8000'), self.parse_number('0')],
                    [self.parse_number('15000'), self.parse_number('-0.00005')],
                    [self.parse_number('25000'), self.parse_number('-0.00005')],
                    [self.parse_number('40000'), self.parse_number('-0.00005')],
                    [self.parse_number('60000'), self.parse_number('-0.00005')],
                    [self.parse_number('80000'), self.parse_number('-0.00005')],
                ],
            },
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {},
            'deposit': {},
        },
    },
    'commonCurrencies': {
        'HOT': 'HOTNOW',
        'EDGE': 'DADI',  # https://github.com/ccxt/ccxt/issues/5756
        'WAX': 'WAXP',
        'TRY': 'Trias',
        'VAI': 'VAIOT',
    },
    'options': {
        'version': 'v1',
        'symbolSeparator': '-',
        'fetchMyTradesMethod': 'private_get_fills',
        'fetchBalance': 'trade',
        'fetchMarkets': {
            'fetchTickersFees': True,
        },
        # endpoint versions
        'versions': {
            'public': {
                'GET': {
                    'status': 'v1',
                    'market/orderbook/level2_20': 'v1',
                    'market/orderbook/level2_100': 'v1',
                    'market/orderbook/level{level}_{limit}': 'v1',
                },
            },
            'private': {
                'GET': {
                    'market/orderbook/level2': 'v3',
                    'market/orderbook/level3': 'v3',
                    'market/orderbook/level{level}': 'v3',
                },
                'POST': {
                    'accounts/inner-transfer': 'v2',
                    'accounts/sub-transfer': 'v2',
                },
            },
            'futuresPrivate': {
                'GET': {
                    'account-overview': 'v1',
                    'positions': 'v1',
                },
                'POST': {
                    'transfer-out': 'v2',
                },
            },
            'futuresPublic': {
                'GET': {
                    'level3/snapshot': 'v2',
                },
            },
        },
        'accountsByType': {
            'trade': 'trade',
            'trading': 'trade',
            'spot': 'trade',
            'margin': 'margin',
            'main': 'main',
            'funding': 'main',
            'future': 'contract',
            'futures': 'contract',
            'contract': 'contract',
            'pool': 'pool',
            'pool-x': 'pool',
        },
        'networks': {
            'ETH': 'eth',
            'ERC20': 'eth',
            'TRX': 'trx',
            'TRC20': 'trx',
            'KCC': 'kcc',
            'TERRA': 'luna',
        },
    },
},
{
    'id': 'btcmarkets',
    'name': 'BTC Markets',
    'countries': ['AU'],  # Australia
    'rateLimit': 1000,  # market data cached for 1 second(trades cached for 2 seconds)
    'version': 'v3',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': 'emulated',
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/89731817-b3fb8480-da52-11ea-817f-783b08aaf32b.jpg',
        'api': {
            'public': 'https://api.btcmarkets.net',
            'private': 'https://api.btcmarkets.net',
        },
        'www': 'https://btcmarkets.net',
        'doc': [
            'https://api.btcmarkets.net/doc/v3',
            'https://github.com/BTCMarkets/API',
        ],
    },
    'api': {
        'public': {
            'get': [
                'markets',
                'markets/{marketId}/ticker',
                'markets/{marketId}/trades',
                'markets/{marketId}/orderbook',
                'markets/{marketId}/candles',
                'markets/tickers',
                'markets/orderbooks',
                'time',
            ],
        },
        'private': {
            'get': [
                'orders',
                'orders/{id}',
                'batchorders/{ids}',
                'trades',
                'trades/{id}',
                'withdrawals',
                'withdrawals/{id}',
                'deposits',
                'deposits/{id}',
                'transfers',
                'transfers/{id}',
                'addresses',
                'withdrawal-fees',
                'assets',
                'accounts/me/trading-fees',
                'accounts/me/withdrawal-limits',
                'accounts/me/balances',
                'accounts/me/transactions',
                'reports/{id}',
            ],
            'post': [
                'orders',
                'batchorders',
                'withdrawals',
                'reports',
            ],
            'delete': [
                'orders',
                'orders/{id}',
                'batchorders/{ids}',
            ],
            'put': [
                'orders/{id}',
            ],
        },
    },
    'timeframes': {
        '1m': '1m',
        '1h': '1h',
        '1d': '1d',
    },
    'exceptions': {
        '3': InvalidOrder,
        '6': DDoSProtection,
        'InsufficientFund': InsufficientFunds,
        'InvalidPrice': InvalidOrder,
        'InvalidAmount': InvalidOrder,
        'MissingArgument': InvalidOrder,
        'OrderAlreadyCancelled': InvalidOrder,
        'OrderNotFound': OrderNotFound,
        'OrderStatusIsFinal': InvalidOrder,
        'InvalidPaginationParameter': BadRequest,
    },
    'fees': {
        'percentage': True,
        'tierBased': True,
        'maker': self.parse_number('-0.0005'),
        'taker': self.parse_number('0.0020'),
    },
    'options': {
        'fees': {
            'AUD': {
                'maker': 0.85 / 100,
                'taker': 0.85 / 100,
            },
        },
    },
},
{
    'id': 'gateio',
    'name': 'Gate.io',
    'countries': ['KR'],
    'rateLimit': 10 / 3,  # 300 requests per second or 3.33ms
    'version': 'v4',
    'certified': True,
    'pro': True,
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg',
        'doc': 'https://www.gate.io/docs/apiv4/en/index.html',
        'www': 'https://gate.io/',
        'api': {
            'public': 'https://api.gateio.ws/api/v4',
            'private': 'https://api.gateio.ws/api/v4',
        },
        'referral': {
            'url': 'https://www.gate.io/ref/2436035',
            'discount': 0.2,
        },
    },
    'has': {
        'CORS': None,
        'spot': True,
        'margin': True,
        'swap': True,
        'future': True,
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createMarketOrder': False,
        'createOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFees': True,
        'fetchFundingHistory': True,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': True,
        'fetchFundingRates': True,
        'fetchIndexOHLCV': True,
        'fetchLeverageTiers': True,
        'fetchMarketLeverageTiers': 'emulated',
        'fetchMarkets': True,
        'fetchMarkOHLCV': True,
        'fetchMyTrades': True,
        'fetchNetworkDepositAddress': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPositions': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': False,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': True,
        'fetchWithdrawals': True,
        'setLeverage': True,
        'transfer': True,
        'withdraw': True,
    },
    'api': {
        'public': {
            'spot': {
                'get': {
                    'currencies': 1,
                    'currencies/{currency}': 1,
                    'currency_pairs': 1,
                    'currency_pairs/{currency_pair}': 1,
                    'tickers': 1,
                    'order_book': 1,
                    'trades': 1,
                    'candlesticks': 1,
                },
            },
            'margin': {
                'get': {
                    'currency_pairs': 1,
                    'currency_pairs/{currency_pair}': 1,
                    'cross/currencies': 1,
                    'cross/currencies/{currency}': 1,
                    'funding_book': 1,
                },
            },
            'futures': {
                'get': {
                    '{settle}/contracts': 1.5,
                    '{settle}/contracts/{contract}': 1.5,
                    '{settle}/order_book': 1.5,
                    '{settle}/trades': 1.5,
                    '{settle}/candlesticks': 1.5,
                    '{settle}/tickers': 1.5,
                    '{settle}/funding_rate': 1.5,
                    '{settle}/insurance': 1.5,
                    '{settle}/contract_stats': 1.5,
                    '{settle}/liq_orders': 1.5,
                },
            },
            'delivery': {
                'get': {
                    '{settle}/contracts': 1.5,
                    '{settle}/contracts/{contract}': 1.5,
                    '{settle}/order_book': 1.5,
                    '{settle}/trades': 1.5,
                    '{settle}/candlesticks': 1.5,
                    '{settle}/tickers': 1.5,
                    '{settle}/insurance': 1.5,
                },
            },
            'options': {
                'get': {
                    'underlyings': 1.5,
                    'expirations': 1.5,
                    'contracts': 1.5,
                    'contracts/{contract}': 1.5,
                    'settlements': 1.5,
                    'settlements/{contract}': 1.5,
                    'order_book': 1.5,
                    'tickers': 1.5,
                    'underlying/tickers/{underlying}': 1.5,
                    'candlesticks': 1.5,
                    'underlying/candlesticks': 1.5,
                    'trades': 1.5,
                },
            },
        },
        'private': {
            'withdrawals': {
                'post': {
                    '': 3000,  # 3000 = 10 seconds
                },
                'delete': {
                    '{withdrawal_id}': 300,
                },
            },
            'wallet': {
                'get': {
                    'deposit_address': 300,
                    'withdrawals': 300,
                    'deposits': 300,
                    'sub_account_transfers': 300,
                    'withdraw_status': 300,
                    'sub_account_balances': 300,
                    'fee': 300,
                },
                'post': {
                    'transfers': 300,
                    'sub_account_transfers': 300,
                },
            },
            'spot': {
                'get': {
                    'accounts': 1,
                    'open_orders': 1,
                    'orders': 1,
                    'orders/{order_id}': 1,
                    'my_trades': 1,
                    'price_orders': 1,
                    'price_orders/{order_id}': 1,
                },
                'post': {
                    'batch_orders': 1,
                    'orders': 1,
                    'cancel_batch_orders': 1,
                    'price_orders': 1,
                },
                'delete': {
                    'orders': 1,
                    'orders/{order_id}': 1,
                    'price_orders': 1,
                    'price_orders/{order_id}': 1,
                },
            },
            'margin': {
                'get': {
                    'accounts': 1.5,
                    'account_book': 1.5,
                    'funding_accounts': 1.5,
                    'loans': 1.5,
                    'loans/{loan_id}': 1.5,
                    'loans/{loan_id}/repayment': 1.5,
                    'loan_records': 1.5,
                    'loan_records/{load_record_id}': 1.5,
                    'auto_repay': 1.5,
                    'transferable': 1.5,
                    'cross/accounts': 1.5,
                    'cross/account_book': 1.5,
                    'cross/loans': 1.5,
                    'cross/loans/{loan_id}': 1.5,
                    'cross/loans/repayments': 1.5,
                    'cross/transferable': 1.5,
                },
                'post': {
                    'loans': 1.5,
                    'merged_loans': 1.5,
                    'loans/{loan_id}/repayment': 1.5,
                    'auto_repay': 1.5,
                    'cross/loans': 1.5,
                    'cross/loans/repayments': 1.5,
                },
                'patch': {
                    'loans/{loan_id}': 1.5,
                    'loan_records/{loan_record_id}': 1.5,
                },
                'delete': {
                    'loans/{loan_id}': 1.5,
                },
            },
            'futures': {
                'get': {
                    '{settle}/accounts': 1.5,
                    '{settle}/account_book': 1.5,
                    '{settle}/positions': 1.5,
                    '{settle}/positions/{contract}': 1.5,
                    '{settle}/orders': 1.5,
                    '{settle}/orders/{order_id}': 1.5,
                    '{settle}/my_trades': 1.5,
                    '{settle}/position_close': 1.5,
                    '{settle}/liquidates': 1.5,
                    '{settle}/price_orders': 1.5,
                    '{settle}/price_orders/{order_id}': 1.5,
                },
                'post': {
                    '{settle}/positions/{contract}/margin': 1.5,
                    '{settle}/positions/{contract}/leverage': 1.5,
                    '{settle}/positions/{contract}/risk_limit': 1.5,
                    '{settle}/dual_mode': 1.5,
                    '{settle}/dual_comp/positions/{contract}': 1.5,
                    '{settle}/dual_comp/positions/{contract}/margin': 1.5,
                    '{settle}/dual_comp/positions/{contract}/leverage': 1.5,
                    '{settle}/dual_comp/positions/{contract}/risk_limit': 1.5,
                    '{settle}/orders': 1.5,
                    '{settle}/price_orders': 1.5,
                },
                'delete': {
                    '{settle}/orders': 1.5,
                    '{settle}/orders/{order_id}': 1.5,
                    '{settle}/price_orders': 1.5,
                    '{settle}/price_orders/{order_id}': 1.5,
                },
            },
            'delivery': {
                'get': {
                    '{settle}/accounts': 1.5,
                    '{settle}/account_book': 1.5,
                    '{settle}/positions': 1.5,
                    '{settle}/positions/{contract}': 1.5,
                    '{settle}/orders': 1.5,
                    '{settle}/orders/{order_id}': 1.5,
                    '{settle}/my_trades': 1.5,
                    '{settle}/position_close': 1.5,
                    '{settle}/liquidates': 1.5,
                    '{settle}/price_orders': 1.5,
                    '{settle}/price_orders/{order_id}': 1.5,
                },
                'post': {
                    '{settle}/positions/{contract}/margin': 1.5,
                    '{settle}/positions/{contract}/leverage': 1.5,
                    '{settle}/positions/{contract}/risk_limit': 1.5,
                    '{settle}/orders': 1.5,
                    '{settle}/price_orders': 1.5,
                },
                'delete': {
                    '{settle}/orders': 1.5,
                    '{settle}/orders/{order_id}': 1.5,
                    '{settle}/price_orders': 1.5,
                    '{settle}/price_orders/{order_id}': 1.5,
                },
            },
            'options': {
                'get': {
                    'accounts': 1.5,
                    'account_book': 1.5,
                    'positions': 1.5,
                    'positions/{contract}': 1.5,
                    'position_close': 1.5,
                    'orders': 1.5,
                    'orders/{order_id}': 1.5,
                    'my_trades': 1.5,
                },
                'post': {
                    'orders': 1.5,
                },
                'delete': {
                    'orders': 1.5,
                    'orders/{order_id}': 1.5,
                },
            },
        },
    },
    'timeframes': {
        '10s': '10s',
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '8h': '8h',
        '1d': '1d',
        '7d': '7d',
        '1w': '7d',
    },
    # copied from gateiov2
    'commonCurrencies': {
        '88MPH': 'MPH',
        'AXIS': 'Axis DeFi',
        'BIFI': 'Bitcoin File',
        'BOX': 'DefiBox',
        'BTCBEAR': 'BEAR',
        'BTCBULL': 'BULL',
        'BYN': 'BeyondFi',
        'EGG': 'Goose Finance',
        'GTC': 'Game.com',  # conflict with Gitcoin and Gastrocoin
        'GTC_HT': 'Game.com HT',
        'GTC_BSC': 'Game.com BSC',
        'HIT': 'HitChain',
        'MM': 'Million',  # conflict with MilliMeter
        'MPH': 'Morpher',  # conflict with 88MPH
        'RAI': 'Rai Reflex Index',  # conflict with RAI Finance
        'SBTC': 'Super Bitcoin',
        'TNC': 'Trinity Network Credit',
        'TON': 'TONToken',
        'VAI': 'VAIOT',
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'headers': {
        'X-Gate-Channel-Id': 'ccxt',
    },
    'options': {
        'createOrder': {
            'expiration': 86400,  # for conditional orders
        },
        'networks': {
            'TRC20': 'TRX',
            'ERC20': 'ETH',
            'BEP20': 'BSC',
        },
        'accountsByType': {
            'spot': 'spot',
            'margin': 'margin',
            'future': 'futures',
            'futures': 'futures',
            'delivery': 'delivery',
        },
        'defaultType': 'spot',
        'swap': {
            'fetchMarkets': {
                'settlementCurrencies': ['usdt', 'btc'],
            },
        },
        'future': {
            'fetchMarkets': {
                'settlementCurrencies': ['usdt', 'btc'],
            },
        },
    },
    'precisionMode': TICK_SIZE,
    'fees': {
        'trading': {
            'tierBased': True,
            'feeSide': 'get',
            'percentage': True,
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
            'tiers': {
                # volume is in BTC
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.002')],
                    [self.parse_number('1.5'), self.parse_number('0.00185')],
                    [self.parse_number('3'), self.parse_number('0.00175')],
                    [self.parse_number('6'), self.parse_number('0.00165')],
                    [self.parse_number('12.5'), self.parse_number('0.00155')],
                    [self.parse_number('25'), self.parse_number('0.00145')],
                    [self.parse_number('75'), self.parse_number('0.00135')],
                    [self.parse_number('200'), self.parse_number('0.00125')],
                    [self.parse_number('500'), self.parse_number('0.00115')],
                    [self.parse_number('1250'), self.parse_number('0.00105')],
                    [self.parse_number('2500'), self.parse_number('0.00095')],
                    [self.parse_number('3000'), self.parse_number('0.00085')],
                    [self.parse_number('6000'), self.parse_number('0.00075')],
                    [self.parse_number('11000'), self.parse_number('0.00065')],
                    [self.parse_number('20000'), self.parse_number('0.00055')],
                    [self.parse_number('40000'), self.parse_number('0.00055')],
                    [self.parse_number('75000'), self.parse_number('0.00055')],
                ],
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.002')],
                    [self.parse_number('1.5'), self.parse_number('0.00195')],
                    [self.parse_number('3'), self.parse_number('0.00185')],
                    [self.parse_number('6'), self.parse_number('0.00175')],
                    [self.parse_number('12.5'), self.parse_number('0.00165')],
                    [self.parse_number('25'), self.parse_number('0.00155')],
                    [self.parse_number('75'), self.parse_number('0.00145')],
                    [self.parse_number('200'), self.parse_number('0.00135')],
                    [self.parse_number('500'), self.parse_number('0.00125')],
                    [self.parse_number('1250'), self.parse_number('0.00115')],
                    [self.parse_number('2500'), self.parse_number('0.00105')],
                    [self.parse_number('3000'), self.parse_number('0.00095')],
                    [self.parse_number('6000'), self.parse_number('0.00085')],
                    [self.parse_number('11000'), self.parse_number('0.00075')],
                    [self.parse_number('20000'), self.parse_number('0.00065')],
                    [self.parse_number('40000'), self.parse_number('0.00065')],
                    [self.parse_number('75000'), self.parse_number('0.00065')],
                ],
            },
        },
        'swap': {
            'tierBased': True,
            'feeSide': 'base',
            'percentage': True,
            'maker': self.parse_number('0.0'),
            'taker': self.parse_number('0.0005'),
            'tiers': {
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.0000')],
                    [self.parse_number('1.5'), self.parse_number('-0.00005')],
                    [self.parse_number('3'), self.parse_number('-0.00005')],
                    [self.parse_number('6'), self.parse_number('-0.00005')],
                    [self.parse_number('12.5'), self.parse_number('-0.00005')],
                    [self.parse_number('25'), self.parse_number('-0.00005')],
                    [self.parse_number('75'), self.parse_number('-0.00005')],
                    [self.parse_number('200'), self.parse_number('-0.00005')],
                    [self.parse_number('500'), self.parse_number('-0.00005')],
                    [self.parse_number('1250'), self.parse_number('-0.00005')],
                    [self.parse_number('2500'), self.parse_number('-0.00005')],
                    [self.parse_number('3000'), self.parse_number('-0.00008')],
                    [self.parse_number('6000'), self.parse_number('-0.01000')],
                    [self.parse_number('11000'), self.parse_number('-0.01002')],
                    [self.parse_number('20000'), self.parse_number('-0.01005')],
                    [self.parse_number('40000'), self.parse_number('-0.02000')],
                    [self.parse_number('75000'), self.parse_number('-0.02005')],
                ],
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.00050')],
                    [self.parse_number('1.5'), self.parse_number('0.00048')],
                    [self.parse_number('3'), self.parse_number('0.00046')],
                    [self.parse_number('6'), self.parse_number('0.00044')],
                    [self.parse_number('12.5'), self.parse_number('0.00042')],
                    [self.parse_number('25'), self.parse_number('0.00040')],
                    [self.parse_number('75'), self.parse_number('0.00038')],
                    [self.parse_number('200'), self.parse_number('0.00036')],
                    [self.parse_number('500'), self.parse_number('0.00034')],
                    [self.parse_number('1250'), self.parse_number('0.00032')],
                    [self.parse_number('2500'), self.parse_number('0.00030')],
                    [self.parse_number('3000'), self.parse_number('0.00030')],
                    [self.parse_number('6000'), self.parse_number('0.00030')],
                    [self.parse_number('11000'), self.parse_number('0.00030')],
                    [self.parse_number('20000'), self.parse_number('0.00030')],
                    [self.parse_number('40000'), self.parse_number('0.00030')],
                    [self.parse_number('75000'), self.parse_number('0.00030')],
                ],
            },
        },
    },
    # https://www.gate.io/docs/apiv4/en/index.html#label-list
    'exceptions': {
        'exact': {
            'INVALID_PARAM_VALUE': BadRequest,
            'INVALID_PROTOCOL': BadRequest,
            'INVALID_ARGUMENT': BadRequest,
            'INVALID_REQUEST_BODY': BadRequest,
            'MISSING_REQUIRED_PARAM': ArgumentsRequired,
            'BAD_REQUEST': BadRequest,
            'INVALID_CONTENT_TYPE': BadRequest,
            'NOT_ACCEPTABLE': BadRequest,
            'METHOD_NOT_ALLOWED': BadRequest,
            'NOT_FOUND': ExchangeError,
            'INVALID_CREDENTIALS': AuthenticationError,
            'INVALID_KEY': AuthenticationError,
            'IP_FORBIDDEN': AuthenticationError,
            'READ_ONLY': PermissionDenied,
            'INVALID_SIGNATURE': AuthenticationError,
            'MISSING_REQUIRED_HEADER': AuthenticationError,
            'REQUEST_EXPIRED': AuthenticationError,
            'ACCOUNT_LOCKED': AccountSuspended,
            'FORBIDDEN': PermissionDenied,
            'SUB_ACCOUNT_NOT_FOUND': ExchangeError,
            'SUB_ACCOUNT_LOCKED': AccountSuspended,
            'MARGIN_BALANCE_EXCEPTION': ExchangeError,
            'MARGIN_TRANSFER_FAILED': ExchangeError,
            'TOO_MUCH_FUTURES_AVAILABLE': ExchangeError,
            'FUTURES_BALANCE_NOT_ENOUGH': InsufficientFunds,
            'ACCOUNT_EXCEPTION': ExchangeError,
            'SUB_ACCOUNT_TRANSFER_FAILED': ExchangeError,
            'ADDRESS_NOT_USED': ExchangeError,
            'TOO_FAST': RateLimitExceeded,
            'WITHDRAWAL_OVER_LIMIT': ExchangeError,
            'API_WITHDRAW_DISABLED': ExchangeNotAvailable,
            'INVALID_WITHDRAW_ID': ExchangeError,
            'INVALID_WITHDRAW_CANCEL_STATUS': ExchangeError,
            'INVALID_PRECISION': InvalidOrder,
            'INVALID_CURRENCY': BadSymbol,
            'INVALID_CURRENCY_PAIR': BadSymbol,
            'POC_FILL_IMMEDIATELY': ExchangeError,
            'ORDER_NOT_FOUND': OrderNotFound,
            'CLIENT_ID_NOT_FOUND': OrderNotFound,
            'ORDER_CLOSED': InvalidOrder,
            'ORDER_CANCELLED': InvalidOrder,
            'QUANTITY_NOT_ENOUGH': InvalidOrder,
            'BALANCE_NOT_ENOUGH': InsufficientFunds,
            'MARGIN_NOT_SUPPORTED': InvalidOrder,
            'MARGIN_BALANCE_NOT_ENOUGH': InsufficientFunds,
            'AMOUNT_TOO_LITTLE': InvalidOrder,
            'AMOUNT_TOO_MUCH': InvalidOrder,
            'REPEATED_CREATION': InvalidOrder,
            'LOAN_NOT_FOUND': OrderNotFound,
            'LOAN_RECORD_NOT_FOUND': OrderNotFound,
            'NO_MATCHED_LOAN': ExchangeError,
            'NOT_MERGEABLE': ExchangeError,
            'NO_CHANGE': ExchangeError,
            'REPAY_TOO_MUCH': ExchangeError,
            'TOO_MANY_CURRENCY_PAIRS': InvalidOrder,
            'TOO_MANY_ORDERS': InvalidOrder,
            'MIXED_ACCOUNT_TYPE': InvalidOrder,
            'AUTO_BORROW_TOO_MUCH': ExchangeError,
            'TRADE_RESTRICTED': InsufficientFunds,
            'USER_NOT_FOUND': ExchangeError,
            'CONTRACT_NO_COUNTER': ExchangeError,
            'CONTRACT_NOT_FOUND': BadSymbol,
            'RISK_LIMIT_EXCEEDED': ExchangeError,
            'INSUFFICIENT_AVAILABLE': InsufficientFunds,
            'LIQUIDATE_IMMEDIATELY': InvalidOrder,
            'LEVERAGE_TOO_HIGH': InvalidOrder,
            'LEVERAGE_TOO_LOW': InvalidOrder,
            'ORDER_NOT_OWNED': ExchangeError,
            'ORDER_FINISHED': ExchangeError,
            'POSITION_CROSS_MARGIN': ExchangeError,
            'POSITION_IN_LIQUIDATION': ExchangeError,
            'POSITION_IN_CLOSE': ExchangeError,
            'POSITION_EMPTY': InvalidOrder,
            'REMOVE_TOO_MUCH': ExchangeError,
            'RISK_LIMIT_NOT_MULTIPLE': ExchangeError,
            'RISK_LIMIT_TOO_HIGH': ExchangeError,
            'RISK_LIMIT_TOO_lOW': ExchangeError,
            'PRICE_TOO_DEVIATED': InvalidOrder,
            'SIZE_TOO_LARGE': InvalidOrder,
            'SIZE_TOO_SMALL': InvalidOrder,
            'PRICE_OVER_LIQUIDATION': InvalidOrder,
            'PRICE_OVER_BANKRUPT': InvalidOrder,
            'ORDER_POC_IMMEDIATE': InvalidOrder,
            'INCREASE_POSITION': InvalidOrder,
            'CONTRACT_IN_DELISTING': ExchangeError,
            'INTERNAL': ExchangeNotAvailable,
            'SERVER_ERROR': ExchangeNotAvailable,
            'TOO_BUSY': ExchangeNotAvailable,
        },
    },
    'broad': {},
},
{
    'id': 'lbank',
    'name': 'LBank',
    'countries': ['CN'],
    'version': 'v1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchOHLCV': True,
        'fetchOpenOrders': None,  # status 0 API doesn't work
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': 'minute1',
        '5m': 'minute5',
        '15m': 'minute15',
        '30m': 'minute30',
        '1h': 'hour1',
        '2h': 'hour2',
        '4h': 'hour4',
        '6h': 'hour6',
        '8h': 'hour8',
        '12h': 'hour12',
        '1d': 'day1',
        '1w': 'week1',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/38063602-9605e28a-3302-11e8-81be-64b1e53c4cfb.jpg',
        'api': 'https://api.lbank.info',
        'www': 'https://www.lbank.info',
        'doc': 'https://github.com/LBank-exchange/lbank-official-api-docs',
        'fees': 'https://lbankinfo.zendesk.com/hc/en-gb/articles/360012072873-Trading-Fees',
        'referral': 'https://www.lbex.io/invite?icode=7QCY',
    },
    'api': {
        'public': {
            'get': [
                'currencyPairs',
                'ticker',
                'depth',
                'trades',
                'kline',
                'accuracy',
            ],
        },
        'private': {
            'post': [
                'user_info',
                'create_order',
                'cancel_order',
                'orders_info',
                'orders_info_history',
                'withdraw',
                'withdrawCancel',
                'withdraws',
                'withdrawConfigs',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.001'),
            'taker': self.parse_number('0.001'),
        },
        'funding': {
            'withdraw': {},
        },
    },
    'commonCurrencies': {
        'VET_ERC20': 'VEN',
        'PNT': 'Penta',
    },
    'options': {
        'cacheSecretAsPem': True,
    },
},
{
    'id': 'bitbns',
    'name': 'Bitbns',
    'countries': ['IN'],  # India
    'rateLimit': 1000,
    'certified': False,
    'pro': False,
    'version': 'v2',
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': False,
        'future': False,
        'option': None,  # coming soon
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': None,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchStatus': True,
        'fetchTicker': 'emulated',
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchWithdrawals': True,
    },
    'timeframes': {
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/117201933-e7a6e780-adf5-11eb-9d80-98fc2a21c3d6.jpg',
        'api': {
            'www': 'https://bitbns.com',
            'v1': 'https://api.bitbns.com/api/trade/v1',
            'v2': 'https://api.bitbns.com/api/trade/v2',
        },
        'www': 'https://bitbns.com',
        'referral': 'https://ref.bitbns.com/1090961',
        'doc': [
            'https://bitbns.com/trade/#/api-trading/',
        ],
        'fees': 'https://bitbns.com/fees',
    },
    'api': {
        'www': {
            'get': [
                'order/fetchMarkets',
                'order/fetchTickers',
                'order/fetchOrderbook',
                'order/getTickerWithVolume',
                'exchangeData/ohlc',  # ?coin=${coin_name}&page=${page}
                'exchangeData/orderBook',
                'exchangeData/tradedetails',
            ],
        },
        'v1': {
            'get': [
                'platform/status',
                'tickers',
                'orderbook/sell/{symbol}',
                'orderbook/buy/{symbol}',
            ],
            'post': [
                'currentCoinBalance/EVERYTHING',
                'getApiUsageStatus/USAGE',
                'getOrderSocketToken/USAGE',
                'currentCoinBalance/{symbol}',
                'orderStatus/{symbol}',
                'depositHistory/{symbol}',
                'withdrawHistory/{symbol}',
                'withdrawHistoryAll/{symbol}',
                'depositHistoryAll/{symbol}',
                'listOpenOrders/{symbol}',
                'listOpenStopOrders/{symbol}',
                'getCoinAddress/{symbol}',
                'placeSellOrder/{symbol}',
                'placeBuyOrder/{symbol}',
                'buyStopLoss/{symbol}',
                'sellStopLoss/{symbol}',
                'placeSellOrder/{symbol}',
                'cancelOrder/{symbol}',
                'cancelStopLossOrder/{symbol}',
                'listExecutedOrders/{symbol}',
                'placeMarketOrder/{symbol}',
                'placeMarketOrderQnty/{symbol}',
            ],
        },
        'v2': {
            'post': [
                'orders',
                'cancel',
                'getordersnew',
                'marginOrders',
            ],
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'quote',
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.0025'),
            'maker': self.parse_number('0.0025'),
        },
    },
    'exceptions': {
        'exact': {
            '400': BadRequest,  # {"msg":"Invalid Request","status":-1,"code":400}
            '409': BadSymbol,  # {"data":"","status":0,"error":"coin name not supplied or not yet supported","code":409}
            '416': InsufficientFunds,  # {"data":"Oops ! Not sufficient currency to sell","status":0,"error":null,"code":416}
            '417': OrderNotFound,  # {"data":[],"status":0,"error":"Nothing to show","code":417}
        },
        'broad': {},
    },
},
{
    'id': 'gemini',
    'name': 'Gemini',
    'countries': ['US'],
    # 600 requests a minute = 10 requests per second => 1000ms / 10 = 100ms between requests(private endpoints)
    # 120 requests a minute = 2 requests per second =>( 1000ms / rateLimit ) / 2 = 5(public endpoints)
    'rateLimit': 100,
    'version': 'v1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBidsAsks': None,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': None,
        'fetchDepositAddress': None,  # TODO
        'fetchDepositAddressesByNetwork': True,
        'fetchDeposits': None,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': None,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'fetchWithdrawals': None,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',
        'api': {
            'public': 'https://api.gemini.com',
            'private': 'https://api.gemini.com',
            'web': 'https://docs.gemini.com',
        },
        'www': 'https://gemini.com/',
        'doc': [
            'https://docs.gemini.com/rest-api',
            'https://docs.sandbox.gemini.com',
        ],
        'test': {
            'public': 'https://api.sandbox.gemini.com',
            'private': 'https://api.sandbox.gemini.com',
            # use the True doc instead of the sandbox doc
            # since they differ in parsing
            # https://github.com/ccxt/ccxt/issues/7874
            # https://github.com/ccxt/ccxt/issues/7894
            'web': 'https://docs.gemini.com',
        },
        'fees': [
            'https://gemini.com/api-fee-schedule',
            'https://gemini.com/trading-fees',
            'https://gemini.com/transfer-fees',
        ],
    },
    'api': {
        'web': {
            'get': [
                'rest-api',
            ],
        },
        'public': {
            'get': {
                'v1/symbols': 5,
                'v1/symbols/details/{symbol}': 5,
                'v1/pubticker/{symbol}': 5,
                'v2/ticker/{symbol}': 5,
                'v2/candles/{symbol}/{timeframe}': 5,
                'v1/trades/{symbol}': 5,
                'v1/auction/{symbol}': 5,
                'v1/auction/{symbol}/history': 5,
                'v1/pricefeed': 5,
                'v1/book/{symbol}': 5,
                'v1/earn/rates': 5,
            },
        },
        'private': {
            'post': {
                'v1/order/new': 1,
                'v1/order/cancel': 1,
                'v1/wrap/{symbol}': 1,
                'v1/order/cancel/session': 1,
                'v1/order/cancel/all': 1,
                'v1/order/status': 1,
                'v1/orders': 1,
                'v1/mytrades': 1,
                'v1/notionalvolume': 1,
                'v1/tradevolume': 1,
                'v1/clearing/new': 1,
                'v1/clearing/status': 1,
                'v1/clearing/cancel': 1,
                'v1/clearing/confirm': 1,
                'v1/balances': 1,
                'v1/notionalbalances/{currency}': 1,
                'v1/transfers': 1,
                'v1/addresses/{network}': 1,
                'v1/deposit/{network}/newAddress': 1,
                'v1/deposit/{currency}/newAddress': 1,
                'v1/withdraw/{currency}': 1,
                'v1/account/transfer/{currency}': 1,
                'v1/payments/addbank': 1,
                'v1/payments/methods': 1,
                'v1/payments/sen/withdraw': 1,
                'v1/balances/earn': 1,
                'v1/earn/interest': 1,
                'v1/approvedAddresses/{network}/request': 1,
                'v1/approvedAddresses/account/{network}': 1,
                'v1/approvedAddresses/{network}/remove': 1,
                'v1/account': 1,
                'v1/account/create': 1,
                'v1/account/list': 1,
                'v1/heartbeat': 1,
            },
        },
    },
    'precisionMode': TICK_SIZE,
    'fees': {
        'trading': {
            'taker': 0.0035,
            'maker': 0.001,
        },
    },
    'httpExceptions': {
        '400': BadRequest,  # Auction not open or paused, ineligible timing, market not open, or the request was malformed, in the case of a private API request, missing or malformed Gemini private API authentication headers
        '403': PermissionDenied,  # The API key is missing the role necessary to access self private API endpoint
        '404': OrderNotFound,  # Unknown API entry point or Order not found
        '406': InsufficientFunds,  # Insufficient Funds
        '429': RateLimitExceeded,  # Rate Limiting was applied
        '500': ExchangeError,  # The server encountered an error
        '502': ExchangeNotAvailable,  # Technical issues are preventing the request from being satisfied
        '503': OnMaintenance,  # The exchange is down for maintenance
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1hr',
        '6h': '6hr',
        '1d': '1day',
    },
    'exceptions': {
        'exact': {
            'AuctionNotOpen': BadRequest,  # Failed to place an auction-only order because there is no current auction open for self symbol
            'ClientOrderIdTooLong': BadRequest,  # The Client Order ID must be under 100 characters
            'ClientOrderIdMustBeString': BadRequest,  # The Client Order ID must be a string
            'ConflictingOptions': BadRequest,  # New orders using a combination of order execution options are not supported
            'EndpointMismatch': BadRequest,  # The request was submitted to an endpoint different than the one in the payload
            'EndpointNotFound': BadRequest,  # No endpoint was specified
            'IneligibleTiming': BadRequest,  # Failed to place an auction order for the current auction on self symbol because the timing is not eligible, new orders may only be placed before the auction begins.
            'InsufficientFunds': InsufficientFunds,  # The order was rejected because of insufficient funds
            'InvalidJson': BadRequest,  # The JSON provided is invalid
            'InvalidNonce': InvalidNonce,  # The nonce was not greater than the previously used nonce, or was not present
            'InvalidOrderType': InvalidOrder,  # An unknown order type was provided
            'InvalidPrice': InvalidOrder,  # For new orders, the price was invalid
            'InvalidQuantity': InvalidOrder,  # A negative or otherwise invalid quantity was specified
            'InvalidSide': InvalidOrder,  # For new orders, and invalid side was specified
            'InvalidSignature': AuthenticationError,  # The signature did not match the expected signature
            'InvalidSymbol': BadRequest,  # An invalid symbol was specified
            'InvalidTimestampInPayload': BadRequest,  # The JSON payload contained a timestamp parameter with an unsupported value.
            'Maintenance': OnMaintenance,  # The system is down for maintenance
            'MarketNotOpen': InvalidOrder,  # The order was rejected because the market is not accepting new orders
            'MissingApikeyHeader': AuthenticationError,  # The X-GEMINI-APIKEY header was missing
            'MissingOrderField': InvalidOrder,  # A required order_id field was not specified
            'MissingRole': AuthenticationError,  # The API key used to access self endpoint does not have the required role assigned to it
            'MissingPayloadHeader': AuthenticationError,  # The X-GEMINI-PAYLOAD header was missing
            'MissingSignatureHeader': AuthenticationError,  # The X-GEMINI-SIGNATURE header was missing
            'NoSSL': AuthenticationError,  # You must use HTTPS to access the API
            'OptionsMustBeArray': BadRequest,  # The options parameter must be an array.
            'OrderNotFound': OrderNotFound,  # The order specified was not found
            'RateLimit': RateLimitExceeded,  # Requests were made too frequently. See Rate Limits below.
            'System': ExchangeError,  # We are experiencing technical issues
            'UnsupportedOption': BadRequest,  # This order execution option is not supported.
        },
        'broad': {
            'The Gemini Exchange is currently undergoing maintenance.': OnMaintenance,  # The Gemini Exchange is currently undergoing maintenance. Please check https://status.gemini.com/ for more information.
            'We are investigating technical issues with the Gemini Exchange.': ExchangeNotAvailable,  # We are investigating technical issues with the Gemini Exchange. Please check https://status.gemini.com/ for more information.
        },
    },
    'options': {
        'fetchMarketsMethod': 'fetch_markets_from_web',
        'fetchTickerMethod': 'fetchTickerV1',  # fetchTickerV1, fetchTickerV2, fetchTickerV1AndV2
        'networkIds': {
            'bitcoin': 'BTC',
            'ethereum': 'ERC20',
            'bitcoincash': 'BCH',
            'litecoin': 'LTC',
            'zcash': 'ZEC',
            'filecoin': 'FIL',
            'dogecoin': 'DOGE',
            'tezos': 'XTZ',
        },
        'networks': {
            'BTC': 'bitcoin',
            'ERC20': 'ethereum',
            'BCH': 'bitcoincash',
            'LTC': 'litecoin',
            'ZEC': 'zcash',
            'FIL': 'filecoin',
            'DOGE': 'dogecoin',
            'XTZ': 'tezos',
        },
    },
},
{
    'id': 'huobi',
    'name': 'Huobi',
    'countries': ['CN'],
    'rateLimit': 100,
    'userAgent': self.userAgents['chrome39'],
    'certified': True,
    'version': 'v1',
    'accounts': None,
    'accountsById': None,
    'hostname': 'api.huobi.pro',  # api.testnet.huobi.pro
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': True,
        'swap': True,
        'future': True,
        'option': None,
        'addMargin': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': True,
        'createDepositAddress': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'deposit': None,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBidsAsks': None,
        'fetchBorrowRate': True,
        'fetchBorrowRateHistories': None,
        'fetchBorrowRateHistory': None,
        'fetchBorrowRates': True,
        'fetchBorrowRatesPerSymbol': True,
        'fetchCanceledOrders': None,
        'fetchClosedOrder': None,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDeposit': None,
        'fetchDepositAddress': True,
        'fetchDepositAddresses': None,
        'fetchDepositAddressesByNetwork': True,
        'fetchDeposits': True,
        'fetchFundingFee': None,
        'fetchFundingFees': None,
        'fetchFundingHistory': True,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': True,
        'fetchFundingRates': True,
        'fetchIndexOHLCV': True,
        'fetchIsolatedPositions': False,
        'fetchL3OrderBook': None,
        'fetchLedger': True,
        'fetchLedgerEntry': None,
        'fetchLeverage': False,
        'fetchLeverageTiers': True,
        'fetchMarketLeverageTiers': True,
        'fetchMarkets': True,
        'fetchMarkOHLCV': True,
        'fetchMyBuys': None,
        'fetchMySells': None,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': None,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': None,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPosition': True,
        'fetchPositions': True,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': True,
        'fetchStatus': None,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': None,
        'fetchTradingLimits': True,
        'fetchTransactions': None,
        'fetchTransfers': None,
        'fetchWithdrawAddressesByNetwork': True,
        'fetchWithdrawal': None,
        'fetchWithdrawals': True,
        'fetchWithdrawalWhitelist': None,
        'reduceMargin': None,
        'setLeverage': True,
        'setMarginMode': False,
        'setPositionMode': False,
        'signIn': None,
        'transfer': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1min',
        '5m': '5min',
        '15m': '15min',
        '30m': '30min',
        '1h': '60min',
        '4h': '4hour',
        '1d': '1day',
        '1w': '1week',
        '1M': '1mon',
        '1y': '1year',
    },
    'urls': {
        # 'test': {
        #     'market': 'https://api.testnet.huobi.pro',
        #     'public': 'https://api.testnet.huobi.pro',
        #     'private': 'https://api.testnet.huobi.pro',
        # },
        'logo': 'https://user-images.githubusercontent.com/1294454/76137448-22748a80-604e-11ea-8069-6e389271911d.jpg',
        'hostnames': {
            'contract': 'api.hbdm.com',
            'spot': 'api.huobi.pro',
            # recommended for AWS
            # 'contract': 'api.hbdm.vn',
            # 'spot': 'api-aws.huobi.pro',
        },
        'api': {
            'contract': 'https://{hostname}',
            'spot': 'https://{hostname}',
            'market': 'https://{hostname}',
            'public': 'https://{hostname}',
            'private': 'https://{hostname}',
            'v2Public': 'https://{hostname}',
            'v2Private': 'https://{hostname}',
        },
        'www': 'https://www.huobi.com',
        'referral': {
            'url': 'https://www.huobi.com/en-us/topic/double-reward/?invite_code=6rmm2223',
            'discount': 0.15,
        },
        'doc': [
            'https://huobiapi.github.io/docs/spot/v1/cn/',
            'https://huobiapi.github.io/docs/dm/v1/cn/',
            'https://huobiapi.github.io/docs/coin_margined_swap/v1/cn/',
            'https://huobiapi.github.io/docs/usdt_swap/v1/cn/',
            'https://huobiapi.github.io/docs/option/v1/cn/',
        ],
        'fees': 'https://www.huobi.com/about/fee/',
    },
    'api': {
        # ------------------------------------------------------------
        # old api definitions
        'v2Public': {
            'get': {
                'reference/currencies': 1,  # 币链参考信息
                'market-status': 1,  # 获取当前市场状态
            },
        },
        'v2Private': {
            'get': {
                'account/ledger': 1,
                'account/withdraw/quota': 1,
                'account/withdraw/address': 1,  # 提币地址查询(限母用户可用)
                'account/deposit/address': 1,
                'account/repayment': 5,  # 还币交易记录查询
                'reference/transact-fee-rate': 1,
                'account/asset-valuation': 0.2,  # 获取账户资产估值
                'point/account': 5,  # 点卡余额查询
                'sub-user/user-list': 1,  # 获取子用户列表
                'sub-user/user-state': 1,  # 获取特定子用户的用户状态
                'sub-user/account-list': 1,  # 获取特定子用户的账户列表
                'sub-user/deposit-address': 1,  # 子用户充币地址查询
                'sub-user/query-deposit': 1,  # 子用户充币记录查询
                'user/api-key': 1,  # 母子用户API key信息查询
                'user/uid': 1,  # 母子用户获取用户UID
                'algo-orders/opening': 1,  # 查询未触发OPEN策略委托
                'algo-orders/history': 1,  # 查询策略委托历史
                'algo-orders/specific': 1,  # 查询特定策略委托
                'c2c/offers': 1,  # 查询借入借出订单
                'c2c/offer': 1,  # 查询特定借入借出订单及其交易记录
                'c2c/transactions': 1,  # 查询借入借出交易记录
                'c2c/repayment': 1,  # 查询还币交易记录
                'c2c/account': 1,  # 查询账户余额
                'etp/reference': 1,  # 基础参考信息
                'etp/transactions': 5,  # 获取杠杆ETP申赎记录
                'etp/transaction': 5,  # 获取特定杠杆ETP申赎记录
                'etp/rebalance': 1,  # 获取杠杆ETP调仓记录
                'etp/limit': 1,  # 获取ETP持仓限额
            },
            'post': {
                'account/transfer': 1,
                'account/repayment': 5,  # 归还借币（全仓逐仓通用）
                'point/transfer': 5,  # 点卡划转
                'sub-user/management': 1,  # 冻结/解冻子用户
                'sub-user/creation': 1,  # 子用户创建
                'sub-user/tradable-market': 1,  # 设置子用户交易权限
                'sub-user/transferability': 1,  # 设置子用户资产转出权限
                'sub-user/api-key-generation': 1,  # 子用户API key创建
                'sub-user/api-key-modification': 1,  # 修改子用户API key
                'sub-user/api-key-deletion': 1,  # 删除子用户API key
                'sub-user/deduct-mode': 1,  # 设置子用户手续费抵扣模式
                'algo-orders': 1,  # 策略委托下单
                'algo-orders/cancel-all-after': 1,  # 自动撤销订单
                'algo-orders/cancellation': 1,  # 策略委托（触发前）撤单
                'c2c/offer': 1,  # 借入借出下单
                'c2c/cancellation': 1,  # 借入借出撤单
                'c2c/cancel-all': 1,  # 撤销所有借入借出订单
                'c2c/repayment': 1,  # 还币
                'c2c/transfer': 1,  # 资产划转
                'etp/creation': 5,  # 杠杆ETP换入
                'etp/redemption': 5,  # 杠杆ETP换出
                'etp/{transactId}/cancel': 10,  # 杠杆ETP单个撤单
                'etp/batch-cancel': 50,  # 杠杆ETP批量撤单
            },
        },
        'market': {
            'get': {
                'history/kline': 1,  # 获取K线数据
                'detail/merged': 1,  # 获取聚合行情(Ticker)
                'depth': 1,  # 获取 Market Depth 数据
                'trade': 1,  # 获取 Trade Detail 数据
                'history/trade': 1,  # 批量获取最近的交易记录
                'detail': 1,  # 获取 Market Detail 24小时成交量数据
                'tickers': 1,
                'etp': 1,  # 获取杠杆ETP实时净值
            },
        },
        'public': {
            'get': {
                'common/symbols': 1,  # 查询系统支持的所有交易对
                'common/currencys': 1,  # 查询系统支持的所有币种
                'common/timestamp': 1,  # 查询系统当前时间
                'common/exchange': 1,  # order limits
                'settings/currencys': 1,  # ?language=en-US
            },
        },
        'private': {
            'get': {
                'account/accounts': 0.2,  # 查询当前用户的所有账户(即account-id)
                'account/accounts/{id}/balance': 0.2,  # 查询指定账户的余额
                'account/accounts/{sub-uid}': 1,
                'account/history': 4,
                'cross-margin/loan-info': 1,
                'margin/loan-info': 1,  # 查询借币币息率及额度
                'fee/fee-rate/get': 1,
                'order/openOrders': 0.4,
                'order/orders': 0.4,
                'order/orders/{id}': 0.4,  # 查询某个订单详情
                'order/orders/{id}/matchresults': 0.4,  # 查询某个订单的成交明细
                'order/orders/getClientOrder': 0.4,
                'order/history': 1,  # 查询当前委托、历史委托
                'order/matchresults': 1,  # 查询当前成交、历史成交
                # 'dw/withdraw-virtual/addresses',  # 查询虚拟币提现地址（Deprecated）
                'query/deposit-withdraw': 1,
                # 'margin/loan-info',  # duplicate
                'margin/loan-orders': 0.2,  # 借贷订单
                'margin/accounts/balance': 0.2,  # 借贷账户详情
                'cross-margin/loan-orders': 1,  # 查询借币订单
                'cross-margin/accounts/balance': 1,  # 借币账户详情
                'points/actions': 1,
                'points/orders': 1,
                'subuser/aggregate-balance': 10,
                'stable-coin/exchange_rate': 1,
                'stable-coin/quote': 1,
            },
            'post': {
                'account/transfer': 1,  # 资产划转(该节点为母用户和子用户进行资产划转的通用接口。)
                'futures/transfer': 1,
                'order/batch-orders': 0.4,
                'order/orders/place': 0.2,  # 创建并执行一个新订单(一步下单， 推荐使用)
                'order/orders/submitCancelClientOrder': 0.2,
                'order/orders/batchCancelOpenOrders': 0.4,
                # 'order/orders',  # 创建一个新的订单请求 （仅创建订单，不执行下单）
                # 'order/orders/{id}/place',  # 执行一个订单 （仅执行已创建的订单）
                'order/orders/{id}/submitcancel': 0.2,  # 申请撤销一个订单请求
                'order/orders/batchcancel': 0.4,  # 批量撤销订单
                # 'dw/balance/transfer',  # 资产划转
                'dw/withdraw/api/create': 1,  # 申请提现虚拟币
                # 'dw/withdraw-virtual/create',  # 申请提现虚拟币
                # 'dw/withdraw-virtual/{id}/place',  # 确认申请虚拟币提现（Deprecated）
                'dw/withdraw-virtual/{id}/cancel': 1,  # 申请取消提现虚拟币
                'dw/transfer-in/margin': 10,  # 现货账户划入至借贷账户
                'dw/transfer-out/margin': 10,  # 借贷账户划出至现货账户
                'margin/orders': 10,  # 申请借贷
                'margin/orders/{id}/repay': 10,  # 归还借贷
                'cross-margin/transfer-in': 1,  # 资产划转
                'cross-margin/transfer-out': 1,  # 资产划转
                'cross-margin/orders': 1,  # 申请借币
                'cross-margin/orders/{id}/repay': 1,  # 归还借币
                'stable-coin/exchange': 1,
                'subuser/transfer': 10,
            },
        },
        # ------------------------------------------------------------
        # new api definitions
        # 'https://status.huobigroup.com/api/v2/summary.json': 1,
        # 'https://status-dm.huobigroup.com/api/v2/summary.json': 1,
        # 'https://status-swap.huobigroup.com/api/v2/summary.json': 1,
        # 'https://status-linear-swap.huobigroup.com/api/v2/summary.json': 1,
        'spot': {
            'public': {
                'get': {
                    'v2/market-status': 1,
                    'v1/common/symbols': 1,
                    'v1/common/currencys': 1,
                    'v2/reference/currencies': 1,
                    'v1/common/timestamp': 1,
                    'v1/common/exchange': 1,  # order limits
                    # Market Data
                    'market/history/candles': 1,
                    'market/history/kline': 1,
                    'market/detail/merged': 1,
                    'market/tickers': 1,
                    'market/depth': 1,
                    'market/trade': 1,
                    'market/history/trade': 1,
                    'market/detail/': 1,
                    'market/etp': 1,
                    # ETP
                    'v2/etp/reference': 1,
                    'v2/etp/rebalance': 1,
                },
            },
            'private': {
                'get': {
                    # Account
                    'v1/account/accounts': 0.2,
                    'v1/account/accounts/{account-id}/balance': 0.2,
                    'v2/account/valuation': 1,
                    'v2/account/asset-valuation': 0.2,
                    'v1/account/history': 4,
                    'v2/account/ledger': 1,
                    'v2/point/account': 5,
                    # Wallet(Deposit and Withdraw)
                    'v2/account/deposit/address': 1,
                    'v2/account/withdraw/quota': 1,
                    'v2/account/withdraw/address': 1,
                    'v2/reference/currencies': 1,
                    'v1/query/deposit-withdraw': 1,
                    # Sub user management
                    'v2/user/api-key': 1,
                    'v2/user/uid': 1,
                    'v2/sub-user/user-list': 1,
                    'v2/sub-user/user-state': 1,
                    'v2/sub-user/account-list': 1,
                    'v2/sub-user/deposit-address': 1,
                    'v2/sub-user/query-deposit': 1,
                    'v1/subuser/aggregate-balance': 10,
                    'v1/account/accounts/{sub-uid}': 1,
                    # Trading
                    'v1/order/openOrders': 0.4,
                    'v1/order/orders/{order-id}': 0.4,
                    'v1/order/orders/getClientOrder': 0.4,
                    'v1/order/orders/{order-id}/matchresults': 0.4,
                    'v1/order/orders': 0.4,
                    'v1/order/history': 1,
                    'v1/order/matchresults': 1,
                    'v2/reference/transact-fee-rate': 1,
                    # Conditional Order
                    'v2/algo-orders/opening': 1,
                    'v2/algo-orders/history': 1,
                    'v2/algo-orders/specific': 1,
                    # Margin Loan(Cross/Isolated)
                    'v1/margin/loan-info': 1,
                    'v1/margin/loan-orders': 0.2,
                    'v1/margin/accounts/balance': 0.2,
                    'v1/cross-margin/loan-info': 1,
                    'v1/cross-margin/loan-orders': 1,
                    'v1/cross-margin/accounts/balance': 1,
                    'v2/account/repayment': 5,
                    # Stable Coin Exchange
                    'v1/stable-coin/quote': 1,
                    # ETP
                    'v2/etp/transactions': 5,
                    'v2/etp/transaction': 5,
                    'v2/etp/limit': 1,
                },
                'post': {
                    # Account
                    'v1/account/transfer': 1,
                    'v1/futures/transfer': 1,  # future transfers
                    'v2/point/transfer': 5,
                    'v2/account/transfer': 1,  # swap transfers
                    # Wallet(Deposit and Withdraw)
                    'v1/dw/withdraw/api/create': 1,
                    'v1/dw/withdraw-virtual/{withdraw-id}/cancel': 1,
                    # Sub user management
                    'v2/sub-user/deduct-mode': 1,
                    'v2/sub-user/creation': 1,
                    'v2/sub-user/management': 1,
                    'v2/sub-user/tradable-market': 1,
                    'v2/sub-user/transferability': 1,
                    'v2/sub-user/api-key-generation': 1,
                    'v2/sub-user/api-key-modification': 1,
                    'v2/sub-user/api-key-deletion': 1,
                    'v1/subuser/transfer': 10,
                    # Trading
                    'v1/order/orders/place': 0.2,
                    'v1/order/batch-orders': 0.4,
                    'v1/order/orders/{order-id}/submitcancel': 0.2,
                    'v1/order/orders/submitCancelClientOrder': 0.2,
                    'v1/order/orders/batchCancelOpenOrders': 0.4,
                    'v1/order/orders/batchcancel': 0.4,
                    'v2/algo-orders/cancel-all-after': 1,
                    # Conditional Order
                    'v2/algo-orders': 1,
                    'v2/algo-orders/cancellation': 1,
                    # Margin Loan(Cross/Isolated)
                    'v2/account/repayment': 5,
                    'v1/dw/transfer-in/margin': 10,
                    'v1/dw/transfer-out/margin': 10,
                    'v1/margin/orders': 10,
                    'v1/margin/orders/{order-id}/repay': 10,
                    'v1/cross-margin/transfer-in': 1,
                    'v1/cross-margin/transfer-out': 1,
                    'v1/cross-margin/orders': 1,
                    'v1/cross-margin/orders/{order-id}/repay': 1,
                    # Stable Coin Exchange
                    'v1/stable-coin/exchange': 1,
                    # ETP
                    'v2/etp/creation': 5,
                    'v2/etp/redemption': 5,
                    'v2/etp/{transactId}/cancel': 10,
                    'v2/etp/batch-cancel': 50,
                },
            },
        },
        'contract': {
            'public': {
                'get': {
                    'api/v1/timestamp': 1,
                    # Future Market Data interface
                    'api/v1/contract_contract_info': 1,
                    'api/v1/contract_index': 1,
                    'api/v1/contract_price_limit': 1,
                    'api/v1/contract_open_interest': 1,
                    'api/v1/contract_delivery_price': 1,
                    'market/depth': 1,
                    'market/bbo': 1,
                    'market/history/kline': 1,
                    'index/market/history/mark_price_kline': 1,
                    'market/detail/merged': 1,
                    'market/detail/batch_merged': 1,
                    'market/trade': 1,
                    'market/history/trade': 1,
                    'api/v1/contract_risk_info': 1,
                    'api/v1/contract_insurance_fund': 1,
                    'api/v1/contract_adjustfactor': 1,
                    'api/v1/contract_his_open_interest': 1,
                    'api/v1/contract_ladder_margin': 1,
                    'api/v1/contract_api_state': 1,
                    'api/v1/contract_elite_account_ratio': 1,
                    'api/v1/contract_elite_position_ratio': 1,
                    'api/v1/contract_liquidation_orders': 1,
                    'api/v1/contract_settlement_records': 1,
                    'index/market/history/index': 1,
                    'index/market/history/basis': 1,
                    'api/v1/contract_estimated_settlement_price': 1,
                    # Swap Market Data interface
                    'swap-api/v1/swap_contract_info': 1,
                    'swap-api/v1/swap_index': 1,
                    'swap-api/v1/swap_price_limit': 1,
                    'swap-api/v1/swap_open_interest': 1,
                    'swap-ex/market/depth': 1,
                    'swap-ex/market/bbo': 1,
                    'swap-ex/market/history/kline': 1,
                    'index/market/history/swap_mark_price_kline': 1,
                    'swap-ex/market/detail/merged': 1,
                    'swap-ex/market/detail/batch_merged': 1,
                    'swap-ex/market/trade': 1,
                    'swap-ex/market/history/trade': 1,
                    'swap-api/v1/swap_risk_info': 1,
                    'swap-api/v1/swap_insurance_fund': 1,
                    'swap-api/v1/swap_adjustfactor': 1,
                    'swap-api/v1/swap_his_open_interest': 1,
                    'swap-api/v1/swap_ladder_margin': 1,
                    'swap-api/v1/swap_api_state': 1,
                    'swap-api/v1/swap_elite_account_ratio': 1,
                    'swap-api/v1/swap_elite_position_ratio': 1,
                    'swap-api/v1/swap_estimated_settlement_price': 1,
                    'swap-api/v1/swap_liquidation_orders': 1,
                    'swap-api/v1/swap_settlement_records': 1,
                    'swap-api/v1/swap_funding_rate': 1,
                    'swap-api/v1/swap_batch_funding_rate': 1,
                    'swap-api/v1/swap_historical_funding_rate': 1,
                    'index/market/history/swap_premium_index_kline': 1,
                    'index/market/history/swap_estimated_rate_kline': 1,
                    'index/market/history/swap_basis': 1,
                    # Swap Market Data interface
                    'linear-swap-api/v1/swap_contract_info': 1,
                    'linear-swap-api/v1/swap_index': 1,
                    'linear-swap-api/v1/swap_price_limit': 1,
                    'linear-swap-api/v1/swap_open_interest': 1,
                    'linear-swap-ex/market/depth': 1,
                    'linear-swap-ex/market/bbo': 1,
                    'linear-swap-ex/market/history/kline': 1,
                    'index/market/history/linear_swap_mark_price_kline': 1,
                    'linear-swap-ex/market/detail/merged': 1,
                    'linear-swap-ex/market/detail/batch_merged': 1,
                    'linear-swap-ex/market/trade': 1,
                    'linear-swap-ex/market/history/trade': 1,
                    'linear-swap-api/v1/swap_risk_info': 1,
                    'swap-api/v1/linear-swap-api/v1/swap_insurance_fund': 1,
                    'linear-swap-api/v1/swap_adjustfactor': 1,
                    'linear-swap-api/v1/swap_cross_adjustfactor': 1,
                    'linear-swap-api/v1/swap_his_open_interest': 1,
                    'linear-swap-api/v1/swap_ladder_margin': 1,
                    'linear-swap-api/v1/swap_cross_ladder_margin': 1,
                    'linear-swap-api/v1/swap_api_state': 1,
                    'linear-swap-api/v1/swap_cross_transfer_state': 1,
                    'linear-swap-api/v1/swap_cross_trade_state': 1,
                    'linear-swap-api/v1/swap_elite_account_ratio': 1,
                    'linear-swap-api/v1/swap_elite_position_ratio': 1,
                    'linear-swap-api/v1/swap_liquidation_orders': 1,
                    'linear-swap-api/v1/swap_settlement_records': 1,
                    'linear-swap-api/v1/swap_funding_rate': 1,
                    'linear-swap-api/v1/swap_batch_funding_rate': 1,
                    'linear-swap-api/v1/swap_historical_funding_rate': 1,
                    'index/market/history/linear_swap_premium_index_kline': 1,
                    'index/market/history/linear_swap_estimated_rate_kline': 1,
                    'index/market/history/linear_swap_basis': 1,
                    'linear-swap-api/v1/swap_estimated_settlement_price': 1,
                },
            },
            'private': {
                'get': {
                    # Future Account Interface
                    'api/v1/contract_api_trading_status': 1,
                    # Swap Account Interface
                    'swap-api/v1/swap_api_trading_status': 1,
                    # Swap Account Interface
                    'linear-swap-api/v1/swap_api_trading_status': 1,
                },
                'post': {
                    # Future Account Interface
                    'api/v1/contract_balance_valuation': 1,
                    'api/v1/contract_account_info': 1,
                    'api/v1/contract_position_info': 1,
                    'api/v1/contract_sub_auth': 1,
                    'api/v1/contract_sub_account_list': 1,
                    'api/v1/contract_sub_account_info_list': 1,
                    'api/v1/contract_sub_account_info': 1,
                    'api/v1/contract_sub_position_info': 1,
                    'api/v1/contract_financial_record': 1,
                    'api/v1/contract_financial_record_exact': 1,
                    'api/v1/contract_user_settlement_records': 1,
                    'api/v1/contract_order_limit': 1,
                    'api/v1/contract_fee': 1,
                    'api/v1/contract_transfer_limit': 1,
                    'api/v1/contract_position_limit': 1,
                    'api/v1/contract_account_position_info': 1,
                    'api/v1/contract_master_sub_transfer': 1,
                    'api/v1/contract_master_sub_transfer_record': 1,
                    'api/v1/contract_available_level_rate': 1,
                    # Future Trade Interface
                    'api/v1/contract_order': 1,
                    'v1/contract_batchorder': 1,
                    'api/v1/contract_cancel': 1,
                    'api/v1/contract_cancelall': 1,
                    'api/v1/contract_switch_lever_rate': 1,
                    'api/v1/lightning_close_position': 1,
                    'api/v1/contract_order_info': 1,
                    'api/v1/contract_order_detail': 1,
                    'api/v1/contract_openorders': 1,
                    'api/v1/contract_hisorders': 1,
                    'api/v1/contract_hisorders_exact': 1,
                    'api/v1/contract_matchresults': 1,
                    'api/v1/contract_matchresults_exact': 1,
                    # Contract Strategy Order Interface
                    'api/v1/contract_trigger_order': 1,
                    'api/v1/contract_trigger_cancel': 1,
                    'api/v1/contract_trigger_cancelall': 1,
                    'api/v1/contract_trigger_openorders': 1,
                    'api/v1/contract_trigger_hisorders': 1,
                    'api/v1/contract_tpsl_order': 1,
                    'api/v1/contract_tpsl_cancel': 1,
                    'api/v1/contract_tpsl_cancelall': 1,
                    'api/v1/contract_tpsl_openorders': 1,
                    'api/v1/contract_tpsl_hisorders': 1,
                    'api/v1/contract_relation_tpsl_order': 1,
                    'api/v1/contract_track_order': 1,
                    'api/v1/contract_track_cancel': 1,
                    'api/v1/contract_track_cancelall': 1,
                    'api/v1/contract_track_openorders': 1,
                    'api/v1/contract_track_hisorders': 1,
                    # Swap Account Interface
                    'swap-api/v1/swap_balance_valuation': 1,
                    'swap-api/v1/swap_account_info': 1,
                    'swap-api/v1/swap_position_info': 1,
                    'swap-api/v1/swap_account_position_info': 1,
                    'swap-api/v1/swap_sub_auth': 1,
                    'swap-api/v1/swap_sub_account_list': 1,
                    'swap-api/v1/swap_sub_account_info_list': 1,
                    'swap-api/v1/swap_sub_account_info': 1,
                    'swap-api/v1/swap_sub_position_info': 1,
                    'swap-api/v1/swap_financial_record': 1,
                    'swap-api/v1/swap_financial_record_exact': 1,
                    'swap-api/v1/swap_user_settlement_records': 1,
                    'swap-api/v1/swap_available_level_rate': 1,
                    'swap-api/v1/swap_order_limit': 1,
                    'swap-api/v1/swap_fee': 1,
                    'swap-api/v1/swap_transfer_limit': 1,
                    'swap-api/v1/swap_position_limit': 1,
                    'swap-api/v1/swap_master_sub_transfer': 1,
                    'swap-api/v1/swap_master_sub_transfer_record': 1,
                    # Swap Trade Interface
                    'swap-api/v1/swap_order': 1,
                    'swap-api/v1/swap_batchorder': 1,
                    'swap-api/v1/swap_cancel': 1,
                    'swap-api/v1/swap_cancelall': 1,
                    'swap-api/v1/swap_lightning_close_position': 1,
                    'swap-api/v1/swap_switch_lever_rate': 1,
                    'swap-api/v1/swap_order_info': 1,
                    'swap-api/v1/swap_order_detail': 1,
                    'swap-api/v1/swap_openorders': 1,
                    'swap-api/v1/swap_hisorders': 1,
                    'swap-api/v1/swap_hisorders_exact': 1,
                    'swap-api/v1/swap_matchresults': 1,
                    'swap-api/v1/swap_matchresults_exact': 1,
                    # Swap Strategy Order Interface
                    'swap-api/v1/swap_trigger_order': 1,
                    'swap-api/v1/swap_trigger_cancel': 1,
                    'swap-api/v1/swap_trigger_cancelall': 1,
                    'swap-api/v1/swap_trigger_openorders': 1,
                    'swap-api/v1/swap_trigger_hisorders': 1,
                    'swap-api/v1/swap_tpsl_order': 1,
                    'swap-api/v1/swap_tpsl_cancel': 1,
                    'swap-api/v1/swap_tpsl_cancelall': 1,
                    'swap-api/v1/swap_tpsl_openorders': 1,
                    'swap-api/v1/swap_tpsl_hisorders': 1,
                    'swap-api/v1/swap_relation_tpsl_order': 1,
                    'swap-api/v1/swap_track_order': 1,
                    'swap-api/v1/swap_track_cancel': 1,
                    'swap-api/v1/swap_track_cancelall': 1,
                    'swap-api/v1/swap_track_openorders': 1,
                    'swap-api/v1/swap_track_hisorders': 1,
                    # Swap Account Interface
                    'linear-swap-api/v1/swap_balance_valuation': 1,
                    'linear-swap-api/v1/swap_account_info': 1,
                    'linear-swap-api/v1/swap_cross_account_info': 1,
                    'linear-swap-api/v1/swap_position_info': 1,
                    'linear-swap-api/v1/swap_cross_position_info': 1,
                    'linear-swap-api/v1/swap_account_position_info': 1,
                    'linear-swap-api/v1/swap_cross_account_position_info': 1,
                    'linear-swap-api/v1/swap_sub_auth': 1,
                    'linear-swap-api/v1/swap_sub_account_list': 1,
                    'linear-swap-api/v1/swap_cross_sub_account_list': 1,
                    'linear-swap-api/v1/swap_sub_account_info_list': 1,
                    'linear-swap-api/v1/swap_cross_sub_account_info_list': 1,
                    'linear-swap-api/v1/swap_sub_account_info': 1,
                    'linear-swap-api/v1/swap_cross_sub_account_info': 1,
                    'linear-swap-api/v1/swap_sub_position_info': 1,
                    'linear-swap-api/v1/swap_cross_sub_position_info': 1,
                    'linear-swap-api/v1/swap_financial_record': 1,
                    'linear-swap-api/v1/swap_financial_record_exact': 1,
                    'linear-swap-api/v1/swap_user_settlement_records': 1,
                    'linear-swap-api/v1/swap_cross_user_settlement_records': 1,
                    'linear-swap-api/v1/swap_available_level_rate': 1,
                    'linear-swap-api/v1/swap_cross_available_level_rate': 1,
                    'linear-swap-api/v1/swap_order_limit': 1,
                    'linear-swap-api/v1/swap_fee': 1,
                    'linear-swap-api/v1/swap_transfer_limit': 1,
                    'linear-swap-api/v1/swap_cross_transfer_limit': 1,
                    'linear-swap-api/v1/swap_position_limit': 1,
                    'linear-swap-api/v1/swap_cross_position_limit': 1,
                    'linear-swap-api/v1/swap_master_sub_transfer': 1,
                    'linear-swap-api/v1/swap_master_sub_transfer_record': 1,
                    'linear-swap-api/v1/swap_transfer_inner': 1,
                    # Swap Trade Interface
                    'linear-swap-api/v1/swap_order': 1,
                    'linear-swap-api/v1/swap_cross_order': 1,
                    'linear-swap-api/v1/swap_batchorder': 1,
                    'linear-swap-api/v1/swap_cross_batchorder': 1,
                    'linear-swap-api/v1/swap_cancel': 1,
                    'linear-swap-api/v1/swap_cross_cancel': 1,
                    'linear-swap-api/v1/swap_cancelall': 1,
                    'linear-swap-api/v1/swap_cross_cancelall': 1,
                    'linear-swap-api/v1/swap_switch_lever_rate': 1,
                    'linear-swap-api/v1/swap_cross_switch_lever_rate': 1,
                    'linear-swap-api/v1/swap_lightning_close_position': 1,
                    'linear-swap-api/v1/swap_cross_lightning_close_position': 1,
                    'linear-swap-api/v1/swap_order_info': 1,
                    'linear-swap-api/v1/swap_cross_order_info': 1,
                    'linear-swap-api/v1/swap_order_detail': 1,
                    'linear-swap-api/v1/swap_cross_order_detail': 1,
                    'linear-swap-api/v1/swap_openorders': 1,
                    'linear-swap-api/v1/swap_cross_openorders': 1,
                    'linear-swap-api/v1/swap_hisorders': 1,
                    'linear-swap-api/v1/swap_cross_hisorders': 1,
                    'linear-swap-api/v1/swap_hisorders_exact': 1,
                    'linear-swap-api/v1/swap_cross_hisorders_exact': 1,
                    'linear-swap-api/v1/swap_matchresults': 1,
                    'linear-swap-api/v1/swap_cross_matchresults': 1,
                    'linear-swap-api/v1/swap_matchresults_exact': 1,
                    'linear-swap-api/v1/swap_cross_matchresults_exact': 1,
                    # Swap Strategy Order Interface
                    'linear-swap-api/v1/swap_trigger_order': 1,
                    'linear-swap-api/v1/swap_cross_trigger_order': 1,
                    'linear-swap-api/v1/swap_trigger_cancel': 1,
                    'linear-swap-api/v1/swap_cross_trigger_cancel': 1,
                    'linear-swap-api/v1/swap_trigger_cancelall': 1,
                    'linear-swap-api/v1/swap_cross_trigger_cancelall': 1,
                    'linear-swap-api/v1/swap_trigger_openorders': 1,
                    'linear-swap-api/v1/swap_cross_trigger_openorders': 1,
                    'linear-swap-api/v1/swap_trigger_hisorders': 1,
                    'linear-swap-api/v1/swap_cross_trigger_hisorders': 1,
                    'linear-swap-api/v1/swap_tpsl_order': 1,
                    'linear-swap-api/v1/swap_cross_tpsl_order': 1,
                    'linear-swap-api/v1/swap_tpsl_cancel': 1,
                    'linear-swap-api/v1/swap_cross_tpsl_cancel': 1,
                    'linear-swap-api/v1/swap_tpsl_cancelall': 1,
                    'linear-swap-api/v1/swap_cross_tpsl_cancelall': 1,
                    'linear-swap-api/v1/swap_tpsl_openorders': 1,
                    'linear-swap-api/v1/swap_cross_tpsl_openorders': 1,
                    'linear-swap-api/v1/swap_tpsl_hisorders': 1,
                    'linear-swap-api/v1/swap_cross_tpsl_hisorders': 1,
                    'linear-swap-api/v1/swap_relation_tpsl_order': 1,
                    'linear-swap-api/v1/swap_cross_relation_tpsl_order': 1,
                    'linear-swap-api/v1/swap_track_order': 1,
                    'linear-swap-api/v1/swap_cross_track_order': 1,
                    'linear-swap-api/v1/swap_track_cancel': 1,
                    'linear-swap-api/v1/swap_cross_track_cancel': 1,
                    'linear-swap-api/v1/swap_track_cancelall': 1,
                    'linear-swap-api/v1/swap_cross_track_cancelall': 1,
                    'linear-swap-api/v1/swap_track_openorders': 1,
                    'linear-swap-api/v1/swap_cross_track_openorders': 1,
                    'linear-swap-api/v1/swap_track_hisorders': 1,
                    'linear-swap-api/v1/swap_cross_track_hisorders': 1,
                },
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
    },
    'exceptions': {
        'broad': {
            'contract is restricted of closing positions on API.  Please contact customer service': OnMaintenance,
            'maintain': OnMaintenance,
        },
        'exact': {
            # err-code
            '1017': OrderNotFound,  # {"status":"error","err_code":1017,"err_msg":"Order doesnt exist.","ts":1640550859242}
            '1034': InvalidOrder,  # {"status":"error","err_code":1034,"err_msg":"Incorrect field of order price type.","ts":1643802870182}
            '1036': InvalidOrder,  # {"status":"error","err_code":1036,"err_msg":"Incorrect field of open long form.","ts":1643802518986}
            '1039': InvalidOrder,  # {"status":"error","err_code":1039,"err_msg":"Buy price must be lower than 39270.9USDT. Sell price must exceed 37731USDT.","ts":1643802374403}
            '1041': InvalidOrder,  # {"status":"error","err_code":1041,"err_msg":"The order amount exceeds the limit(170000Cont), please modify and order again.","ts":1643802784940}
            '1047': InsufficientFunds,  # {"status":"error","err_code":1047,"err_msg":"Insufficient margin available.","ts":1643802672652}
            '1066': BadSymbol,  # {"status":"error","err_code":1066,"err_msg":"The symbol field cannot be empty. Please re-enter.","ts":1640550819147}
            '1067': InvalidOrder,  # {"status":"error","err_code":1067,"err_msg":"The client_order_id field is invalid. Please re-enter.","ts":1643802119413}
            '1013': BadSymbol,  # {"status":"error","err_code":1013,"err_msg":"This contract symbol doesnt exist.","ts":1640550459583}
            '1094': InvalidOrder,  # {"status":"error","err_code":1094,"err_msg":"The leverage cannot be empty, please switch the leverage or contact customer service","ts":1640496946243}
            '1220': AccountNotEnabled,  # {"status":"error","err_code":1220,"err_msg":"You don’t have access permission as you have not opened contracts trading.","ts":1645096660718}
            'bad-request': BadRequest,
            'validation-format-error': BadRequest,  # {"status":"error","err-code":"validation-format-error","err-msg":"Format Error: order-id.","data":null}
            'validation-constraints-required': BadRequest,  # {"status":"error","err-code":"validation-constraints-required","err-msg":"Field is missing: client-order-id.","data":null}
            'base-date-limit-error': BadRequest,  # {"status":"error","err-code":"base-date-limit-error","err-msg":"date less than system limit","data":null}
            'api-not-support-temp-addr': PermissionDenied,  # {"status":"error","err-code":"api-not-support-temp-addr","err-msg":"API withdrawal does not support temporary addresses","data":null}
            'timeout': RequestTimeout,  # {"ts":1571653730865,"status":"error","err-code":"timeout","err-msg":"Request Timeout"}
            'gateway-internal-error': ExchangeNotAvailable,  # {"status":"error","err-code":"gateway-internal-error","err-msg":"Failed to load data. Try again later.","data":null}
            'account-frozen-balance-insufficient-error': InsufficientFunds,  # {"status":"error","err-code":"account-frozen-balance-insufficient-error","err-msg":"trade account balance is not enough, left: `0.0027`","data":null}
            'invalid-amount': InvalidOrder,  # eg "Paramemter `amount` is invalid."
            'order-limitorder-amount-min-error': InvalidOrder,  # limit order amount error, min: `0.001`
            'order-limitorder-amount-max-error': InvalidOrder,  # market order amount error, max: `1000000`
            'order-marketorder-amount-min-error': InvalidOrder,  # market order amount error, min: `0.01`
            'order-limitorder-price-min-error': InvalidOrder,  # limit order price error
            'order-limitorder-price-max-error': InvalidOrder,  # limit order price error
            'order-holding-limit-failed': InvalidOrder,  # {"status":"error","err-code":"order-holding-limit-failed","err-msg":"Order failed, exceeded the holding limit of self currency","data":null}
            'order-orderprice-precision-error': InvalidOrder,  # {"status":"error","err-code":"order-orderprice-precision-error","err-msg":"order price precision error, scale: `4`","data":null}
            'order-etp-nav-price-max-error': InvalidOrder,  # {"status":"error","err-code":"order-etp-nav-price-max-error","err-msg":"Order price cannot be higher than 5% of NAV","data":null}
            'order-orderstate-error': OrderNotFound,  # canceling an already canceled order
            'order-queryorder-invalid': OrderNotFound,  # querying a non-existent order
            'order-update-error': ExchangeNotAvailable,  # undocumented error
            'api-signature-check-failed': AuthenticationError,
            'api-signature-not-valid': AuthenticationError,  # {"status":"error","err-code":"api-signature-not-valid","err-msg":"Signature not valid: Incorrect Access key [Access key错误]","data":null}
            'base-record-invalid': OrderNotFound,  # https://github.com/ccxt/ccxt/issues/5750
            'base-symbol-trade-disabled': BadSymbol,  # {"status":"error","err-code":"base-symbol-trade-disabled","err-msg":"Trading is disabled for self symbol","data":null}
            'base-symbol-error': BadSymbol,  # {"status":"error","err-code":"base-symbol-error","err-msg":"The symbol is invalid","data":null}
            'system-maintenance': OnMaintenance,  # {"status": "error", "err-code": "system-maintenance", "err-msg": "System is in maintenance!", "data": null}
            'base-request-exceed-frequency-limit': RateLimitExceeded,  # {"status":"error","err-code":"base-request-exceed-frequency-limit","err-msg":"Frequency of requests has exceeded the limit, please try again later","data":null}
            # err-msg
            'invalid symbol': BadSymbol,  # {"ts":1568813334794,"status":"error","err-code":"invalid-parameter","err-msg":"invalid symbol"}
            'symbol trade not open now': BadSymbol,  # {"ts":1576210479343,"status":"error","err-code":"invalid-parameter","err-msg":"symbol trade not open now"}
            'require-symbol': BadSymbol,  # {"status":"error","err-code":"require-symbol","err-msg":"Parameter `symbol` is required.","data":null}
        },
    },
    'precisionMode': TICK_SIZE,
    'options': {
        'fetchMarkets': {
            'types': {
                'spot': True,
                'future': {
                    'linear': True,
                    'inverse': True,
                },
                'swap': {
                    'linear': True,
                    'inverse': True,
                },
            },
        },
        'defaultType': 'spot',  # spot, future, swap
        'defaultSubType': 'inverse',  # inverse, linear
        'defaultNetwork': 'ERC20',
        'networks': {
            'ETH': 'erc20',
            'TRX': 'trc20',
            'HRC20': 'hrc20',
            'HECO': 'hrc20',
            'HT': 'hrc20',
            'ALGO': 'algo',
            'OMNI': '',
        },
        # https://github.com/ccxt/ccxt/issues/5376
        'fetchOrdersByStatesMethod': 'spot_private_get_v1_order_orders',  # 'spot_private_get_v1_order_history'  # https://github.com/ccxt/ccxt/pull/5392
        'createMarketBuyOrderRequiresPrice': True,
        'language': 'en-US',
        'broker': {
            'id': 'AA03022abc',
        },
        'accountsByType': {
            'spot': 'pro',
            'future': 'futures',
        },
        'typesByAccount': {
            'pro': 'spot',
            'futures': 'future',
        },
        'spot': {
            'stopOrderTypes': {
                'stop-limit': True,
                'buy-stop-limit': True,
                'sell-stop-limit': True,
                'stop-limit-fok': True,
                'buy-stop-limit-fok': True,
                'sell-stop-limit-fok': True,
            },
            'limitOrderTypes': {
                'limit': True,
                'buy-limit': True,
                'sell-limit': True,
                'ioc': True,
                'buy-ioc': True,
                'sell-ioc': True,
                'limit-maker': True,
                'buy-limit-maker': True,
                'sell-limit-maker': True,
                'stop-limit': True,
                'buy-stop-limit': True,
                'sell-stop-limit': True,
                'limit-fok': True,
                'buy-limit-fok': True,
                'sell-limit-fok': True,
                'stop-limit-fok': True,
                'buy-stop-limit-fok': True,
                'sell-stop-limit-fok': True,
            },
        },
    },
    'commonCurrencies': {
        # https://github.com/ccxt/ccxt/issues/6081
        # https://github.com/ccxt/ccxt/issues/3365
        # https://github.com/ccxt/ccxt/issues/2873
        'GET': 'Themis',  # conflict with GET(Guaranteed Entrance Token, GET Protocol)
        'GTC': 'Game.com',  # conflict with Gitcoin and Gastrocoin
        'HIT': 'HitChain',
        'HOT': 'Hydro Protocol',  # conflict with HOT(Holo) https://github.com/ccxt/ccxt/issues/4929
        # https://github.com/ccxt/ccxt/issues/7399
        # https://coinmarketcap.com/currencies/pnetwork/
        # https://coinmarketcap.com/currencies/penta/markets/
        # https://en.cryptonomist.ch/blog/eidoo/the-edo-to-pnt-upgrade-what-you-need-to-know-updated/
        'PNT': 'Penta',
        'SBTC': 'Super Bitcoin',
        'BIFI': 'Bitcoin File',  # conflict with Beefy.Finance https://github.com/ccxt/ccxt/issues/8706
    },
},
{
    'id': 'btcalpha',
    'name': 'BTC-Alpha',
    'countries': ['US'],
    'version': 'v1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': None,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'timeframes': {
        '1m': '1',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '4h': '240',
        '1d': 'D',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/42625213-dabaa5da-85cf-11e8-8f99-aa8f8f7699f0.jpg',
        'api': 'https://btc-alpha.com/api',
        'www': 'https://btc-alpha.com',
        'doc': 'https://btc-alpha.github.io/api-docs',
        'fees': 'https://btc-alpha.com/fees/',
        'referral': 'https://btc-alpha.com/?r=123788',
    },
    'api': {
        'public': {
            'get': [
                'currencies/',
                'pairs/',
                'orderbook/{pair_name}/',
                'exchanges/',
                'charts/{pair}/{type}/chart/',
            ],
        },
        'private': {
            'get': [
                'wallets/',
                'orders/own/',
                'order/{id}/',
                'exchanges/own/',
                'deposits/',
                'withdraws/',
            ],
            'post': [
                'order/',
                'order-cancel/',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
        'funding': {
            'withdraw': {},
        },
    },
    'commonCurrencies': {
        'CBC': 'Cashbery',
    },
    'exceptions': {
        'exact': {},
        'broad': {
            'Out of balance': InsufficientFunds,  # {"date":1570599531.4814300537,"error":"Out of balance -9.99243661 BTC"}
        },
    },
},
{
    'id': 'coinone',
    'name': 'CoinOne',
    'countries': ['KR'],  # Korea
    # 'enableRateLimit': False,
    'rateLimit': 667,
    'version': 'v2',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': None,  # the endpoint that should return closed orders actually returns trades, https://github.com/ccxt/ccxt/pull/7067
        'fetchDepositAddresses': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/38003300-adc12fba-323f-11e8-8525-725f53c4a659.jpg',
        'api': 'https://api.coinone.co.kr',
        'www': 'https://coinone.co.kr',
        'doc': 'https://doc.coinone.co.kr',
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'api': {
        'public': {
            'get': [
                'orderbook/',
                'trades/',
                'ticker/',
            ],
        },
        'private': {
            'post': [
                'account/deposit_address/',
                'account/btc_deposit_address/',
                'account/balance/',
                'account/daily_balance/',
                'account/user_info/',
                'account/virtual_account/',
                'order/cancel_all/',
                'order/cancel/',
                'order/limit_buy/',
                'order/limit_sell/',
                'order/complete_orders/',
                'order/limit_orders/',
                'order/order_info/',
                'transaction/auth_number/',
                'transaction/history/',
                'transaction/krw/history/',
                'transaction/btc/',
                'transaction/coin/',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'taker': 0.002,
            'maker': 0.002,
        },
    },
    'precision': {
        'price': 4,
        'amount': 4,
        'cost': 8,
    },
    'exceptions': {
        '405': OnMaintenance,  # {"errorCode":"405","status":"maintenance","result":"error"}
        '104': OrderNotFound,  # {"errorCode":"104","errorMsg":"Order id is not exist","result":"error"}
        '108': BadSymbol,  # {"errorCode":"108","errorMsg":"Unknown CryptoCurrency","result":"error"}
        '107': BadRequest,  # {"errorCode":"107","errorMsg":"Parameter error","result":"error"}
    },
    'commonCurrencies': {
        'SOC': 'Soda Coin',
    },
},
{
    'id': 'hollaex',
    'name': 'HollaEx',
    'countries': ['KR'],
    # 4 requests per second => 1000ms / 4 = 250 ms between requests
    'rateLimit': 250,
    'version': 'v2',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createLimitBuyOrder': True,
        'createLimitSellOrder': True,
        'createMarketBuyOrder': True,
        'createMarketSellOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': 'emulated',
        'fetchDepositAddresses': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': None,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '1h': '1h',
        '4h': '4h',
        '1d': '1d',
        '1w': '1w',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/75841031-ca375180-5ddd-11ea-8417-b975674c23cb.jpg',
        'test': 'https://api.sandbox.hollaex.com',
        'api': 'https://api.hollaex.com',
        'www': 'https://hollaex.com',
        'doc': 'https://apidocs.hollaex.com',
        'referral': 'https://pro.hollaex.com/signup?affiliation_code=QSWA6G',
    },
    'precisionMode': TICK_SIZE,
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'api': {
        'public': {
            'get': {
                'health': 1,
                'constants': 1,
                'kit': 1,
                'tiers': 1,
                'ticker': 1,
                'tickers': 1,
                'orderbook': 1,
                'orderbooks': 1,
                'trades': 1,
                'chart': 1,
                'charts': 1,
                # TradingView
                'udf/config': 1,
                'udf/history': 1,
                'udf/symbols': 1,
            },
        },
        'private': {
            'get': {
                'user': 1,
                'user/balance': 1,
                'user/deposits': 1,
                'user/withdrawals': 1,
                'user/withdrawal/fee': 1,
                'user/trades': 1,
                'orders': 1,
                'orders/{order_id}': 1,
            },
            'post': {
                'user/request-withdrawal': 1,
                'order': 1,
            },
            'delete': {
                'order/all': 1,
                'order': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': 0.001,
            'maker': 0.001,
        },
    },
    'exceptions': {
        'broad': {
            'Invalid token': AuthenticationError,
            'Order not found': OrderNotFound,
            'Insufficient balance': InsufficientFunds,
        },
        'exact': {
            '400': BadRequest,
            '403': AuthenticationError,
            '404': BadRequest,
            '405': BadRequest,
            '410': BadRequest,
            '429': BadRequest,
            '500': NetworkError,
            '503': NetworkError,
        },
    },
    'options': {
        # how many seconds before the authenticated request expires
        'api-expires': int(self.timeout / 1000),
    },
},
{
    'id': 'bw',
    'name': 'BW',
    'countries': ['CN'],
    'rateLimit': 1500,
    'version': 'v1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': None,  # has but unimplemented
        'future': None,
        'option': None,
        'cancelAllOrders': None,
        'cancelOrder': True,
        'cancelOrders': None,
        'createDepositAddress': None,
        'createLimitOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'deposit': None,
        'editOrder': None,
        'fetchBalance': True,
        'fetchBidsAsks': None,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFees': None,
        'fetchL2OrderBook': None,
        'fetchLedger': None,
        'fetchMarkets': True,
        'fetchMyTrades': None,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': None,
        'fetchOrders': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTradingLimits': None,
        'fetchTransactions': None,
        'fetchWithdrawals': True,
        'withdraw': None,
    },
    'timeframes': {
        '1m': '1M',
        '5m': '5M',
        '15m': '15M',
        '30m': '30M',
        '1h': '1H',
        '1w': '1W',
    },
    'hostname': 'bw.com',  # set to 'bw.io' for China mainland
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/69436317-31128c80-0d52-11ea-91d1-eb7bb5818812.jpg',
        'api': 'https://www.{hostname}',
        'www': 'https://www.bw.com',
        'doc': 'https://github.com/bw-exchange/api_docs_en/wiki',
        'fees': 'https://www.bw.com/feesRate',
        'referral': 'https://www.bw.com/regGetCommission/N3JuT1R3bWxKTE0',
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.002'),
            'maker': self.parse_number('0.002'),
        },
        'funding': {
        },
    },
    'exceptions': {
        'exact': {
            '999': AuthenticationError,
            '1000': ExchangeNotAvailable,  # {"datas":null,"resMsg":{"message":"getKlines error:data not exitsts\uff0cplease wait ,dataType=4002_KLINE_1M","method":null,"code":"1000"}}
            '2012': OrderNotFound,  # {"datas":null,"resMsg":{"message":"entrust not exists or on dealing with system","method":null,"code":"2012"}}
            '5017': BadSymbol,  # {"datas":null,"resMsg":{"message":"market not exist","method":null,"code":"5017"}}
            '10001': RateLimitExceeded,  # {"resMsg":{"code":"10001","message":"API frequency limit"}}
        },
    },
    'api': {
        'public': {
            'get': [
                'api/data/v1/klines',
                'api/data/v1/ticker',
                'api/data/v1/tickers',
                'api/data/v1/trades',
                'api/data/v1/entrusts',
                'exchange/config/controller/website/marketcontroller/getByWebId',
                'exchange/config/controller/website/currencycontroller/getCurrencyList',
            ],
        },
        'private': {
            'get': [
                'exchange/entrust/controller/website/EntrustController/getEntrustById',
                'exchange/entrust/controller/website/EntrustController/getUserEntrustRecordFromCacheWithPage',
                'exchange/entrust/controller/website/EntrustController/getUserEntrustList',
                'exchange/fund/controller/website/fundwebsitecontroller/getwithdrawaddress',
                'exchange/fund/controller/website/fundwebsitecontroller/getpayoutcoinrecord',
                'exchange/entrust/controller/website/EntrustController/getUserEntrustList',
                # the docs say that the following URLs are HTTP POST
                # in the docs header and HTTP GET in the docs body
                # the docs contradict themselves, a typo most likely
                # the actual HTTP method is POST for self endpoint
                # 'exchange/fund/controller/website/fundcontroller/getPayinAddress',
                # 'exchange/fund/controller/website/fundcontroller/getPayinCoinRecord',
            ],
            'post': [
                'exchange/fund/controller/website/fundcontroller/getPayinAddress',  # see the comment above
                'exchange/fund/controller/website/fundcontroller/getPayinCoinRecord',  # see the comment above
                'exchange/fund/controller/website/fundcontroller/findbypage',
                'exchange/entrust/controller/website/EntrustController/addEntrust',
                'exchange/entrust/controller/website/EntrustController/cancelEntrust',
            ],
        },
    },
},
{
    'id': 'qtrade',
    'name': 'qTrade',
    'countries': ['US'],
    'rateLimit': 1000,
    'version': 'v1',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/80491487-74a99c00-896b-11ea-821e-d307e832f13e.jpg',
        'api': 'https://api.qtrade.io',
        'www': 'https://qtrade.io',
        'doc': 'https://qtrade-exchange.github.io/qtrade-docs',
        'referral': 'https://qtrade.io/?ref=BKOQWVFGRH2C',
    },
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDeposit': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTransactions': None,
        'fetchWithdrawal': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '5m': 'fivemin',
        '15m': 'fifteenmin',
        '30m': 'thirtymin',
        '1h': 'onehour',
        '2h': 'twohour',
        '4h': 'fourhour',
        '1d': 'oneday',
    },
    'api': {
        'public': {
            'get': [
                'ticker/{market_string}',
                'tickers',
                'currency/{code}',
                'currencies',
                'common',
                'market/{market_string}',
                'markets',
                'market/{market_string}/trades',
                'orderbook/{market_string}',
                'market/{market_string}/ohlcv/{interval}',
            ],
        },
        'private': {
            'get': [
                'me',
                'balances',
                'balances_all',  # undocumented
                'market/{market_string}',
                'orders',
                'order/{order_id}',
                'trades',
                'withdraw/{withdraw_id}',
                'withdraws',
                'deposit/{deposit_id}',
                'deposits',
                'transfers',
            ],
            'post': [
                'cancel_order',
                'withdraw',
                'deposit_address/{currency}',
                'sell_limit',
                'buy_limit',
            ],
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'quote',
            'tierBased': True,
            'percentage': True,
            'taker': 0.005,
            'maker': 0.0,
        },
        'funding': {
            'withdraw': {},
        },
    },
    'commonCurrencies': {
        'BTM': 'Bitmark',
    },
    'exceptions': {
        'exact': {
            'invalid_auth': AuthenticationError,
            'insuff_funds': InsufficientFunds,
            'market_not_found': BadSymbol,  # {"errors":[{"code":"market_not_found","title":"Requested market does not exist"}]}
            'too_small': InvalidOrder,
            'limit_exceeded': RateLimitExceeded,  # {"errors":[{"code":"limit_exceeded","title":"You have exceeded the windowed rate limit. Please see docs."}]}
        },
    },
},
{
    'id': 'woo',
    'name': 'WOO X',
    'countries': ['KY'],  # Cayman Islands
    'rateLimit': 100,
    'version': 'v1',
    'certified': False,
    'hostname': 'woo.org',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': True,
        'swap': False,
        'future': False,
        'option': False,
        'cancelAllOrders': False,
        'cancelOrder': True,
        'cancelOrders': True,
        'cancelWithdraw': False,  # exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs: https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
        'createMarketOrder': False,
        'createOrder': True,
        'deposit': False,
        'fetchBalance': True,
        'fetchCanceledOrders': False,
        'fetchClosedOrder': False,
        'fetchClosedOrders': False,
        'fetchCurrencies': True,
        'fetchDepositAddress': False,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchLedger': True,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': False,
        'fetchOpenOrders': False,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchStatus': False,
        'fetchTicker': False,
        'fetchTickers': False,
        'fetchTime': False,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'fetchTransfers': True,
        'fetchWithdrawals': True,
        'withdraw': False,  # exchange have that endpoint disabled atm, but was once implemented in ccxt per old docs: https://kronosresearch.github.io/wootrade-documents/#token-withdraw
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '12h': '12h',
        '1d': '1d',
        '1w': '1w',
        '1M': '1mon',
        '1y': '1y',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg',
        'api': {
            'public': 'https://api.{hostname}',
            'private': 'https://api.{hostname}',
        },
        # TEST(stating) api( https://support.woo.org/hc/en-001/articles/4406352945305--Institutional-Account-Welcome-Packet-V-2) doesn't work at self moment, even thou
        # 'test': {
        #     'public': 'http://api.staging.woo.org',
        #     'private': 'http://api.staging.woo.org',
        # },
        'www': 'https://woo.org/',
        'doc': [
            'https://docs.woo.org/',
        ],
        'fees': [
            'https://support.woo.org/hc/en-001/articles/4404611795353--Trading-Fees',
        ],
        'referral': 'https://referral.woo.org/BAJS6oNmZb3vi3RGA',
    },
    'api': {
        'v1': {
            'public': {
                'get': {
                    'info': 1,
                    'info/{symbol}': 1,
                    'market_trades': 1,
                    'token': 1,
                    'token_network': 1,
                },
            },
            'private': {
                'get': {
                    'client/token': 1,
                    'order/{oid}': 1,
                    'client/order/{client_order_id}': 1,
                    'orders': 1,
                    'orderbook/{symbol}': 1,
                    'kline': 1,
                    'client/trade/{tid}': 1,
                    'order/{oid}/trades': 1,
                    'client/trades': 1,
                    'client/info': 60,
                    'asset/deposit': 120,
                    'asset/history': 60,
                    'token_interest': 60,
                    'token_interest/{token}': 60,
                    'interest/history': 60,
                    'interest/repay': 60,
                },
                'post': {
                    'order': 5,  # 2 requests per 1 second per symbol
                    'asset/withdraw': 120,  # implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#token-withdraw
                },
                'delete': {
                    'order': 1,
                    'client/order': 1,
                    'orders': 1,
                    'asset/withdraw': 120,  # implemented in ccxt, disabled on the exchange side https://kronosresearch.github.io/wootrade-documents/#cancel-withdraw-request
                },
            },
        },
        'v2': {
            'private': {
                'get': {
                    'client/holding': 1,
                },
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'maker': self.parse_number('0.0002'),
            'taker': self.parse_number('0.0005'),
        },
    },
    'options': {
        'createMarketBuyOrderRequiresPrice': True,
        'network-aliases': {
            'ALGO': 'ALGO',
            'ATOM': 'ATOM',
            'AVAXC': 'AVAXC',
            'BNB': 'BEP2',
            'BSC': 'BEP20',
            'BTC': 'BTC',
            'BCHSV': 'BSV',
            'EOS': 'EOS',
            'ETH': 'ERC20',
            'HECO': 'HRC20',
            'MATIC': 'POLYGON',
            'ONT': 'ONT',
            'SOL': 'SPL',
            'TERRA': 'TERRA',
            'TRON': 'TRC20',
        },
        # network-aliases for titles are removed(just in case, if needed: pastebin.com/raw/BvgKViPN )
        'network-aliases-for-protocol': {
            'ALGO': 'ALGO',
            'ATOM': 'ATOM',
            'C Chain': 'AVAXC',
            'BEP2': 'BEP2',
            'BEP20': 'BEP20',
            'BTC': 'BTC',
            'BSV': 'BSV',
            'EOS': 'EOS',
            'ERC20': 'ERC20',
            'HECO': 'HRC20',
            'Polygon': 'POLYGON',
            'ONT': 'ONT',
            'SOL': 'SPL',
            'TERRA': 'TERRA',
            'TRON': 'TRC20',
        },
        # these network aliases require manual mapping here
        'network-aliases-for-tokens': {
            'HT': 'ERC20',
            'OMG': 'ERC20',
            'UATOM': 'ATOM',
            'ZRX': 'ZRX',
        },
        'defaultNetworkCodePriorities': [
            'TRC20',
            'ERC20',
            'BSC20',
        ],
        # override defaultNetworkCodePriorities for a specific currency
        'defaultNetworkCodeForCurrencies': {
            # 'USDT': 'TRC20',
            # 'BTC': 'BTC',
        },
    },
    'commonCurrencies': {},
    'exceptions': {
        'exact': {
            '-1000': ExchangeError,  # {"code": -1000,  "message": "An unknown error occurred while processing the request"}
            '-1001': AuthenticationError,  # {"code": -1001,  "message": "The api key or secret is in wrong format"}
            '-1002': AuthenticationError,  # {"code": -1002,  "message": "API key or secret is invalid, it may because key have insufficient permission or the key is expired/revoked."}
            '-1003': RateLimitExceeded,  # {"code": -1003,  "message": "Rate limit exceed."}
            '-1004': BadRequest,  # {"code": -1004,  "message": "An unknown parameter was sent."}
            '-1005': BadRequest,  # {"code": -1005,  "message": "Some parameters are in wrong format for api."}
            '-1006': BadRequest,  # {"code": -1006,  "message": "The data is not found in server."}
            '-1007': BadRequest,  # {"code": -1007,  "message": "The data is already exists or your request is duplicated."}
            '-1008': InvalidOrder,  # {"code": -1008,  "message": "The quantity of settlement is too high than you can request."}
            '-1009': BadRequest,  # {"code": -1009,  "message": "Can not request withdrawal settlement, you need to deposit other arrears first."}
            '-1011': ExchangeError,  # {"code": -1011,  "message": "Can not place/cancel orders, it may because internal network error. Please try again in a few seconds."}
            '-1012': BadRequest,  # {"code": -1012,  "message": "Amount is required for buy market orders when margin disabled."}  The place/cancel order request is rejected by internal module, it may because the account is in liquidation or other internal errors. Please try again in a few seconds."}
            '-1101': InvalidOrder,  # {"code": -1101,  "message": "The risk exposure for client is too high, it may cause by sending too big order or the leverage is too low. please refer to client info to check the current exposure."}
            '-1102': InvalidOrder,  # {"code": -1102,  "message": "The order value(price * size) is too small."}
            '-1103': InvalidOrder,  # {"code": -1103,  "message": "The order price is not following the tick size rule for the symbol."}
            '-1104': InvalidOrder,  # {"code": -1104,  "message": "The order quantity is not following the step size rule for the symbol."}
            '-1105': InvalidOrder,  # {"code": -1105,  "message": "Price is X% too high or X% too low from the mid price."}
        },
        'broad': {
            'symbol must not be blank': BadRequest,  # when sending 'cancelOrder' without symbol [-1005]
            'The token is not supported': BadRequest,  # when getting incorrect token's deposit address [-1005]
            'Your order and symbol are not valid or already canceled': BadRequest,  # actual response whensending 'cancelOrder' for already canceled id [-1006]
            'Insufficient WOO. Please enable margin trading for leverage trading': BadRequest,  # when selling insufficent token [-1012]
        },
    },
    'precisionMode': TICK_SIZE,
},
{
    'id': 'tidex',
    'name': 'Tidex',
    'countries': ['UK'],
    'rateLimit': 2000,
    'version': '3',
    'userAgent': self.userAgents['chrome'],
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchCurrencies': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/30781780-03149dc4-a12e-11e7-82bb-313b269d24d4.jpg',
        'api': {
            'web': 'https://gate.tidex.com/api',
            'public': 'https://api.tidex.com/api/3',
            'private': 'https://api.tidex.com/tapi',
        },
        'www': 'https://tidex.com',
        'doc': 'https://tidex.com/exchange/public-api',
        'referral': 'https://tidex.com/exchange/?ref=57f5638d9cd7',
        'fees': [
            'https://tidex.com/exchange/assets-spec',
            'https://tidex.com/exchange/pairs-spec',
        ],
    },
    'api': {
        'web': {
            'get': [
                'currency',
                'pairs',
                'tickers',
                'orders',
                'ordershistory',
                'trade-data',
                'trade-data/{id}',
            ],
        },
        'public': {
            'get': [
                'info',
                'ticker/{pair}',
                'depth/{pair}',
                'trades/{pair}',
            ],
        },
        'private': {
            'post': [
                'getInfoExt',
                'getInfo',
                'Trade',
                'ActiveOrders',
                'OrderInfo',
                'CancelOrder',
                'TradeHistory',
                'getDepositAddress',
                'createWithdraw',
                'getWithdraw',
            ],
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.001'),
            'maker': self.parse_number('0.001'),
        },
    },
    'commonCurrencies': {
        'DSH': 'DASH',
        'EMGO': 'MGO',
        'MGO': 'WMGO',
    },
    'exceptions': {
        'exact': {
            '803': InvalidOrder,  # "Count could not be less than 0.001."(selling below minAmount)
            '804': InvalidOrder,  # "Count could not be more than 10000."(buying above maxAmount)
            '805': InvalidOrder,  # "price could not be less than X."(minPrice violation on buy & sell)
            '806': InvalidOrder,  # "price could not be more than X."(maxPrice violation on buy & sell)
            '807': InvalidOrder,  # "cost could not be less than X."(minCost violation on buy & sell)
            '831': InsufficientFunds,  # "Not enougth X to create buy order."(buying with balance.quote < order.cost)
            '832': InsufficientFunds,  # "Not enougth X to create sell order."(selling with balance.base < order.amount)
            '833': OrderNotFound,  # "Order with id X was not found."(cancelling non-existent, closed and cancelled order)
        },
        'broad': {
            'Invalid pair name': ExchangeError,  # {"success":0,"error":"Invalid pair name: btc_eth"}
            'invalid api key': AuthenticationError,
            'invalid sign': AuthenticationError,
            'api key dont have trade permission': AuthenticationError,
            'invalid parameter': InvalidOrder,
            'invalid order': InvalidOrder,
            'Requests too often': DDoSProtection,
            'not available': ExchangeNotAvailable,
            'data unavailable': ExchangeNotAvailable,
            'external service unavailable': ExchangeNotAvailable,
            'IP restricted': PermissionDenied,  # {"success":0,"code":0,"error":"IP restricted(223.xxx.xxx.xxx)"}
        },
    },
    'options': {
        'fetchTickersMaxLength': 2048,
    },
    'orders': {},  # orders cache / emulation
},
{
    'id': 'aax',
    'name': 'AAX',
    'countries': ['MT'],  # Malta
    'enableRateLimit': True,
    'rateLimit': 500,
    'version': 'v2',
    'hostname': 'aaxpro.com',  # aax.com
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': True,
        'future': False,
        'option': False,
        'addMargin': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': None,
        'createDepositAddress': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'deposit': None,
        'editOrder': True,
        'fetchAccounts': None,
        'fetchBalance': True,
        'fetchBidsAsks': None,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchCanceledOrders': True,
        'fetchClosedOrder': None,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDeposit': None,
        'fetchDepositAddress': True,
        'fetchDepositAddresses': None,
        'fetchDepositAddressesByNetwork': None,
        'fetchDeposits': True,
        'fetchFundingFee': None,
        'fetchFundingFees': None,
        'fetchFundingHistory': True,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': True,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': True,
        'fetchIsolatedPositions': None,
        'fetchL3OrderBook': None,
        'fetchLedger': None,
        'fetchLedgerEntry': None,
        'fetchLeverage': None,
        'fetchLeverageTiers': True,
        'fetchMarketLeverageTiers': 'emulated',
        'fetchMarkets': True,
        'fetchMarkOHLCV': True,
        'fetchMyBuys': None,
        'fetchMySells': None,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': None,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': None,
        'fetchOrders': True,
        'fetchOrderTrades': None,
        'fetchPosition': None,
        'fetchPositions': None,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': True,
        'fetchStatus': True,
        'fetchTicker': 'emulated',
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchTradingLimits': None,
        'fetchTransactions': None,
        'fetchTransfers': None,
        'fetchWithdrawal': None,
        'fetchWithdrawals': True,
        'fetchWithdrawalWhitelist': None,
        'reduceMargin': None,
        'setLeverage': True,
        'setMarginMode': False,
        'setPositionMode': None,
        'signIn': None,
        'transfer': None,
        'withdraw': None,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '2h': '2h',
        '4h': '4h',
        '12h': '12h',
        '1d': '1d',
        '3d': '3d',
        '1w': '1w',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/104140087-a27f2580-53c0-11eb-87c1-5d9e81208fe9.jpg',
        'test': {
            'v1': 'https://api.testnet.{hostname}/marketdata/v1',
            'public': 'https://api.testnet.{hostname}',
            'private': 'https://api.testnet.{hostname}',
        },
        'api': {
            'v1': 'https://api.{hostname}/marketdata/v1',
            'public': 'https://api.{hostname}',
            'private': 'https://api.{hostname}',
        },
        'www': 'https://www.aaxpro.com',  # string website URL
        'doc': 'https://www.aaxpro.com/apidoc/index.html',
        'fees': 'https://www.aaxpro.com/en-US/fees/',
        'referral': 'https://www.aaxpro.com/invite/sign-up?inviteCode=JXGm5Fy7R2MB',
    },
    'api': {
        'v1': {
            'get': [
                'getHistMarketData',  # Get OHLC k line of specific market
            ],
        },
        'public': {
            # these endpoints are not documented
            # 'get': [
            #     'order_book',  # Get the order book of specified market
            #     'order_book/{market}',
            #     'trades',  # Get recent trades on market, each trade is included only once Trades are sorted in reverse creation order.
            #     'trades/{market}',
            #     'tickers',  # Get ticker of all markets
            #     'tickers/{market}',  # Get ticker of specific market
            # ],
            'get': [
                'currencies',
                'announcement/maintenance',  # System Maintenance Notice
                'time',
                'instruments',  # Retrieve all trading pairs information
                'market/orderbook',  # Order Book
                'futures/position/openInterest',  # Open Interest
                'market/tickers',  # Get the Last 24h Market Summary
                'market/candles',  # Get Current Candlestick
                'market/history/candles',  # Get Current Candlestick
                'market/trades',  # Get the Most Recent Trades
                'market/markPrice',  # Get Current Mark Price
                'futures/funding/predictedFunding/{symbol}',  # Get Predicted Funding Rate
                'futures/funding/prevFundingRate/{symbol}',  # Get Last Funding Rate
                'futures/funding/fundingRate',
                'market/candles/index',  # * Deprecated
                'market/index/candles',
            ],
        },
        'private': {
            'get': [
                'user/info',  # Retrieve user information
                'account/balances',  # Get Account Balances
                'account/deposit/address',  # undocumented
                'account/deposits',  # Get account deposits history
                'account/withdraws',  # Get account withdrawals history
                'spot/trades',  # Retrieve trades details for a spot order
                'spot/openOrders',  # Retrieve spot open orders
                'spot/orders',  # Retrieve historical spot orders
                'futures/position',  # Get positions for all contracts
                'futures/position/closed',  # Get closed positions
                'futures/trades',  # Retrieve trade details for a futures order
                'futures/openOrders',  # Retrieve futures open orders
                'futures/orders',  # Retrieve historical futures orders
                'futures/funding/fundingFee',
                'futures/funding/predictedFundingFee/{symbol}',  # Get predicted funding fee
            ],
            'post': [
                'account/transfer',  # Asset Transfer
                'spot/orders',  # Create a new spot order
                'spot/orders/cancelAllOnTimeout',  # Automatically cancel all your spot orders after a specified timeout.
                'futures/orders',  # Create a new futures order
                'futures/orders/cancelAllOnTimeout',  # Automatically cancel all your futures orders after a specified timeout.
                'futures/position/sltp',  # Set take profit and stop loss orders for an opening position
                'futures/position/close',  # Close position
                'futures/position/leverage',  # Update leverage for position
                'futures/position/margin',  # Modify Isolated Position Margin
            ],
            'put': [
                'spot/orders',  # Amend spot order
                'futures/orders',  # Amend the quantity of an open futures order
            ],
            'delete': [
                'spot/orders/cancel/{orderID}',  # Cancel a spot order
                'spot/orders/cancel/all',  # Batch cancel spot orders
                'futures/orders/cancel/{orderID}',  # Cancel a futures order
                'futures/orders/cancel/all',  # Batch cancel futures orders
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.0006'),
            'taker': self.parse_number('0.001'),
        },
        'funding': {
            'tierBased': False,
            'percentage': True,
            'withdraw': {},  # There is only 1% fee on withdrawals to your bank account.
        },
    },
    'commonCurrencies': {
        'XBT': 'XBT',
    },
    'exceptions': {
        'exact': {
            '2002': InsufficientFunds,
            '2003': OrderNotFound,
            '10003': BadRequest,  # Parameter validation error
            '10006': AuthenticationError,  # Session expired, please relogin
            '10007': AuthenticationError,  # Invalid authentication key or token
            '11007': AuthenticationError,  # Invalid key format
            '20001': InsufficientFunds,  # Insufficient balance. Please deposit to trade.
            '20009': InvalidOrder,  # Order amount must be positive
            '30000': OrderNotFound,  # {"code":30000,"data":null,"message":"The order does not exist","ts":1610259732263}
            '30001': InvalidOrder,  # The order is being submitted, please try again later
            '30004': InvalidOrder,  # Minimum quantity is {0}
            '30005': InvalidOrder,  # Quantity maximum precision is {0} decimal places
            '30006': InvalidOrder,  # Price maximum precision is {0} decimal places
            '30007': InvalidOrder,  # Minimum price is {0}
            '30008': InvalidOrder,  # Stop price maximum precision is {0} decimal places
            '30009': InvalidOrder,  # Stop Price cannot be less than {0}
            '30010': InvalidOrder,  # Market price cannot be empty
            '30011': CancelPending,  # The order is being cancelled, please wait.
            '30012': BadRequest,  # Unknown currency
            '30013': BadSymbol,  # Unknown symbol
            '30014': OrderNotFound,  # Futures order cannot be found
            '30015': InvalidOrder,  # This is not an open order and cannot modified
            '30016': ExchangeError,  # No position found
            '30017': InvalidOrder,  # The current close position is 0. It is recommended that you cancel the current order closing order.
            '30018': InvalidOrder,  # Order price cannot be greater than {0}
            '30019': InvalidOrder,  # Order quantity cannot be greater than {0}
            '30020': InvalidOrder,  # Order price must be a multiple of {0}
            '30021': InvalidOrder,  # Margin adjustement must be greater than 0
            '30022': InvalidOrder,  # New quantity must be greater than filled quantity
            '30023': InvalidOrder,  # Order failed, please try again
            '30024': InvalidOrder,  # TimeInForce error, only GTC or IOC are allowed
            '30025': InvalidOrder,  # TimeInForce error, only GTC is allowed
            '30026': InvalidOrder,  # Quantity is not a multiple of {0}
            '30027': InvalidOrder,  # Close position failed, it is recommended that you cancel the current order and then close the position.
            '30028': BadSymbol,  # Symbol cannot be traded at self time
            '30029': InvalidOrder,  # Modified quantity or price cannot be empty
            '30030': InvalidOrder,  # Price cannot be specified for market orders
            '30031': InvalidOrder,  # Liquidation orders cannot be modified
            '30032': InvalidOrder,  # Leverage cannot be greater than {0}
            '30033': InvalidOrder,  # Leverage cannot be smaller than {0}
            '30034': RateLimitExceeded,  # The max number of open orders is {0}. To place a new order, please cancel a previous one
            '30035': RateLimitExceeded,  # The max number of {0} open orders is {1}. To place a new order, please cancel a previous one
            '30036': ExchangeNotAvailable,  # Liquidation is in progress, please try again later
            '30037': InvalidOrder,  # Once stop limit order triggered, stop price cannot be amended
            '30038': ExchangeError,  # The total value of your orders has exceeded the current risk limit. Please adjust the risk limit
            '30039': InsufficientFunds,  # Your risk limit has now been changed to {0}, your maximum leverage less than 1, please readjust accordingly
            '30040': InvalidOrder,  # Order status has changed, please try again later
            '30041': InvalidOrder,  # Liquidation orders cannot be cancelled
            '30042': InvalidOrder,  # Order cannot be placed as you will be breaching you max limit value of {1} BTC for {0}
            '30043': InvalidOrder,  # The risk limit cannot be less than 0
            '30044': BadRequest,  # Timeout cannot be greater than 60 minutes
            '30045': InvalidOrder,  # Side is not valid, it should be BUY or SELL
            '30046': InvalidOrder,  # Order type is not valid, it should be MARKET or LIMIT or STOP-LIMIT or STOP
            '30047': InvalidOrder,  # The order is closed. Can't cancel
            '30048': InvalidOrder,  # Market orders cannot be modified
            '30049': InvalidOrder,  # The order is being modified, please wait
            '30050': InvalidOrder,  # Maximum 10 orders
            '40004': BadRequest,  # Requested resource doesn't exist
            '40009': RateLimitExceeded,  # Too many requests
            '40102': AuthenticationError,  # {"code":40102,"message":"Unauthorized(invalid key)"}
            '40103': AuthenticationError,  # {"code":40103,"message":"Unauthorized(invalid sign)"}
            '40303': PermissionDenied,  # {"code":40303,"message":"Forbidden(invalid scopes)"}
            '41001': BadRequest,  # Incorrect HTTP request
            '41002': BadRequest,  # Unsupported HTTP request method
            '42001': ExchangeNotAvailable,  # Duplicated data entry, please check and try again
            '50001': ExchangeError,  # Server side exception, please try again later
            '50002': ExchangeError,  # Server is busy, please try again later
        },
        'broad': {},
    },
    'precisionMode': TICK_SIZE,
    'options': {
        'defaultType': 'spot',  # 'spot', 'future'
        'types': {
            'spot': 'SPTP',
            'future': 'FUTP',
            'otc': 'F2CP',
            'saving': 'VLTP',
        },
        'accounts': {
            'SPTP': 'spot',
            'FUTP': 'future',
            'F2CP': 'otc',
            'VLTP': 'saving',
        },
        'networks': {
            'ETH': 'ERC20',
            'TRX': 'TRC20',
            'SOL': 'SPL',
        },
    },
},
{
    'id': 'ascendex',
    'name': 'AscendEX',
    'countries': ['SG'],  # Singapore
    'rateLimit': 500,
    'certified': True,
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but not fully inplemented
        'swap': True,
        'future': False,
        'option': False,
        'addMargin': True,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': True,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': True,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': True,
        'fetchMarketLeverageTiers': 'emulated',
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': False,
        'fetchPosition': False,
        'fetchPositions': True,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'reduceMargin': True,
        'setLeverage': True,
        'setMarginMode': True,
        'setPositionMode': False,
    },
    'timeframes': {
        '1m': '1',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '120',
        '4h': '240',
        '6h': '360',
        '12h': '720',
        '1d': '1d',
        '1w': '1w',
        '1M': '1m',
    },
    'version': 'v2',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/112027508-47984600-8b48-11eb-9e17-d26459cc36c6.jpg',
        'api': 'https://ascendex.com',
        'test': 'https://api-test.ascendex-sandbox.com',
        'www': 'https://ascendex.com',
        'doc': [
            'https://bitmax-exchange.github.io/bitmax-pro-api/#bitmax-pro-api-documentation',
        ],
        'fees': 'https://ascendex.com/en/feerate/transactionfee-traderate',
        'referral': {
            'url': 'https://ascendex.com/en-us/register?inviteCode=EL6BXBQM',
            'discount': 0.25,
        },
    },
    'api': {
        'v1': {
            'public': {
                'get': [
                    'assets',
                    'products',
                    'ticker',
                    'barhist/info',
                    'barhist',
                    'depth',
                    'trades',
                    'cash/assets',  # not documented
                    'cash/products',  # not documented
                    'margin/assets',  # not documented
                    'margin/products',  # not documented
                    'futures/collateral',
                    'futures/contracts',
                    'futures/ref-px',
                    'futures/market-data',
                    'futures/funding-rates',
                ],
            },
            'private': {
                'get': [
                    'info',
                    'wallet/transactions',
                    'wallet/deposit/address',  # not documented
                    'data/balance/snapshot',
                    'data/balance/history',
                ],
                'accountCategory': {
                    'get': [
                        'balance',
                        'order/open',
                        'order/status',
                        'order/hist/current',
                        'risk',
                    ],
                    'post': [
                        'order',
                        'order/batch',
                    ],
                    'delete': [
                        'order',
                        'order/all',
                        'order/batch',
                    ],
                },
                'accountGroup': {
                    'get': [
                        'cash/balance',
                        'margin/balance',
                        'margin/risk',
                        'transfer',
                        'futures/collateral-balance',
                        'futures/position',
                        'futures/risk',
                        'futures/funding-payments',
                        'order/hist',
                        'spot/fee',
                    ],
                    'post': [
                        'futures/transfer/deposit',
                        'futures/transfer/withdraw',
                    ],
                },
            },
        },
        'v2': {
            'public': {
                'get': [
                    'assets',
                    'futures/contract',
                    'futures/collateral',
                    'futures/pricing-data',
                ],
            },
            'private': {
                'get': [
                    'account/info',
                ],
                'accountGroup': {
                    'get': [
                        'order/hist',
                        'futures/position',
                        'futures/free-margin',
                        'futures/order/hist/current',
                        'futures/order/open',
                        'futures/order/status',
                    ],
                    'post': [
                        'futures/isolated-position-margin',
                        'futures/margin-type',
                        'futures/leverage',
                        'futures/transfer/deposit',
                        'futures/transfer/withdraw',
                        'futures/order',
                        'futures/order/batch',
                        'futures/order/open',
                        'subuser/subuser-transfer',
                        'subuser/subuser-transfer-hist',
                    ],
                    'delete': [
                        'futures/order',
                        'futures/order/batch',
                        'futures/order/all',
                    ],
                },
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.002'),
            'maker': self.parse_number('0.002'),
        },
    },
    'precisionMode': TICK_SIZE,
    'options': {
        'account-category': 'cash',  # 'cash', 'margin', 'futures'  # obsolete
        'account-group': None,
        'fetchClosedOrders': {
            'method': 'v1PrivateAccountGroupGetOrderHist',  # 'v1PrivateAccountGroupGetAccountCategoryOrderHistCurrent'
        },
        'defaultType': 'spot',  # 'spot', 'margin', 'swap'
        'accountCategories': {
            'spot': 'cash',
            'swap': 'futures',
            'margin': 'margin',
        },
    },
    'exceptions': {
        'exact': {
            # not documented
            '1900': BadRequest,  # {"code":1900,"message":"Invalid Http Request Input"}
            '2100': AuthenticationError,  # {"code":2100,"message":"ApiKeyFailure"}
            '5002': BadSymbol,  # {"code":5002,"message":"Invalid Symbol"}
            '6001': BadSymbol,  # {"code":6001,"message":"Trading is disabled on symbol."}
            '6010': InsufficientFunds,  # {'code': 6010, 'message': 'Not enough balance.'}
            '60060': InvalidOrder,  # {'code': 60060, 'message': 'The order is already filled or canceled.'}
            '600503': InvalidOrder,  # {"code":600503,"message":"Notional is too small."}
            # documented
            '100001': BadRequest,  # INVALID_HTTP_INPUT Http request is invalid
            '100002': BadRequest,  # DATA_NOT_AVAILABLE Some required data is missing
            '100003': BadRequest,  # KEY_CONFLICT The same key exists already
            '100004': BadRequest,  # INVALID_REQUEST_DATA The HTTP request contains invalid field or argument
            '100005': BadRequest,  # INVALID_WS_REQUEST_DATA Websocket request contains invalid field or argument
            '100006': BadRequest,  # INVALID_ARGUMENT The arugment is invalid
            '100007': BadRequest,  # ENCRYPTION_ERROR Something wrong with data encryption
            '100008': BadSymbol,  # SYMBOL_ERROR Symbol does not exist or not valid for the request
            '100009': AuthenticationError,  # AUTHORIZATION_NEEDED Authorization is require for the API access or request
            '100010': BadRequest,  # INVALID_OPERATION The action is invalid or not allowed for the account
            '100011': BadRequest,  # INVALID_TIMESTAMP Not a valid timestamp
            '100012': BadRequest,  # INVALID_STR_FORMAT String format does not
            '100013': BadRequest,  # INVALID_NUM_FORMAT Invalid number input
            '100101': ExchangeError,  # UNKNOWN_ERROR Some unknown error
            '150001': BadRequest,  # INVALID_JSON_FORMAT Require a valid json object
            '200001': AuthenticationError,  # AUTHENTICATION_FAILED Authorization failed
            '200002': ExchangeError,  # TOO_MANY_ATTEMPTS Tried and failed too many times
            '200003': ExchangeError,  # ACCOUNT_NOT_FOUND Account not exist
            '200004': ExchangeError,  # ACCOUNT_NOT_SETUP Account not setup properly
            '200005': ExchangeError,  # ACCOUNT_ALREADY_EXIST Account already exist
            '200006': ExchangeError,  # ACCOUNT_ERROR Some error related with error
            '200007': ExchangeError,  # CODE_NOT_FOUND
            '200008': ExchangeError,  # CODE_EXPIRED Code expired
            '200009': ExchangeError,  # CODE_MISMATCH Code does not match
            '200010': AuthenticationError,  # PASSWORD_ERROR Wrong assword
            '200011': ExchangeError,  # CODE_GEN_FAILED Do not generate required code promptly
            '200012': ExchangeError,  # FAKE_COKE_VERIFY
            '200013': ExchangeError,  # SECURITY_ALERT Provide security alert message
            '200014': PermissionDenied,  # RESTRICTED_ACCOUNT Account is restricted for certain activity, such as trading, or withdraw.
            '200015': PermissionDenied,  # PERMISSION_DENIED No enough permission for the operation
            '300001': InvalidOrder,  # INVALID_PRICE Order price is invalid
            '300002': InvalidOrder,  # INVALID_QTY Order size is invalid
            '300003': InvalidOrder,  # INVALID_SIDE Order side is invalid
            '300004': InvalidOrder,  # INVALID_NOTIONAL Notional is too small or too large
            '300005': InvalidOrder,  # INVALID_TYPE Order typs is invalid
            '300006': InvalidOrder,  # INVALID_ORDER_ID Order id is invalid
            '300007': InvalidOrder,  # INVALID_TIME_IN_FORCE Time In Force in order request is invalid
            '300008': InvalidOrder,  # INVALID_ORDER_PARAMETER Some order parameter is invalid
            '300009': InvalidOrder,  # TRADING_VIOLATION Trading violation on account or asset
            '300011': InsufficientFunds,  # INVALID_BALANCE No enough account or asset balance for the trading
            '300012': BadSymbol,  # INVALID_PRODUCT Not a valid product supported by exchange
            '300013': InvalidOrder,  # INVALID_BATCH_ORDER Some or all orders are invalid in batch order request
            '300014': InvalidOrder,  # {"code":300014,"message":"Order price doesn't conform to the required tick size: 0.1","reason":"TICK_SIZE_VIOLATION"}
            '300020': InvalidOrder,  # TRADING_RESTRICTED There is some trading restriction on account or asset
            '300021': InvalidOrder,  # TRADING_DISABLED Trading is disabled on account or asset
            '300031': InvalidOrder,  # NO_MARKET_PRICE No market price for market type order trading
            '310001': InsufficientFunds,  # INVALID_MARGIN_BALANCE No enough margin balance
            '310002': InvalidOrder,  # INVALID_MARGIN_ACCOUNT Not a valid account for margin trading
            '310003': InvalidOrder,  # MARGIN_TOO_RISKY Leverage is too high
            '310004': BadSymbol,  # INVALID_MARGIN_ASSET This asset does not support margin trading
            '310005': InvalidOrder,  # INVALID_REFERENCE_PRICE There is no valid reference price
            '510001': ExchangeError,  # SERVER_ERROR Something wrong with server.
            '900001': ExchangeError,  # HUMAN_CHALLENGE Human change do not pass
        },
        'broad': {},
    },
    'commonCurrencies': {
        'BOND': 'BONDED',
        'BTCBEAR': 'BEAR',
        'BTCBULL': 'BULL',
        'BYN': 'BeyondFi',
        'PLN': 'Pollen',
    },
},
{
    'id': 'zipmex',
    'name': 'Zipmex',
    'countries': ['AU', 'SG', 'TH', 'ID'],  # Australia, Singapore, Thailand, Indonesia
    'certified': False,
    'pro': True,
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/146103275-c39a34d9-68a4-4cd2-b1f1-c684548d311b.jpg',
        'test': None,
        'api': {
            'public': 'https://apws.zipmex.com:8443/AP',
            'private': 'https://apws.zipmex.com:8443/AP',
            # 'ws': 'wss://apws.zipmex.com/WSGateway'
        },
        'www': 'https://zipmex.com/',
        'referral': 'https://trade.zipmex.com/global/accounts/sign-up?aff=KLm7HyCsvN',
        'fees': 'https://zipmex.com/fee-schedule',
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.002'),
            'maker': self.parse_number('0.002'),
        },
    },
},
{
    'id': 'zonda',
    'name': 'Zonda',
    'countries': ['EE'],  # Estonia
    'rateLimit': 1000,
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLedger': True,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '60',
        '3m': '180',
        '5m': '300',
        '15m': '900',
        '30m': '1800',
        '1h': '3600',
        '2h': '7200',
        '4h': '14400',
        '6h': '21600',
        '12h': '43200',
        '1d': '86400',
        '3d': '259200',
        '1w': '604800',
    },
    'hostname': 'zonda.exchange',
    'urls': {
        'referral': 'https://auth.zondaglobal.com/ref/jHlbB4mIkdS1',
        'logo': 'https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg',
        'www': 'https://zondaglobal.com',
        'api': {
            'public': 'https://{hostname}/API/Public',
            'private': 'https://{hostname}/API/Trading/tradingApi.php',
            'v1_01Public': 'https://api.{hostname}/rest',
            'v1_01Private': 'https://api.{hostname}/rest',
        },
        'doc': [
            'https://docs.zonda.exchange/',
            'https://github.com/BitBayNet/API',
        ],
        'support': 'https://zondaglobal.com/en/helpdesk/zonda-exchange',
        'fees': 'https://zondaglobal.com/legal/zonda-exchange/fees',
    },
    'api': {
        'public': {
            'get': [
                '{id}/all',
                '{id}/market',
                '{id}/orderbook',
                '{id}/ticker',
                '{id}/trades',
            ],
        },
        'private': {
            'post': [
                'info',
                'trade',
                'cancel',
                'orderbook',
                'orders',
                'transfer',
                'withdraw',
                'history',
                'transactions',
            ],
        },
        'v1_01Public': {
            'get': [
                'trading/ticker',
                'trading/ticker/{symbol}',
                'trading/stats',
                'trading/stats/{symbol}',
                'trading/orderbook/{symbol}',
                'trading/transactions/{symbol}',
                'trading/candle/history/{symbol}/{resolution}',
            ],
        },
        'v1_01Private': {
            'get': [
                'payments/withdrawal/{detailId}',
                'payments/deposit/{detailId}',
                'trading/offer',
                'trading/config/{symbol}',
                'trading/history/transactions',
                'balances/BITBAY/history',
                'balances/BITBAY/balance',
                'fiat_cantor/rate/{baseId}/{quoteId}',
                'fiat_cantor/history',
            ],
            'post': [
                'trading/offer/{symbol}',
                'trading/config/{symbol}',
                'balances/BITBAY/balance',
                'balances/BITBAY/balance/transfer/{source}/{destination}',
                'fiat_cantor/exchange',
            ],
            'delete': [
                'trading/offer/{symbol}/{id}/{side}/{price}',
            ],
            'put': [
                'balances/BITBAY/balance/{id}',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.0'),
            'taker': self.parse_number('0.001'),
            'percentage': True,
            'tierBased': False,
        },
        'fiat': {
            'maker': 0.30 / 100,
            'taker': 0.43 / 100,
            'percentage': True,
            'tierBased': True,
            'tiers': {
                'taker': [
                    [0.0043, 0],
                    [0.0042, 1250],
                    [0.0041, 3750],
                    [0.0040, 7500],
                    [0.0039, 10000],
                    [0.0038, 15000],
                    [0.0037, 20000],
                    [0.0036, 25000],
                    [0.0035, 37500],
                    [0.0034, 50000],
                    [0.0033, 75000],
                    [0.0032, 100000],
                    [0.0031, 150000],
                    [0.0030, 200000],
                    [0.0029, 250000],
                    [0.0028, 375000],
                    [0.0027, 500000],
                    [0.0026, 625000],
                    [0.0025, 875000],
                ],
                'maker': [
                    [0.0030, 0],
                    [0.0029, 1250],
                    [0.0028, 3750],
                    [0.0028, 7500],
                    [0.0027, 10000],
                    [0.0026, 15000],
                    [0.0025, 20000],
                    [0.0025, 25000],
                    [0.0024, 37500],
                    [0.0023, 50000],
                    [0.0023, 75000],
                    [0.0022, 100000],
                    [0.0021, 150000],
                    [0.0021, 200000],
                    [0.0020, 250000],
                    [0.0019, 375000],
                    [0.0018, 500000],
                    [0.0018, 625000],
                    [0.0017, 875000],
                ],
            },
        },
        'funding': {
            'withdraw': {},
        },
    },
    'options': {
        'fiatCurrencies': ['EUR', 'USD', 'GBP', 'PLN'],
    },
    'exceptions': {
        '400': ExchangeError,  # At least one parameter wasn't set
        '401': InvalidOrder,  # Invalid order type
        '402': InvalidOrder,  # No orders with specified currencies
        '403': InvalidOrder,  # Invalid payment currency name
        '404': InvalidOrder,  # Error. Wrong transaction type
        '405': InvalidOrder,  # Order with self id doesn't exist
        '406': InsufficientFunds,  # No enough money or crypto
        # code 407 not specified are not specified in their docs
        '408': InvalidOrder,  # Invalid currency name
        '501': AuthenticationError,  # Invalid public key
        '502': AuthenticationError,  # Invalid sign
        '503': InvalidNonce,  # Invalid moment parameter. Request time doesn't match current server time
        '504': ExchangeError,  # Invalid method
        '505': AuthenticationError,  # Key has no permission for self action
        '506': AccountSuspended,  # Account locked. Please contact with customer service
        # codes 507 and 508 are not specified in their docs
        '509': ExchangeError,  # The BIC/SWIFT is required for self currency
        '510': BadSymbol,  # Invalid market name
        'FUNDS_NOT_SUFFICIENT': InsufficientFunds,
        'OFFER_FUNDS_NOT_EXCEEDING_MINIMUMS': InvalidOrder,
        'OFFER_NOT_FOUND': OrderNotFound,
        'OFFER_WOULD_HAVE_BEEN_PARTIALLY_FILLED': OrderImmediatelyFillable,
        'ACTION_LIMIT_EXCEEDED': RateLimitExceeded,
        'UNDER_MAINTENANCE': OnMaintenance,
        'REQUEST_TIMESTAMP_TOO_OLD': InvalidNonce,
        'PERMISSIONS_NOT_SUFFICIENT': PermissionDenied,
    },
    'commonCurrencies': {
        'GGC': 'Global Game Coin',
    },
},
{
    'id': 'phemex',
    'name': 'Phemex',
    'countries': ['CN'],  # China
    'rateLimit': 100,
    'version': 'v1',
    'certified': False,
    'pro': True,
    'hostname': 'api.phemex.com',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': None,  # has but not fully implemented
        'future': False,
        'option': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchIndexOHLCV': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPositions': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchWithdrawals': True,
        'setLeverage': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/85225056-221eb600-b3d7-11ea-930d-564d2690e3f6.jpg',
        'test': {
            'v1': 'https://testnet-api.phemex.com/v1',
            'public': 'https://testnet-api.phemex.com/exchange/public',
            'private': 'https://testnet-api.phemex.com',
        },
        'api': {
            'v1': 'https://{hostname}/v1',
            'public': 'https://{hostname}/exchange/public',
            'private': 'https://{hostname}',
        },
        'www': 'https://phemex.com',
        'doc': 'https://github.com/phemex/phemex-api-docs',
        'fees': 'https://phemex.com/fees-conditions',
        'referral': {
            'url': 'https://phemex.com/register?referralCode=EDNVJ',
            'discount': 0.1,
        },
    },
    'timeframes': {
        '1m': '60',
        '3m': '180',
        '5m': '300',
        '15m': '900',
        '30m': '1800',
        '1h': '3600',
        '2h': '7200',
        '3h': '10800',
        '4h': '14400',
        '6h': '21600',
        '12h': '43200',
        '1d': '86400',
        '1w': '604800',
        '1M': '2592000',
    },
    'api': {
        'public': {
            'get': [
                'cfg/v2/products',  # spot + contracts
                'products',  # contracts only
                'nomics/trades',  # ?market=<symbol>&since=<since>
                'md/kline',  # ?from=1589811875&resolution=1800&symbol=sBTCUSDT&to=1592457935
            ],
        },
        'v1': {
            'get': [
                'md/orderbook',  # ?symbol=<symbol>&id=<id>
                'md/trade',  # ?symbol=<symbol>&id=<id>
                'md/ticker/24hr',  # ?symbol=<symbol>&id=<id>
                'md/ticker/24hr/all',  # ?id=<id>
                'md/spot/ticker/24hr',  # ?symbol=<symbol>&id=<id>
                'md/spot/ticker/24hr/all',  # ?symbol=<symbol>&id=<id>
                'exchange/public/products',  # contracts only
            ],
        },
        'private': {
            'get': [
                # spot
                'spot/orders/active',  # ?symbol=<symbol>&orderID=<orderID>
                # 'spot/orders/active',  # ?symbol=<symbol>&clOrDID=<clOrdID>
                'spot/orders',  # ?symbol=<symbol>
                'spot/wallets',  # ?currency=<currency>
                'exchange/spot/order',  # ?symbol=<symbol>&ordStatus=<ordStatus1,orderStatus2>ordType=<ordType1,orderType2>&start=<start>&end=<end>&limit=<limit>&offset=<offset>
                'exchange/spot/order/trades',  # ?symbol=<symbol>&start=<start>&end=<end>&limit=<limit>&offset=<offset>
                # swap
                'accounts/accountPositions',  # ?currency=<currency>
                'accounts/positions',  # ?currency=<currency>
                'orders/activeList',  # ?symbol=<symbol>
                'exchange/order/list',  # ?symbol=<symbol>&start=<start>&end=<end>&offset=<offset>&limit=<limit>&ordStatus=<ordStatus>&withCount=<withCount>
                'exchange/order',  # ?symbol=<symbol>&orderID=<orderID1,orderID2>
                # 'exchange/order',  # ?symbol=<symbol>&clOrdID=<clOrdID1,clOrdID2>
                'exchange/order/trade',  # ?symbol=<symbol>&start=<start>&end=<end>&limit=<limit>&offset=<offset>&withCount=<withCount>
                'phemex-user/users/children',  # ?offset=<offset>&limit=<limit>&withCount=<withCount>
                'phemex-user/wallets/v2/depositAddress',  # ?_t=1592722635531&currency=USDT
                'phemex-user/wallets/tradeAccountDetail',  # ?bizCode=&currency=&end=1642443347321&limit=10&offset=0&side=&start=1&type=4&withCount=true
                'phemex-user/order/closedPositionList',  # ?currency=USD&limit=10&offset=0&symbol=&withCount=true
                'exchange/margins/transfer',  # ?start=<start>&end=<end>&offset=<offset>&limit=<limit>&withCount=<withCount>
                'exchange/wallets/confirm/withdraw',  # ?code=<withdrawConfirmCode>
                'exchange/wallets/withdrawList',  # ?currency=<currency>&limit=<limit>&offset=<offset>&withCount=<withCount>
                'exchange/wallets/depositList',  # ?currency=<currency>&offset=<offset>&limit=<limit>
                'exchange/wallets/v2/depositAddress',  # ?currency=<currency>
                'api-data/spots/funds',  # ?currency=<currency>&start=<start>&end=<end>&limit=<limit>&offset=<offset>
                'assets/convert',  # ?startTime=<startTime>&endTime=<endTime>&limit=<limit>&offset=<offset>
                'assets/transfer',  # ?currency=<currency>&start=<start>&end=<end>&limit=<limit>&offset=<offset>
                # transfer
                'assets/transfer',
                'assets/spots/sub-accounts/transfer',
                'assets/spots/sub-accounts/transfer',
                'assets/quote',
                'assets/convert',
            ],
            'post': [
                # spot
                'spot/orders',
                # swap
                'orders',
                'positions/assign',  # ?symbol=<symbol>&posBalance=<posBalance>&posBalanceEv=<posBalanceEv>
                'exchange/wallets/transferOut',
                'exchange/wallets/transferIn',
                'exchange/margins',
                'exchange/wallets/createWithdraw',  # ?otpCode=<otpCode>
                'exchange/wallets/cancelWithdraw',
                'exchange/wallets/createWithdrawAddress',  # ?otpCode={optCode}
                # transfer
                'assets/transfer',
                'assets/spots/sub-accounts/transfer',  # for sub-account only
                'assets/futures/sub-accounts/transfer',  # for sub-account only
                'assets/universal-transfer',  # for Main account only
                'assets/convert',
            ],
            'put': [
                # spot
                'spot/orders',  # ?symbol=<symbol>&orderID=<orderID>&origClOrdID=<origClOrdID>&clOrdID=<clOrdID>&priceEp=<priceEp>&baseQtyEV=<baseQtyEV>&quoteQtyEv=<quoteQtyEv>&stopPxEp=<stopPxEp>
                # swap
                'orders/replace',  # ?symbol=<symbol>&orderID=<orderID>&origClOrdID=<origClOrdID>&clOrdID=<clOrdID>&price=<price>&priceEp=<priceEp>&orderQty=<orderQty>&stopPx=<stopPx>&stopPxEp=<stopPxEp>&takeProfit=<takeProfit>&takeProfitEp=<takeProfitEp>&stopLoss=<stopLoss>&stopLossEp=<stopLossEp>&pegOffsetValueEp=<pegOffsetValueEp>&pegPriceType=<pegPriceType>
                'positions/leverage',  # ?symbol=<symbol>&leverage=<leverage>&leverageEr=<leverageEr>
                'positions/riskLimit',  # ?symbol=<symbol>&riskLimit=<riskLimit>&riskLimitEv=<riskLimitEv>
            ],
            'delete': [
                # spot
                'spot/orders',  # ?symbol=<symbol>&orderID=<orderID>
                'spot/orders/all',  # ?symbol=<symbol>&untriggered=<untriggered>
                # 'spot/orders',  # ?symbol=<symbol>&clOrdID=<clOrdID>
                # swap
                'orders/cancel',  # ?symbol=<symbol>&orderID=<orderID>
                'orders',  # ?symbol=<symbol>&orderID=<orderID1>,<orderID2>,<orderID3>
                'orders/all',  # ?symbol=<symbol>&untriggered=<untriggered>&text=<text>
            ],
        },
    },
    'precisionMode': TICK_SIZE,
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.001'),
            'maker': self.parse_number('0.001'),
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'exceptions': {
        'exact': {
            # not documented
            '412': BadRequest,  # {"code":412,"msg":"Missing parameter - resolution","data":null}
            '6001': BadRequest,  # {"error":{"code":6001,"message":"invalid argument"},"id":null,"result":null}
            # documented
            '19999': BadRequest,  # REQUEST_IS_DUPLICATED Duplicated request ID
            '10001': DuplicateOrderId,  # OM_DUPLICATE_ORDERID Duplicated order ID
            '10002': OrderNotFound,  # OM_ORDER_NOT_FOUND Cannot find order ID
            '10003': CancelPending,  # OM_ORDER_PENDING_CANCEL Cannot cancel while order is already in pending cancel status
            '10004': CancelPending,  # OM_ORDER_PENDING_REPLACE Cannot cancel while order is already in pending cancel status
            '10005': CancelPending,  # OM_ORDER_PENDING Cannot cancel while order is already in pending cancel status
            '11001': InsufficientFunds,  # TE_NO_ENOUGH_AVAILABLE_BALANCE Insufficient available balance
            '11002': InvalidOrder,  # TE_INVALID_RISK_LIMIT Invalid risk limit value
            '11003': InsufficientFunds,  # TE_NO_ENOUGH_BALANCE_FOR_NEW_RISK_LIMIT Insufficient available balance
            '11004': InvalidOrder,  # TE_INVALID_LEVERAGE invalid input or new leverage is over maximum allowed leverage
            '11005': InsufficientFunds,  # TE_NO_ENOUGH_BALANCE_FOR_NEW_LEVERAGE Insufficient available balance
            '11006': ExchangeError,  # TE_CANNOT_CHANGE_POSITION_MARGIN_WITHOUT_POSITION Position size is zero. Cannot change margin
            '11007': ExchangeError,  # TE_CANNOT_CHANGE_POSITION_MARGIN_FOR_CROSS_MARGIN Cannot change margin under CrossMargin
            '11008': ExchangeError,  # TE_CANNOT_REMOVE_POSITION_MARGIN_MORE_THAN_ADDED exceeds the maximum removable Margin
            '11009': ExchangeError,  # TE_CANNOT_REMOVE_POSITION_MARGIN_DUE_TO_UNREALIZED_PNL exceeds the maximum removable Margin
            '11010': InsufficientFunds,  # TE_CANNOT_ADD_POSITION_MARGIN_DUE_TO_NO_ENOUGH_AVAILABLE_BALANCE Insufficient available balance
            '11011': InvalidOrder,  # TE_REDUCE_ONLY_ABORT Cannot accept reduce only order
            '11012': InvalidOrder,  # TE_REPLACE_TO_INVALID_QTY Order quantity Error
            '11013': InvalidOrder,  # TE_CONDITIONAL_NO_POSITION Position size is zero. Cannot determine conditional order's quantity
            '11014': InvalidOrder,  # TE_CONDITIONAL_CLOSE_POSITION_WRONG_SIDE Close position conditional order has the same side
            '11015': InvalidOrder,  # TE_CONDITIONAL_TRIGGERED_OR_CANCELED
            '11016': BadRequest,  # TE_ADL_NOT_TRADING_REQUESTED_ACCOUNT Request is routed to the wrong trading engine
            '11017': ExchangeError,  # TE_ADL_CANNOT_FIND_POSITION Cannot find requested position on current account
            '11018': ExchangeError,  # TE_NO_NEED_TO_SETTLE_FUNDING The current account does not need to pay a funding fee
            '11019': ExchangeError,  # TE_FUNDING_ALREADY_SETTLED The current account already pays the funding fee
            '11020': ExchangeError,  # TE_CANNOT_TRANSFER_OUT_DUE_TO_BONUS Withdraw to wallet needs to remove all remaining bonus. However if bonus is used by position or order cost, withdraw fails.
            '11021': ExchangeError,  # TE_INVALID_BONOUS_AMOUNT  # Grpc command cannot be negative number Invalid bonus amount
            '11022': AccountSuspended,  # TE_REJECT_DUE_TO_BANNED Account is banned
            '11023': ExchangeError,  # TE_REJECT_DUE_TO_IN_PROCESS_OF_LIQ Account is in the process of liquidation
            '11024': ExchangeError,  # TE_REJECT_DUE_TO_IN_PROCESS_OF_ADL Account is in the process of auto-deleverage
            '11025': BadRequest,  # TE_ROUTE_ERROR Request is routed to the wrong trading engine
            '11026': ExchangeError,  # TE_UID_ACCOUNT_MISMATCH
            '11027': BadSymbol,  # TE_SYMBOL_INVALID Invalid number ID or name
            '11028': BadSymbol,  # TE_CURRENCY_INVALID Invalid currency ID or name
            '11029': ExchangeError,  # TE_ACTION_INVALID Unrecognized request type
            '11030': ExchangeError,  # TE_ACTION_BY_INVALID
            '11031': DDoSProtection,  # TE_SO_NUM_EXCEEDS Number of total conditional orders exceeds the max limit
            '11032': DDoSProtection,  # TE_AO_NUM_EXCEEDS Number of total active orders exceeds the max limit
            '11033': DuplicateOrderId,  # TE_ORDER_ID_DUPLICATE Duplicated order ID
            '11034': InvalidOrder,  # TE_SIDE_INVALID Invalid side
            '11035': InvalidOrder,  # TE_ORD_TYPE_INVALID Invalid OrderType
            '11036': InvalidOrder,  # TE_TIME_IN_FORCE_INVALID Invalid TimeInForce
            '11037': InvalidOrder,  # TE_EXEC_INST_INVALID Invalid ExecType
            '11038': InvalidOrder,  # TE_TRIGGER_INVALID Invalid trigger type
            '11039': InvalidOrder,  # TE_STOP_DIRECTION_INVALID Invalid stop direction type
            '11040': InvalidOrder,  # TE_NO_MARK_PRICE Cannot get valid mark price to create conditional order
            '11041': InvalidOrder,  # TE_NO_INDEX_PRICE Cannot get valid index price to create conditional order
            '11042': InvalidOrder,  # TE_NO_LAST_PRICE Cannot get valid last market price to create conditional order
            '11043': InvalidOrder,  # TE_RISING_TRIGGER_DIRECTLY Conditional order would be triggered immediately
            '11044': InvalidOrder,  # TE_FALLING_TRIGGER_DIRECTLY Conditional order would be triggered immediately
            '11045': InvalidOrder,  # TE_TRIGGER_PRICE_TOO_LARGE Conditional order trigger price is too high
            '11046': InvalidOrder,  # TE_TRIGGER_PRICE_TOO_SMALL Conditional order trigger price is too low
            '11047': InvalidOrder,  # TE_BUY_TP_SHOULD_GT_BASE TakeProfile BUY conditional order trigger price needs to be greater than reference price
            '11048': InvalidOrder,  # TE_BUY_SL_SHOULD_LT_BASE StopLoss BUY condition order price needs to be less than the reference price
            '11049': InvalidOrder,  # TE_BUY_SL_SHOULD_GT_LIQ StopLoss BUY condition order price needs to be greater than liquidation price or it will not trigger
            '11050': InvalidOrder,  # TE_SELL_TP_SHOULD_LT_BASE TakeProfile SELL conditional order trigger price needs to be less than reference price
            '11051': InvalidOrder,  # TE_SELL_SL_SHOULD_LT_LIQ StopLoss SELL condition order price needs to be less than liquidation price or it will not trigger
            '11052': InvalidOrder,  # TE_SELL_SL_SHOULD_GT_BASE StopLoss SELL condition order price needs to be greater than the reference price
            '11053': InvalidOrder,  # TE_PRICE_TOO_LARGE
            '11054': InvalidOrder,  # TE_PRICE_WORSE_THAN_BANKRUPT Order price cannot be more aggressive than bankrupt price if self order has instruction to close a position
            '11055': InvalidOrder,  # TE_PRICE_TOO_SMALL Order price is too low
            '11056': InvalidOrder,  # TE_QTY_TOO_LARGE Order quantity is too large
            '11057': InvalidOrder,  # TE_QTY_NOT_MATCH_REDUCE_ONLY Does not allow ReduceOnly order without position
            '11058': InvalidOrder,  # TE_QTY_TOO_SMALL Order quantity is too small
            '11059': InvalidOrder,  # TE_TP_SL_QTY_NOT_MATCH_POS Position size is zero. Cannot accept any TakeProfit or StopLoss order
            '11060': InvalidOrder,  # TE_SIDE_NOT_CLOSE_POS TakeProfit or StopLoss order has wrong side. Cannot close position
            '11061': CancelPending,  # TE_ORD_ALREADY_PENDING_CANCEL Repeated cancel request
            '11062': InvalidOrder,  # TE_ORD_ALREADY_CANCELED Order is already canceled
            '11063': InvalidOrder,  # TE_ORD_STATUS_CANNOT_CANCEL Order is not able to be canceled under current status
            '11064': InvalidOrder,  # TE_ORD_ALREADY_PENDING_REPLACE Replace request is rejected because order is already in pending replace status
            '11065': InvalidOrder,  # TE_ORD_REPLACE_NOT_MODIFIED Replace request does not modify any parameters of the order
            '11066': InvalidOrder,  # TE_ORD_STATUS_CANNOT_REPLACE Order is not able to be replaced under current status
            '11067': InvalidOrder,  # TE_CANNOT_REPLACE_PRICE Market conditional order cannot change price
            '11068': InvalidOrder,  # TE_CANNOT_REPLACE_QTY Condtional order for closing position cannot change order quantity, since the order quantity is determined by position size already
            '11069': ExchangeError,  # TE_ACCOUNT_NOT_IN_RANGE The account ID in the request is not valid or is not in the range of the current process
            '11070': BadSymbol,  # TE_SYMBOL_NOT_IN_RANGE The symbol is invalid
            '11071': InvalidOrder,  # TE_ORD_STATUS_CANNOT_TRIGGER
            '11072': InvalidOrder,  # TE_TKFR_NOT_IN_RANGE The fee value is not valid
            '11073': InvalidOrder,  # TE_MKFR_NOT_IN_RANGE The fee value is not valid
            '11074': InvalidOrder,  # TE_CANNOT_ATTACH_TP_SL Order request cannot contain TP/SL parameters when the account already has positions
            '11075': InvalidOrder,  # TE_TP_TOO_LARGE TakeProfit price is too large
            '11076': InvalidOrder,  # TE_TP_TOO_SMALL TakeProfit price is too small
            '11077': InvalidOrder,  # TE_TP_TRIGGER_INVALID Invalid trigger type
            '11078': InvalidOrder,  # TE_SL_TOO_LARGE StopLoss price is too large
            '11079': InvalidOrder,  # TE_SL_TOO_SMALL StopLoss price is too small
            '11080': InvalidOrder,  # TE_SL_TRIGGER_INVALID Invalid trigger type
            '11081': InvalidOrder,  # TE_RISK_LIMIT_EXCEEDS Total potential position breaches current risk limit
            '11082': InsufficientFunds,  # TE_CANNOT_COVER_ESTIMATE_ORDER_LOSS The remaining balance cannot cover the potential unrealized PnL for self new order
            '11083': InvalidOrder,  # TE_TAKE_PROFIT_ORDER_DUPLICATED TakeProfit order already exists
            '11084': InvalidOrder,  # TE_STOP_LOSS_ORDER_DUPLICATED StopLoss order already exists
            '11085': DuplicateOrderId,  # TE_CL_ORD_ID_DUPLICATE ClOrdId is duplicated
            '11086': InvalidOrder,  # TE_PEG_PRICE_TYPE_INVALID PegPriceType is invalid
            '11087': InvalidOrder,  # TE_BUY_TS_SHOULD_LT_BASE The trailing order's StopPrice should be less than the current last price
            '11088': InvalidOrder,  # TE_BUY_TS_SHOULD_GT_LIQ The traling order's StopPrice should be greater than the current liquidation price
            '11089': InvalidOrder,  # TE_SELL_TS_SHOULD_LT_LIQ The traling order's StopPrice should be greater than the current last price
            '11090': InvalidOrder,  # TE_SELL_TS_SHOULD_GT_BASE The traling order's StopPrice should be less than the current liquidation price
            '11091': InvalidOrder,  # TE_BUY_REVERT_VALUE_SHOULD_LT_ZERO The PegOffset should be less than zero
            '11092': InvalidOrder,  # TE_SELL_REVERT_VALUE_SHOULD_GT_ZERO The PegOffset should be greater than zero
            '11093': InvalidOrder,  # TE_BUY_TTP_SHOULD_ACTIVATE_ABOVE_BASE The activation price should be greater than the current last price
            '11094': InvalidOrder,  # TE_SELL_TTP_SHOULD_ACTIVATE_BELOW_BASE The activation price should be less than the current last price
            '11095': InvalidOrder,  # TE_TRAILING_ORDER_DUPLICATED A trailing order exists already
            '11096': InvalidOrder,  # TE_CLOSE_ORDER_CANNOT_ATTACH_TP_SL An order to close position cannot have trailing instruction
            '11097': BadRequest,  # TE_CANNOT_FIND_WALLET_OF_THIS_CURRENCY This crypto is not supported
            '11098': BadRequest,  # TE_WALLET_INVALID_ACTION Invalid action on wallet
            '11099': ExchangeError,  # TE_WALLET_VID_UNMATCHED Wallet operation request has a wrong wallet vid
            '11100': InsufficientFunds,  # TE_WALLET_INSUFFICIENT_BALANCE Wallet has insufficient balance
            '11101': InsufficientFunds,  # TE_WALLET_INSUFFICIENT_LOCKED_BALANCE Locked balance in wallet is not enough for unlock/withdraw request
            '11102': BadRequest,  # TE_WALLET_INVALID_DEPOSIT_AMOUNT Deposit amount must be greater than zero
            '11103': BadRequest,  # TE_WALLET_INVALID_WITHDRAW_AMOUNT Withdraw amount must be less than zero
            '11104': BadRequest,  # TE_WALLET_REACHED_MAX_AMOUNT Deposit makes wallet exceed max amount allowed
            '11105': InsufficientFunds,  # TE_PLACE_ORDER_INSUFFICIENT_BASE_BALANCE Insufficient funds in base wallet
            '11106': InsufficientFunds,  # TE_PLACE_ORDER_INSUFFICIENT_QUOTE_BALANCE Insufficient funds in quote wallet
            '11107': ExchangeError,  # TE_CANNOT_CONNECT_TO_REQUEST_SEQ TradingEngine failed to connect with CrossEngine
            '11108': InvalidOrder,  # TE_CANNOT_REPLACE_OR_CANCEL_MARKET_ORDER Cannot replace/amend market order
            '11109': InvalidOrder,  # TE_CANNOT_REPLACE_OR_CANCEL_IOC_ORDER Cannot replace/amend ImmediateOrCancel order
            '11110': InvalidOrder,  # TE_CANNOT_REPLACE_OR_CANCEL_FOK_ORDER Cannot replace/amend FillOrKill order
            '11111': InvalidOrder,  # TE_MISSING_ORDER_ID OrderId is missing
            '11112': InvalidOrder,  # TE_QTY_TYPE_INVALID QtyType is invalid
            '11113': BadRequest,  # TE_USER_ID_INVALID UserId is invalid
            '11114': InvalidOrder,  # TE_ORDER_VALUE_TOO_LARGE Order value is too large
            '11115': InvalidOrder,  # TE_ORDER_VALUE_TOO_SMALL Order value is too small
            # not documented
            '30000': BadRequest,  # {"code":30000,"msg":"Please double check input arguments","data":null}
            '30018': BadRequest,  # {"code":30018,"msg":"phemex.data.size.uplimt","data":null}
            '34003': PermissionDenied,  # {"code":34003,"msg":"Access forbidden","data":null}
            '35104': InsufficientFunds,  # {"code":35104,"msg":"phemex.spot.wallet.balance.notenough","data":null}
            '39995': RateLimitExceeded,  # {"code": "39995","msg": "Too many requests."}
            '39996': PermissionDenied,  # {"code": "39996","msg": "Access denied."}
        },
        'broad': {
            '401 Insufficient privilege': PermissionDenied,  # {"code": "401","msg": "401 Insufficient privilege."}
            '401 Request IP mismatch': PermissionDenied,  # {"code": "401","msg": "401 Request IP mismatch."}
            'Failed to find api-key': AuthenticationError,  # {"msg":"Failed to find api-key 1c5ec63fd-660d-43ea-847a-0d3ba69e106e","code":10500}
            'Missing required parameter': BadRequest,  # {"msg":"Missing required parameter","code":10500}
            'API Signature verification failed': AuthenticationError,  # {"msg":"API Signature verification failed.","code":10500}
        },
    },
    'options': {
        'x-phemex-request-expiry': 60,  # in seconds
        'createOrderByQuoteRequiresPrice': True,
        'networks': {
            'TRC20': 'TRX',
            'ERC20': 'ETH',
        },
        'defaultNetworks': {
            'USDT': 'ETH',
        },
        'defaultSubType': 'linear',
    },
},
{
    'id': 'okex5',
    'alias': True,
},
{
    'id': 'kraken',
    'name': 'Kraken',
    'countries': ['US'],
    'version': '0',
    'rateLimit': 3000,
    'certified': False,
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': True,
        'swap': False,
        'future': False,
        'option': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLedger': True,
        'fetchLedgerEntry': True,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderTrades': 'emulated',
        'fetchPositions': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': False,
        'fetchWithdrawals': True,
        'setLeverage': False,
        'setMarginMode': False,  # Kraken only supports cross margin
        'withdraw': True,
    },
    'marketsByAltname': {},
    'timeframes': {
        '1m': 1,
        '5m': 5,
        '15m': 15,
        '30m': 30,
        '1h': 60,
        '4h': 240,
        '1d': 1440,
        '1w': 10080,
        '2w': 21600,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/76173629-fc67fb00-61b1-11ea-84fe-f2de582f58a3.jpg',
        'api': {
            'public': 'https://api.kraken.com',
            'private': 'https://api.kraken.com',
            'zendesk': 'https://kraken.zendesk.com/api/v2/help_center/en-us/articles',  # use the public zendesk api to receive article bodies and bypass new anti-spam protections
        },
        'www': 'https://www.kraken.com',
        'doc': 'https://www.kraken.com/features/api',
        'fees': 'https://www.kraken.com/en-us/features/fee-schedule',
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': 0.26 / 100,
            'maker': 0.16 / 100,
            'tiers': {
                'taker': [
                    [0, 0.0026],
                    [50000, 0.0024],
                    [100000, 0.0022],
                    [250000, 0.0020],
                    [500000, 0.0018],
                    [1000000, 0.0016],
                    [2500000, 0.0014],
                    [5000000, 0.0012],
                    [10000000, 0.0001],
                ],
                'maker': [
                    [0, 0.0016],
                    [50000, 0.0014],
                    [100000, 0.0012],
                    [250000, 0.0010],
                    [500000, 0.0008],
                    [1000000, 0.0006],
                    [2500000, 0.0004],
                    [5000000, 0.0002],
                    [10000000, 0.0],
                ],
            },
        },
    },
    'handleContentTypeApplicationZip': True,
    'api': {
        'zendesk': {
            'get': [
                # we should really refrain from putting fixed fee numbers and stop hardcoding
                # we will be using their web APIs to scrape all numbers from these articles
                '360000292886',  # -What-are-the-deposit-fees-
                '201893608',  # -What-are-the-withdrawal-fees-
            ],
        },
        'public': {
            'get': [
                'Assets',
                'AssetPairs',
                'Depth',
                'OHLC',
                'Spread',
                'Ticker',
                'Time',
                'Trades',
            ],
        },
        'private': {
            'post': {
                'AddOrder': 0,
                'AddExport': 1,
                'Balance': 1,
                'CancelAll': 1,
                'CancelOrder': 0,
                'ClosedOrders': 2,
                'DepositAddresses': 1,
                'DepositMethods': 1,
                'DepositStatus': 1,
                'ExportStatus': 1,
                'GetWebSocketsToken': 1,
                'Ledgers': 2,
                'OpenOrders': 1,
                'OpenPositions': 1,
                'QueryLedgers': 1,
                'QueryOrders': 1,
                'QueryTrades': 1,
                'RetrieveExport': 1,
                'RemoveExport': 1,
                'TradeBalance': 1,
                'TradesHistory': 2,
                'TradeVolume': 1,
                'Withdraw': 1,
                'WithdrawCancel': 1,
                'WithdrawInfo': 1,
                'WithdrawStatus': 1,
                # staking
                'Stake': 1,
                'Unstake': 1,
                'Staking/Assets': 1,
                'Staking/Pending': 1,
                'Staking/Transactions': 1,
            },
        },
    },
    'commonCurrencies': {
        'XBT': 'BTC',
        'XBT.M': 'BTC.M',  # https://support.kraken.com/hc/en-us/articles/360039879471-What-is-Asset-S-and-Asset-M-
        'XDG': 'DOGE',
        'REPV2': 'REP',
        'REP': 'REPV1',
    },
    'options': {
        'delistedMarketsById': {},
        # cannot withdraw/deposit these
        'inactiveCurrencies': ['CAD', 'USD', 'JPY', 'GBP'],
        'networks': {
            'ETH': 'ERC20',
            'TRX': 'TRC20',
        },
        'depositMethods': {
            '1INCH': '1inch(1INCH)',
            'AAVE': 'Aave',
            'ADA': 'ADA',
            'ALGO': 'Algorand',
            'ANKR': 'ANKR(ANKR)',
            'ANT': 'Aragon(ANT)',
            'ATOM': 'Cosmos',
            'AXS': 'Axie Infinity Shards(AXS)',
            'BADGER': 'Bager DAO(BADGER)',
            'BAL': 'Balancer(BAL)',
            'BAND': 'Band Protocol(BAND)',
            'BAT': 'BAT',
            'BCH': 'Bitcoin Cash',
            'BNC': 'Bifrost(BNC)',
            'BNT': 'Bancor(BNT)',
            'BTC': 'Bitcoin',
            'CHZ': 'Chiliz(CHZ)',
            'COMP': 'Compound(COMP)',
            'CQT': '\tCovalent Query Token(CQT)',
            'CRV': 'Curve DAO Token(CRV)',
            'CTSI': 'Cartesi(CTSI)',
            'DAI': 'Dai',
            'DASH': 'Dash',
            'DOGE': 'Dogecoin',
            'DOT': 'Polkadot',
            'DYDX': 'dYdX(DYDX)',
            'ENJ': 'Enjin Coin(ENJ)',
            'EOS': 'EOS',
            'ETC': 'Ether Classic(Hex)',
            'ETH': 'Ether(Hex)',
            'EWT': 'Energy Web Token',
            'FEE': 'Kraken Fee Credit',
            'FIL': 'Filecoin',
            'FLOW': 'Flow',
            'GHST': 'Aavegotchi(GHST)',
            'GNO': 'GNO',
            'GRT': 'GRT',
            'ICX': 'Icon',
            'INJ': 'Injective Protocol(INJ)',
            'KAR': 'Karura(KAR)',
            'KAVA': 'Kava',
            'KEEP': 'Keep Token(KEEP)',
            'KNC': 'Kyber Network(KNC)',
            'KSM': 'Kusama',
            'LINK': 'Link',
            'LPT': 'Livepeer Token(LPT)',
            'LRC': 'Loopring(LRC)',
            'LSK': 'Lisk',
            'LTC': 'Litecoin',
            'MANA': 'MANA',
            'MATIC': 'Polygon(MATIC)',
            'MINA': 'Mina',  # inspected from webui
            'MIR': 'Mirror Protocol(MIR)',
            'MKR': 'Maker(MKR)',
            'MLN': 'MLN',
            'MOVR': 'Moonriver(MOVR)',
            'NANO': 'NANO',
            'OCEAN': 'OCEAN',
            'OGN': 'Origin Protocol(OGN)',
            'OMG': 'OMG',
            'OXT': 'Orchid(OXT)',
            'OXY': 'Oxygen(OXY)',
            'PAXG': 'PAX(Gold)',
            'PERP': 'Perpetual Protocol(PERP)',
            'PHA': 'Phala(PHA)',
            'QTUM': 'QTUM',
            'RARI': 'Rarible(RARI)',
            'RAY': 'Raydium(RAY)',
            'REN': 'Ren Protocol(REN)',
            'REP': 'REPv2',
            'REPV1': 'REP',
            'SAND': 'The Sandbox(SAND)',
            'SC': 'Siacoin',
            'SDN': 'Shiden(SDN)',
            'SOL': 'Solana',  # their deposit method api doesn't work for SOL - was guessed
            'SNX': 'Synthetix  Network(SNX)',
            'SRM': 'Serum',  # inspected from webui
            'STORJ': 'Storj(STORJ)',
            'SUSHI': 'Sushiswap(SUSHI)',
            'TBTC': 'tBTC',
            'TRX': 'Tron',
            'UNI': 'UNI',
            'USDC': 'USDC',
            'USDT': 'Tether USD(ERC20)',
            'USDT-TRC20': 'Tether USD(TRC20)',
            'WAVES': 'Waves',
            'WBTC': 'Wrapped Bitcoin(WBTC)',
            'XLM': 'Stellar XLM',
            'XMR': 'Monero',
            'XRP': 'Ripple XRP',
            'XTZ': 'XTZ',
            'YFI': 'YFI',
            'ZEC': 'Zcash(Transparent)',
            'ZRX': '0x(ZRX)',
        },
    },
    'exceptions': {
        'EQuery:Invalid asset pair': BadSymbol,  # {"error":["EQuery:Invalid asset pair"]}
        'EAPI:Invalid key': AuthenticationError,
        'EFunding:Unknown withdraw key': InvalidAddress,  # {"error":["EFunding:Unknown withdraw key"]}
        'EFunding:Invalid amount': InsufficientFunds,
        'EService:Unavailable': ExchangeNotAvailable,
        'EDatabase:Internal error': ExchangeNotAvailable,
        'EService:Busy': ExchangeNotAvailable,
        'EQuery:Unknown asset': BadSymbol,  # {"error":["EQuery:Unknown asset"]}
        'EAPI:Rate limit exceeded': DDoSProtection,
        'EOrder:Rate limit exceeded': DDoSProtection,
        'EGeneral:Internal error': ExchangeNotAvailable,
        'EGeneral:Temporary lockout': DDoSProtection,
        'EGeneral:Permission denied': PermissionDenied,
        'EOrder:Unknown order': InvalidOrder,
        'EOrder:Order minimum not met': InvalidOrder,
        'EGeneral:Invalid arguments': BadRequest,
        'ESession:Invalid session': AuthenticationError,
        'EAPI:Invalid nonce': InvalidNonce,
        'EFunding:No funding method': BadRequest,  # {"error":"EFunding:No funding method"}
        'EFunding:Unknown asset': BadSymbol,  # {"error":["EFunding:Unknown asset"]}
        'EService:Market in post_only mode': OnMaintenance,  # {"error":["EService:Market in post_only mode"]}
    },
},
{
    'id': 'okx',
    'name': 'OKX',
    'countries': ['CN', 'US'],
    'version': 'v5',
    'rateLimit': 100,
    'pro': True,
    'certified': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': True,
        'swap': True,
        'future': True,
        'option': None,
        'addMargin': True,
        'cancelAllOrders': None,
        'cancelOrder': True,
        'cancelOrders': True,
        'createDepositAddress': None,
        'createOrder': True,
        'createReduceOnlyOrder': None,
        'deposit': None,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBidsAsks': None,
        'fetchBorrowRate': True,
        'fetchBorrowRateHistories': True,
        'fetchBorrowRateHistory': True,
        'fetchBorrowRates': True,
        'fetchBorrowRatesPerSymbol': False,
        'fetchCanceledOrders': True,
        'fetchClosedOrder': None,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDeposit': None,
        'fetchDepositAddress': True,
        'fetchDepositAddresses': None,
        'fetchDepositAddressesByNetwork': True,
        'fetchDeposits': True,
        'fetchFundingFee': None,
        'fetchFundingFees': None,
        'fetchFundingHistory': True,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': True,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': True,
        'fetchIsolatedPositions': None,
        'fetchL3OrderBook': None,
        'fetchLedger': True,
        'fetchLedgerEntry': None,
        'fetchLeverage': True,
        'fetchLeverageTiers': False,
        'fetchMarketLeverageTiers': True,
        'fetchMarkets': True,
        'fetchMarkOHLCV': True,
        'fetchMyBuys': None,
        'fetchMySells': None,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': None,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': None,
        'fetchOrders': None,
        'fetchOrderTrades': True,
        'fetchPosition': True,
        'fetchPositions': True,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': None,
        'fetchTradingLimits': None,
        'fetchTransactions': None,
        'fetchTransfer': True,
        'fetchTransfers': False,
        'fetchWithdrawal': None,
        'fetchWithdrawals': True,
        'fetchWithdrawalWhitelist': None,
        'reduceMargin': True,
        'setLeverage': True,
        'setMarginMode': True,
        'setPositionMode': True,
        'signIn': None,
        'transfer': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1H',
        '2h': '2H',
        '4h': '4H',
        '6h': '6Hutc',
        '12h': '12Hutc',
        '1d': '1Dutc',
        '1w': '1Wutc',
        '1M': '1Mutc',
        '3M': '3Mutc',
        '6M': '6Mutc',
        '1y': '1Yutc',
    },
    'hostname': 'www.okx.com',  # or aws.okx.com
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/152485636-38b19e4a-bece-4dec-979a-5982859ffc04.jpg',
        'api': {
            'rest': 'https://{hostname}',
        },
        'www': 'https://www.okx.com',
        'doc': 'https://www.okx.com/docs-v5/en/',
        'fees': 'https://www.okx.com/pages/products/fees.html',
        'referral': 'https://www.okx.com/join/1888677',
        'test': {
            'rest': 'https://{hostname}',
        },
    },
    'api': {
        'public': {
            'get': {
                'market/tickers': 1,
                'market/ticker': 1,
                'market/index-tickers': 1,
                'market/books': 1,
                'market/candles': 1,
                'market/history-candles': 1,
                'market/index-candles': 1,
                'market/mark-price-candles': 1,
                'market/trades': 1,
                'market/platform-24-volume': 10,
                'market/open-oracle': 100,
                'market/index-components': 1,
                # 'market/oracle',
                'public/instruments': 1,
                'public/delivery-exercise-history': 0.5,
                'public/open-interest': 1,
                'public/funding-rate': 1,
                'public/funding-rate-history': 1,
                'public/price-limit': 1,
                'public/opt-summary': 1,
                'public/estimated-price': 2,
                'public/discount-rate-interest-free-quota': 10,
                'public/time': 2,
                'public/liquidation-orders': 0.5,
                'public/mark-price': 2,
                # 'public/tier',
                'public/position-tiers': 2,
                'public/underlying': 1,
                'public/interest-rate-loan-quota': 10,
                'public/vip-interest-rate-loan-quota': 10,
                'rubik/stat/trading-data/support-coin': 4,
                'rubik/stat/taker-volume': 4,
                'rubik/stat/margin/loan-ratio': 4,
                # long/short
                'rubik/stat/contracts/long-short-account-ratio': 4,
                'rubik/stat/contracts/open-interest-volume': 4,
                'rubik/stat/option/open-interest-volume': 4,
                # put/call
                'rubik/stat/option/open-interest-volume-ratio': 4,
                'rubik/stat/option/open-interest-volume-expiry': 4,
                'rubik/stat/option/open-interest-volume-strike': 4,
                'rubik/stat/option/taker-block-volume': 4,
                'system/status': 100,
                'asset/lending-rate-summary': 5 / 3,
                'asset/lending-rate-history': 5 / 3,
                'market/exchange-rate': 20,
            },
        },
        'private': {
            'get': {
                'account/account-position-risk': 2,
                'account/balance': 2,
                'account/positions': 2,
                'account/bills': 5 / 3,
                'account/bills-archive': 5 / 3,
                'account/config': 4,
                'account/max-size': 1,
                'account/max-avail-size': 1,
                'account/leverage-info': 1,
                'account/max-loan': 1,
                'account/trade-fee': 4,
                'account/interest-accrued': 4,
                'account/interest-rate': 4,
                'account/max-withdrawal': 1,
                'account/risk-state': 2,
                'account/borrow-repay-history': 4,
                'account/interest-limits': 4,
                'asset/asset-valuation': 1 / 5,
                'asset/deposit-address': 5 / 3,
                'asset/balances': 5 / 3,
                'asset/transfer-state': 10,
                'asset/deposit-history': 5 / 3,
                'asset/withdrawal-history': 5 / 3,
                'asset/currencies': 5 / 3,
                'asset/bills': 5 / 3,
                'asset/piggy-balance': 5 / 3,
                'asset/deposit-lightning': 5,
                'asset/lending-history': 5 / 3,
                'asset/saving-balance': 5 / 3,
                'trade/order': 1 / 3,
                'trade/orders-pending': 1,
                'trade/orders-history': 0.5,
                'trade/orders-history-archive': 1,
                'trade/fills': 1 / 3,
                'trade/fills-history': 2,
                'trade/orders-algo-pending': 1,
                'trade/orders-algo-history': 1,
                'account/subaccount/balances': 10,
                'asset/subaccount/bills': 5 / 3,
                'users/subaccount/list': 10,
                'users/subaccount/apikey': 10,
                'users/entrust-subaccount-list': 10,
                # broker
                'broker/nd/info': 10,
                'broker/nd/subaccount-info': 10,
                'asset/broker/nd/subaccount-deposit-address': 4,
                'asset/broker/nd/subaccount-deposit-history': 4,
                'broker/nd/rebate-daily': 1,
                # convert
                'asset/convert/currencies': 5 / 3,
                'asset/convert/currency-pair': 5 / 3,
                'asset/convert/estimate-quote': 5,
                'asset/convert/trade': 5,
                'asset/convert/history': 5 / 3,
                # options
                'account/greeks': 2,
            },
            'post': {
                'account/set-position-mode': 4,
                'account/set-leverage': 1,
                'account/position/margin-balance': 1,
                'account/set-greeks': 4,
                'account/set-isolated-mode': 4,
                'account/simulated_margin': 10,
                'account/borrow-repay': 5 / 3,
                'asset/transfer': 10,
                'asset/withdrawal': 5 / 3,
                'asset/purchase_redempt': 5 / 3,
                'asset/withdrawal-lightning': 5,
                'asset/set-lending-rate': 5 / 3,
                'trade/order': 1 / 3,
                'trade/batch-orders': 1 / 15,
                'trade/cancel-order': 1 / 3,
                'trade/cancel-batch-orders': 1 / 15,
                'trade/amend-order': 1 / 3,
                'trade/amend-batch-orders': 1 / 3,
                'trade/close-position': 1,
                'trade/order-algo': 1,
                'trade/cancel-algos': 1,
                'trade/cancel-advance-algos': 1,
                'users/subaccount/delete-apikey': 10,
                'users/subaccount/modify-apikey': 10,
                'users/subaccount/apikey': 10,
                'asset/subaccount/transfer': 10,
                # broker
                'broker/nd/create-subaccount': 10,
                'broker/nd/delete-subaccount': 10,
                'broker/nd/set-subaccount-level': 4,
                'broker/nd/set-subaccount-fee-rate': 4,
                'asset/broker/nd/subaccount-deposit-address': 4,
            },
        },
    },
    'fees': {
        'trading': {
            'taker': self.parse_number('0.0015'),
            'maker': self.parse_number('0.0010'),
        },
        'spot': {
            'taker': self.parse_number('0.0015'),
            'maker': self.parse_number('0.0010'),
        },
        'futures': {
            'taker': self.parse_number('0.0005'),
            'maker': self.parse_number('0.0002'),
        },
        'swap': {
            'taker': self.parse_number('0.00050'),
            'maker': self.parse_number('0.00020'),
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'password': True,
    },
    'exceptions': {
        'exact': {
            # Public error codes from 50000-53999
            # General Class
            '1': ExchangeError,  # Operation failed
            '2': ExchangeError,  # Bulk operation partially succeeded
            '50000': BadRequest,  # Body can not be empty
            '50001': OnMaintenance,  # Matching engine upgrading. Please try again later
            '50002': BadRequest,  # Json data format error
            '50004': RequestTimeout,  # Endpoint request timeout(does not indicate success or failure of order, please check order status)
            '50005': ExchangeNotAvailable,  # API is offline or unavailable
            '50006': BadRequest,  # Invalid Content_Type, please use "application/json" format
            '50007': AccountSuspended,  # Account blocked
            '50008': AuthenticationError,  # User does not exist
            '50009': AccountSuspended,  # Account is suspended due to ongoing liquidation
            '50010': ExchangeError,  # User ID can not be empty
            '50011': RateLimitExceeded,  # Request too frequent
            '50012': ExchangeError,  # Account status invalid
            '50013': ExchangeNotAvailable,  # System is busy, please try again later
            '50014': BadRequest,  # Parameter {0} can not be empty
            '50015': ExchangeError,  # Either parameter {0} or {1} is required
            '50016': ExchangeError,  # Parameter {0} does not match parameter {1}
            '50017': ExchangeError,  # The position is frozen due to ADL. Operation restricted
            '50018': ExchangeError,  # Currency {0} is frozen due to ADL. Operation restricted
            '50019': ExchangeError,  # The account is frozen due to ADL. Operation restricted
            '50020': ExchangeError,  # The position is frozen due to liquidation. Operation restricted
            '50021': ExchangeError,  # Currency {0} is frozen due to liquidation. Operation restricted
            '50022': ExchangeError,  # The account is frozen due to liquidation. Operation restricted
            '50023': ExchangeError,  # Funding fee frozen. Operation restricted
            '50024': BadRequest,  # Parameter {0} and {1} can not exist at the same time
            '50025': ExchangeError,  # Parameter {0} count exceeds the limit {1}
            '50026': ExchangeError,  # System error
            '50027': PermissionDenied,  # The account is restricted from trading
            '50028': ExchangeError,  # Unable to take the order, please reach out to support center for details
            # API Class
            '50100': ExchangeError,  # API frozen, please contact customer service
            '50101': AuthenticationError,  # Broker id of APIKey does not match current environment
            '50102': InvalidNonce,  # Timestamp request expired
            '50103': AuthenticationError,  # Request header "OK_ACCESS_KEY" can not be empty
            '50104': AuthenticationError,  # Request header "OK_ACCESS_PASSPHRASE" can not be empty
            '50105': AuthenticationError,  # Request header "OK_ACCESS_PASSPHRASE" incorrect
            '50106': AuthenticationError,  # Request header "OK_ACCESS_SIGN" can not be empty
            '50107': AuthenticationError,  # Request header "OK_ACCESS_TIMESTAMP" can not be empty
            '50108': ExchangeError,  # Exchange ID does not exist
            '50109': ExchangeError,  # Exchange domain does not exist
            '50110': PermissionDenied,  # Invalid IP
            '50111': AuthenticationError,  # Invalid OK_ACCESS_KEY
            '50112': AuthenticationError,  # Invalid OK_ACCESS_TIMESTAMP
            '50113': AuthenticationError,  # Invalid signature
            '50114': AuthenticationError,  # Invalid authorization
            '50115': BadRequest,  # Invalid request method
            # Trade Class
            '51000': BadRequest,  # Parameter {0} error
            '51001': BadSymbol,  # Instrument ID does not exist
            '51002': BadSymbol,  # Instrument ID does not match underlying index
            '51003': BadRequest,  # Either client order ID or order ID is required
            '51004': InvalidOrder,  # Order amount exceeds current tier limit
            '51005': InvalidOrder,  # Order amount exceeds the limit
            '51006': InvalidOrder,  # Order price out of the limit
            '51007': InvalidOrder,  # Order placement failed. Order amount should be at least 1 contract(showing up when placing an order with less than 1 contract)
            '51008': InsufficientFunds,  # Order placement failed due to insufficient balance
            '51009': AccountSuspended,  # Order placement function is blocked by the platform
            '51010': InsufficientFunds,  # Account level too low
            '51011': InvalidOrder,  # Duplicated order ID
            '51012': BadSymbol,  # Token does not exist
            '51014': BadSymbol,  # Index does not exist
            '51015': BadSymbol,  # Instrument ID does not match instrument type
            '51016': InvalidOrder,  # Duplicated client order ID
            '51017': ExchangeError,  # Borrow amount exceeds the limit
            '51018': ExchangeError,  # User with option account can not hold net short positions
            '51019': ExchangeError,  # No net long positions can be held under isolated margin mode in options
            '51020': InvalidOrder,  # Order amount should be greater than the min available amount
            '51021': BadSymbol,  # Contract to be listed
            '51022': BadSymbol,  # Contract suspended
            '51023': ExchangeError,  # Position does not exist
            '51024': AccountSuspended,  # Unified accountblocked
            '51025': ExchangeError,  # Order count exceeds the limit
            '51026': BadSymbol,  # Instrument type does not match underlying index
            '51027': BadSymbol,  # Contract expired
            '51028': BadSymbol,  # Contract under delivery
            '51029': BadSymbol,  # Contract is being settled
            '51030': BadSymbol,  # Funding fee is being settled
            '51031': InvalidOrder,  # This order price is not within the closing price range
            '51100': InvalidOrder,  # Trading amount does not meet the min tradable amount
            '51101': InvalidOrder,  # Entered amount exceeds the max pending order amount(Cont) per transaction
            '51102': InvalidOrder,  # Entered amount exceeds the max pending count
            '51103': InvalidOrder,  # Entered amount exceeds the max pending order count of the underlying asset
            '51104': InvalidOrder,  # Entered amount exceeds the max pending order amount(Cont) of the underlying asset
            '51105': InvalidOrder,  # Entered amount exceeds the max order amount(Cont) of the contract
            '51106': InvalidOrder,  # Entered amount exceeds the max order amount(Cont) of the underlying asset
            '51107': InvalidOrder,  # Entered amount exceeds the max holding amount(Cont)
            '51108': InvalidOrder,  # Positions exceed the limit for closing out with the market price
            '51109': InvalidOrder,  # No available offer
            '51110': InvalidOrder,  # You can only place a limit order after Call Auction has started
            '51111': BadRequest,  # Maximum {0} orders can be placed in bulk
            '51112': InvalidOrder,  # Close order size exceeds your available size
            '51113': RateLimitExceeded,  # Market-price liquidation requests too frequent
            '51115': InvalidOrder,  # Cancel all pending close-orders before liquidation
            '51116': InvalidOrder,  # Order price or trigger price exceeds {0}
            '51117': InvalidOrder,  # Pending close-orders count exceeds limit
            '51118': InvalidOrder,  # Total amount should exceed the min amount per order
            '51119': InsufficientFunds,  # Order placement failed due to insufficient balance
            '51120': InvalidOrder,  # Order quantity is less than {0}, please try again
            '51121': InvalidOrder,  # Order count should be the integer multiples of the lot size
            '51122': InvalidOrder,  # Order price should be higher than the min price {0}
            '51124': InvalidOrder,  # You can only place limit orders during call auction
            '51125': InvalidOrder,  # Currently there are reduce + reverse position pending orders in margin trading. Please cancel all reduce + reverse position pending orders and continue
            '51126': InvalidOrder,  # Currently there are reduce only pending orders in margin trading.Please cancel all reduce only pending orders and continue
            '51127': InsufficientFunds,  # Available balance is 0
            '51128': InvalidOrder,  # Multi-currency margin account can not do cross-margin trading
            '51129': InvalidOrder,  # The value of the position and buy order has reached the position limit, and no further buying is allowed
            '51130': BadSymbol,  # Fixed margin currency error
            '51131': InsufficientFunds,  # Insufficient balance
            '51132': InvalidOrder,  # Your position amount is negative and less than the minimum trading amount
            '51133': InvalidOrder,  # Reduce-only feature is unavailable for the spot transactions by multi-currency margin account
            '51134': InvalidOrder,  # Closing failed. Please check your holdings and pending orders
            '51135': InvalidOrder,  # Your closing price has triggered the limit price, and the max buy price is {0}
            '51136': InvalidOrder,  # Your closing price has triggered the limit price, and the min sell price is {0}
            '51137': InvalidOrder,  # Your opening price has triggered the limit price, and the max buy price is {0}
            '51138': InvalidOrder,  # Your opening price has triggered the limit price, and the min sell price is {0}
            '51139': InvalidOrder,  # Reduce-only feature is unavailable for the spot transactions by simple account
            '51201': InvalidOrder,  # Value of per market order cannot exceed 100,000 USDT
            '51202': InvalidOrder,  # Market - order amount exceeds the max amount
            '51203': InvalidOrder,  # Order amount exceeds the limit {0}
            '51204': InvalidOrder,  # The price for the limit order can not be empty
            '51205': InvalidOrder,  # Reduce-Only is not available
            '51250': InvalidOrder,  # Algo order price is out of the available range
            '51251': InvalidOrder,  # Algo order type error(when user place an iceberg order)
            '51252': InvalidOrder,  # Algo order price is out of the available range
            '51253': InvalidOrder,  # Average amount exceeds the limit of per iceberg order
            '51254': InvalidOrder,  # Iceberg average amount error(when user place an iceberg order)
            '51255': InvalidOrder,  # Limit of per iceberg order: Total amount/1000 < x <= Total amount
            '51256': InvalidOrder,  # Iceberg order price variance error
            '51257': InvalidOrder,  # Trail order callback rate error
            '51258': InvalidOrder,  # Trail - order placement failed. The trigger price of a sell order should be higher than the last transaction price
            '51259': InvalidOrder,  # Trail - order placement failed. The trigger price of a buy order should be lower than the last transaction price
            '51260': InvalidOrder,  # Maximum {0} pending trail - orders can be held at the same time
            '51261': InvalidOrder,  # Each user can hold up to {0} pending stop - orders at the same time
            '51262': InvalidOrder,  # Maximum {0} pending iceberg orders can be held at the same time
            '51263': InvalidOrder,  # Maximum {0} pending time-weighted orders can be held at the same time
            '51264': InvalidOrder,  # Average amount exceeds the limit of per time-weighted order
            '51265': InvalidOrder,  # Time-weighted order limit error
            '51267': InvalidOrder,  # Time-weighted order strategy initiative rate error
            '51268': InvalidOrder,  # Time-weighted order strategy initiative range error
            '51269': InvalidOrder,  # Time-weighted order interval error, the interval should be {0}<= x<={1}
            '51270': InvalidOrder,  # The limit of time-weighted order price variance is 0 < x <= 1%
            '51271': InvalidOrder,  # Sweep ratio should be 0 < x <= 100%
            '51272': InvalidOrder,  # Price variance should be 0 < x <= 1%
            '51273': InvalidOrder,  # Total amount should be more than {0}
            '51274': InvalidOrder,  # Total quantity of time-weighted order must be larger than single order limit
            '51275': InvalidOrder,  # The amount of single stop-market order can not exceed the upper limit
            '51276': InvalidOrder,  # Stop - Market orders cannot specify a price
            '51277': InvalidOrder,  # TP trigger price can not be higher than the last price
            '51278': InvalidOrder,  # SL trigger price can not be lower than the last price
            '51279': InvalidOrder,  # TP trigger price can not be lower than the last price
            '51280': InvalidOrder,  # SL trigger price can not be higher than the last price
            '51400': OrderNotFound,  # Cancellation failed as the order does not exist
            '51401': OrderNotFound,  # Cancellation failed as the order is already canceled
            '51402': OrderNotFound,  # Cancellation failed as the order is already completed
            '51403': InvalidOrder,  # Cancellation failed as the order type does not support cancellation
            '51404': InvalidOrder,  # Order cancellation unavailable during the second phase of call auction
            '51405': ExchangeError,  # Cancellation failed as you do not have any pending orders
            '51406': ExchangeError,  # Canceled - order count exceeds the limit {0}
            '51407': BadRequest,  # Either order ID or client order ID is required
            '51408': ExchangeError,  # Pair ID or name does not match the order info
            '51409': ExchangeError,  # Either pair ID or pair name ID is required
            '51410': CancelPending,  # Cancellation failed as the order is already under cancelling status
            '51500': ExchangeError,  # Either order price or amount is required
            '51501': ExchangeError,  # Maximum {0} orders can be modified
            '51502': InsufficientFunds,  # Order modification failed for insufficient margin
            '51503': ExchangeError,  # Order modification failed as the order does not exist
            '51506': ExchangeError,  # Order modification unavailable for the order type
            '51508': ExchangeError,  # Orders are not allowed to be modified during the call auction
            '51509': ExchangeError,  # Modification failed as the order has been canceled
            '51510': ExchangeError,  # Modification failed as the order has been completed
            '51511': ExchangeError,  # Modification failed as the order price did not meet the requirement for Post Only
            '51600': ExchangeError,  # Status not found
            '51601': ExchangeError,  # Order status and order ID cannot exist at the same time
            '51602': ExchangeError,  # Either order status or order ID is required
            '51603': OrderNotFound,  # Order does not exist
            # Data class
            '52000': ExchangeError,  # No updates
            # SPOT/MARGIN error codes 54000-54999
            '54000': ExchangeError,  # Margin transactions unavailable
            '54001': ExchangeError,  # Only Multi-currency margin account can be set to borrow coins automatically
            # FUNDING error codes 58000-58999
            '58000': ExchangeError,  # Account type {0} does not supported when getting the sub-account balance
            '58001': AuthenticationError,  # Incorrect trade password
            '58002': PermissionDenied,  # Please activate Savings Account first
            '58003': ExchangeError,  # Currency type is not supported by Savings Account
            '58004': AccountSuspended,  # Account blocked(transfer & withdrawal endpoint: either end of the account does not authorize the transfer)
            '58005': ExchangeError,  # The redeemed amount must be no greater than {0}
            '58006': ExchangeError,  # Service unavailable for token {0}
            '58007': ExchangeError,  # Abnormal Assets interface. Please try again later
            '58100': ExchangeError,  # The trading product triggers risk control, and the platform has suspended the fund transfer-out function with related users. Please wait patiently
            '58101': AccountSuspended,  # Transfer suspended(transfer endpoint: either end of the account does not authorize the transfer)
            '58102': RateLimitExceeded,  # Too frequent transfer(transfer too frequently)
            '58103': ExchangeError,  # Parent account user id does not match sub-account user id
            '58104': ExchangeError,  # Since your P2P transaction is abnormal, you are restricted from making fund transfers. Please contact customer support to remove the restriction
            '58105': ExchangeError,  # Since your P2P transaction is abnormal, you are restricted from making fund transfers. Please transfer funds on our website or app to complete identity verification
            '58106': ExchangeError,  # Please enable the account for spot contract
            '58107': ExchangeError,  # Please enable the account for futures contract
            '58108': ExchangeError,  # Please enable the account for option contract
            '58109': ExchangeError,  # Please enable the account for swap contract
            '58110': ExchangeError,  # The contract triggers risk control, and the platform has suspended the fund transfer function of it. Please wait patiently
            '58111': ExchangeError,  # Funds transfer unavailable as the perpetual contract is charging the funding fee. Please try again later
            '58112': ExchangeError,  # Your fund transfer failed. Please try again later
            '58114': ExchangeError,  # Transfer amount must be more than 0
            '58115': ExchangeError,  # Sub-account does not exist
            '58116': ExchangeError,  # Transfer amount exceeds the limit
            '58117': ExchangeError,  # Account assets are abnormal, please deal with negative assets before transferring
            '58200': ExchangeError,  # Withdrawal from {0} to {1} is unavailable for self currency
            '58201': ExchangeError,  # Withdrawal amount exceeds the daily limit
            '58202': ExchangeError,  # The minimum withdrawal amount for NEO is 1, and the amount must be an integer
            '58203': InvalidAddress,  # Please add a withdrawal address
            '58204': AccountSuspended,  # Withdrawal suspended
            '58205': ExchangeError,  # Withdrawal amount exceeds the upper limit
            '58206': ExchangeError,  # Withdrawal amount is lower than the lower limit
            '58207': InvalidAddress,  # Withdrawal failed due to address error
            '58208': ExchangeError,  # Withdrawal failed. Please link your email
            '58209': ExchangeError,  # Withdrawal failed. Withdraw feature is not available for sub-accounts
            '58210': ExchangeError,  # Withdrawal fee exceeds the upper limit
            '58211': ExchangeError,  # Withdrawal fee is lower than the lower limit(withdrawal endpoint: incorrect fee)
            '58212': ExchangeError,  # Withdrawal fee should be {0}% of the withdrawal amount
            '58213': AuthenticationError,  # Please set trading password before withdrawal
            '58300': ExchangeError,  # Deposit-address count exceeds the limit
            '58350': InsufficientFunds,  # Insufficient balance
            # Account error codes 59000-59999
            '59000': ExchangeError,  # Your settings failed as you have positions or open orders
            '59001': ExchangeError,  # Switching unavailable as you have borrowings
            '59100': ExchangeError,  # You have open positions. Please cancel all open positions before changing the leverage
            '59101': ExchangeError,  # You have pending orders with isolated positions. Please cancel all the pending orders and adjust the leverage
            '59102': ExchangeError,  # Leverage exceeds the maximum leverage. Please adjust the leverage
            '59103': InsufficientFunds,  # Leverage is too low and no sufficient margin in your account. Please adjust the leverage
            '59104': ExchangeError,  # The leverage is too high. The borrowed position has exceeded the maximum position of self leverage. Please adjust the leverage
            '59105': ExchangeError,  # Leverage can not be less than {0}. Please adjust the leverage
            '59106': ExchangeError,  # The max available margin corresponding to your order tier is {0}. Please adjust your margin and place a new order
            '59107': ExchangeError,  # You have pending orders under the service, please modify the leverage after canceling all pending orders
            '59108': InsufficientFunds,  # Low leverage and insufficient margin, please adjust the leverage
            '59109': ExchangeError,  # Account equity less than the required margin amount after adjustment. Please adjust the leverage
            '59200': InsufficientFunds,  # Insufficient account balance
            '59201': InsufficientFunds,  # Negative account balance
            '59300': ExchangeError,  # Margin call failed. Position does not exist
            '59301': ExchangeError,  # Margin adjustment failed for exceeding the max limit
            '59401': ExchangeError,  # Holdings already reached the limit
            '59500': ExchangeError,  # Only the APIKey of the main account has permission
            '59501': ExchangeError,  # Only 50 APIKeys can be created per account
            '59502': ExchangeError,  # Note name cannot be duplicate with the currently created APIKey note name
            '59503': ExchangeError,  # Each APIKey can bind up to 20 IP addresses
            '59504': ExchangeError,  # The sub account does not support the withdrawal function
            '59505': ExchangeError,  # The passphrase format is incorrect
            '59506': ExchangeError,  # APIKey does not exist
            '59507': ExchangeError,  # The two accounts involved in a transfer must be two different sub accounts under the same parent account
            '59508': AccountSuspended,  # The sub account of {0} is suspended
            # WebSocket error Codes from 60000-63999
            '60001': AuthenticationError,  # "OK_ACCESS_KEY" can not be empty
            '60002': AuthenticationError,  # "OK_ACCESS_SIGN" can not be empty
            '60003': AuthenticationError,  # "OK_ACCESS_PASSPHRASE" can not be empty
            '60004': AuthenticationError,  # Invalid OK_ACCESS_TIMESTAMP
            '60005': AuthenticationError,  # Invalid OK_ACCESS_KEY
            '60006': InvalidNonce,  # Timestamp request expired
            '60007': AuthenticationError,  # Invalid sign
            '60008': AuthenticationError,  # Login is not supported for public channels
            '60009': AuthenticationError,  # Login failed
            '60010': AuthenticationError,  # Already logged in
            '60011': AuthenticationError,  # Please log in
            '60012': BadRequest,  # Illegal request
            '60013': BadRequest,  # Invalid args
            '60014': RateLimitExceeded,  # Requests too frequent
            '60015': NetworkError,  # Connection closed as there was no data transmission in the last 30 seconds
            '60016': ExchangeNotAvailable,  # Buffer is full, cannot write data
            '60017': BadRequest,  # Invalid url path
            '60018': BadRequest,  # The {0} {1} {2} {3} {4} does not exist
            '60019': BadRequest,  # Invalid op {op}
            '63999': ExchangeError,  # Internal system error
        },
        'broad': {
        },
    },
    'httpExceptions': {
        '429': ExchangeNotAvailable,  # https://github.com/ccxt/ccxt/issues/9612
    },
    'precisionMode': TICK_SIZE,
    'options': {
        'defaultNetwork': 'ERC20',
        'networks': {
            'ETH': 'ERC20',
            'TRX': 'TRC20',
            'OMNI': 'Omni',
            'SOLANA': 'Solana',
            'POLYGON': 'Polygon',
            'OEC': 'OEC',
            'ALGO': 'ALGO',  # temporarily unavailable
        },
        'layerTwo': {
            'Lightning': True,
            'Liquid': True,
        },
        'fetchOHLCV': {
            # 'type': 'Candles',  # Candles or HistoryCandles, IndexCandles, MarkPriceCandles
        },
        'createOrder': 'privatePostTradeBatchOrders',  # or 'privatePostTradeOrder'
        'createMarketBuyOrderRequiresPrice': False,
        'fetchMarkets': ['spot', 'futures', 'swap', 'option'],  # spot, futures, swap, option
        'defaultType': 'spot',  # 'funding', 'spot', 'margin', 'futures', 'swap', 'option'
        # 'fetchBalance': {
        #     'type': 'spot',  # 'funding', 'trading', 'spot'
        # },
        'fetchLedger': {
            'method': 'privateGetAccountBills',  # privateGetAccountBillsArchive, privateGetAssetBills
        },
        # 1 = SPOT, 3 = FUTURES, 5 = MARGIN, 6 = FUNDING, 9 = SWAP, 12 = OPTION, 18 = Unified account
        'accountsByType': {
            'spot': '1',
            'futures': '3',
            'margin': '5',
            'funding': '6',
            'swap': '9',
            'option': '12',
            'trading': '18',  # unified trading account
            'unified': '18',
        },
        'typesByAccount': {
            '1': 'spot',
            '3': 'futures',
            '5': 'margin',
            '6': 'funding',
            '9': 'swap',
            '12': 'option',
            '18': 'trading',  # unified trading account
        },
        'brokerId': 'e847386590ce4dBC',
    },
    'commonCurrencies': {
        # the exchange refers to ERC20 version of Aeternity(AEToken)
        'AE': 'AET',  # https://github.com/ccxt/ccxt/issues/4981
        'BOX': 'DefiBox',
        'HOT': 'Hydro Protocol',
        'HSR': 'HC',
        'MAG': 'Maggie',
        'SBTC': 'Super Bitcoin',
        'TRADE': 'Unitrade',
        'YOYO': 'YOYOW',
        'WIN': 'WinToken',  # https://github.com/ccxt/ccxt/issues/5701
    },
},
{
    'id': 'zaif',
    'name': 'Zaif',
    'countries': ['JP'],
    'rateLimit': 2000,
    'version': '1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': False,
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchOpenOrders': True,
        'fetchOrderBook': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',
        'api': 'https://api.zaif.jp',
        'www': 'https://zaif.jp',
        'doc': [
            'https://techbureau-api-document.readthedocs.io/ja/latest/index.html',
            'https://corp.zaif.jp/api-docs',
            'https://corp.zaif.jp/api-docs/api_links',
            'https://www.npmjs.com/package/zaif.jp',
            'https://github.com/you21979/node-zaif',
        ],
        'fees': 'https://zaif.jp/fee?lang=en',
    },
    'fees': {
        'trading': {
            'percentage': True,
            'taker': self.parse_number('0.001'),
            'maker': self.parse_number('0'),
        },
    },
    'api': {
        'public': {
            'get': [
                'depth/{pair}',
                'currencies/{pair}',
                'currencies/all',
                'currency_pairs/{pair}',
                'currency_pairs/all',
                'last_price/{pair}',
                'ticker/{pair}',
                'trades/{pair}',
            ],
        },
        'private': {
            'post': [
                'active_orders',
                'cancel_order',
                'deposit_history',
                'get_id_info',
                'get_info',
                'get_info2',
                'get_personal_info',
                'trade',
                'trade_history',
                'withdraw',
                'withdraw_history',
            ],
        },
        'ecapi': {
            'post': [
                'createInvoice',
                'getInvoice',
                'getInvoiceIdsByOrderNumber',
                'cancelInvoice',
            ],
        },
        'tlapi': {
            'post': [
                'get_positions',
                'position_history',
                'active_positions',
                'create_position',
                'change_position',
                'cancel_position',
            ],
        },
        'fapi': {
            'get': [
                'groups/{group_id}',
                'last_price/{group_id}/{pair}',
                'ticker/{group_id}/{pair}',
                'trades/{group_id}/{pair}',
                'depth/{group_id}/{pair}',
            ],
        },
    },
    'options': {
        # zaif schedule defines several market-specific fees
        'fees': {
            'BTC/JPY': {'maker': 0, 'taker': 0.1 / 100},
            'BCH/JPY': {'maker': 0, 'taker': 0.3 / 100},
            'BCH/BTC': {'maker': 0, 'taker': 0.3 / 100},
            'PEPECASH/JPY': {'maker': 0, 'taker': 0.01 / 100},
            'PEPECASH/BT': {'maker': 0, 'taker': 0.01 / 100},
        },
    },
    'exceptions': {
        'exact': {
            'unsupported currency_pair': BadRequest,  # {"error": "unsupported currency_pair"}
        },
        'broad': {
        },
    },
},
{
    'id': 'mercado',
    'name': 'Mercado Bitcoin',
    'countries': ['BR'],  # Brazil
    'rateLimit': 1000,
    'version': 'v3',
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': 'emulated',
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': None,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '6h': '6h',
        '12h': '12h',
        '1d': '1d',
        '3d': '3d',
        '1w': '1w',
        '2w': '2w',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',
        'api': {
            'public': 'https://www.mercadobitcoin.net/api',
            'private': 'https://www.mercadobitcoin.net/tapi',
            'v4Public': 'https://www.mercadobitcoin.com.br/v4',
        },
        'www': 'https://www.mercadobitcoin.com.br',
        'doc': [
            'https://www.mercadobitcoin.com.br/api-doc',
            'https://www.mercadobitcoin.com.br/trade-api',
        ],
    },
    'api': {
        'public': {
            'get': [
                'coins',
                '{coin}/orderbook/',  # last slash critical
                '{coin}/ticker/',
                '{coin}/trades/',
                '{coin}/trades/{from}/',
                '{coin}/trades/{from}/{to}',
                '{coin}/day-summary/{year}/{month}/{day}/',
            ],
        },
        'private': {
            'post': [
                'cancel_order',
                'get_account_info',
                'get_order',
                'get_withdrawal',
                'list_system_messages',
                'list_orders',
                'list_orderbook',
                'place_buy_order',
                'place_sell_order',
                'place_market_buy_order',
                'place_market_sell_order',
                'withdraw_coin',
            ],
        },
        'v4Public': {
            'get': [
                '{coin}/candle/',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': 0.003,
            'taker': 0.007,
        },
    },
    'options': {
        'limits': {
            'BTC': 0.001,
            'BCH': 0.001,
            'ETH': 0.01,
            'LTC': 0.01,
            'XRP': 0.1,
        },
    },
},
{
    'id': 'ftx',
    'name': 'FTX',
    'countries': ['BS'],  # Bahamas
    # hard limit of 6 requests per 200ms => 30 requests per 1000ms => 1000ms / 30 = 33.3333 ms between requests
    # 10 withdrawal requests per 30 seconds = (1000ms / rateLimit) / (1/3) = 90.1
    # cancels do not count towards rateLimit
    # only 'order-making' requests count towards ratelimit
    'rateLimit': 33.34,
    'certified': True,
    'pro': True,
    'hostname': 'ftx.com',  # or ftx.us
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/67149189-df896480-f2b0-11e9-8816-41593e17f9ec.jpg',
        'www': 'https://ftx.com',
        'api': {
            'public': 'https://{hostname}',
            'private': 'https://{hostname}',
        },
        'doc': 'https://github.com/ftexchange/ftx',
        'fees': 'https://ftexchange.zendesk.com/hc/en-us/articles/360024479432-Fees',
        'referral': {
            'url': 'https://ftx.com/#a=ccxt',
            'discount': 0.05,
        },
    },
    'has': {
        'CORS': None,
        'spot': True,
        'margin': True,
        'swap': True,
        'future': True,
        'option': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': True,
        'fetchBorrowRateHistories': True,
        'fetchBorrowRateHistory': True,
        'fetchBorrowRates': True,
        'fetchClosedOrders': None,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFees': None,
        'fetchFundingHistory': True,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': True,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': True,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPosition': False,
        'fetchPositions': True,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': False,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': True,
        'setMarginMode': False,  # FTX only supports cross margin
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '15s': '15',
        '1m': '60',
        '5m': '300',
        '15m': '900',
        '1h': '3600',
        '4h': '14400',
        '1d': '86400',
        '3d': '259200',
        '1w': '604800',
        '2w': '1209600',
        '1M': '2592000',
    },
    'api': {
        'public': {
            'get': {
                'coins': 1,
                # markets
                'markets': 1,
                'markets/{market_name}': 1,
                'markets/{market_name}/orderbook': 1,  # ?depth={depth}
                'markets/{market_name}/trades': 1,  # ?limit={limit}&start_time={start_time}&end_time={end_time}
                'markets/{market_name}/candles': 1,  # ?resolution={resolution}&limit={limit}&start_time={start_time}&end_time={end_time}
                # futures
                'futures': 1,
                'futures/{future_name}': 1,
                'futures/{future_name}/stats': 1,
                'funding_rates': 1,
                'indexes/{index_name}/weights': 1,
                'expired_futures': 1,
                'indexes/{market_name}/candles': 1,  # ?resolution={resolution}&limit={limit}&start_time={start_time}&end_time={end_time}
                # wallet
                'wallet/coins': 1,
                # leverage tokens
                'lt/tokens': 1,
                'lt/{token_name}': 1,
                # etfs
                'etfs/rebalance_info': 1,
                # options
                'options/requests': 1,
                'options/trades': 1,
                'options/historical_volumes/BTC': 1,
                'stats/24h_options_volume': 1,
                'options/open_interest/BTC': 1,
                'options/historical_open_interest/BTC': 1,
                # spot margin
                'spot_margin/history': 1,
                'spot_margin/borrow_summary': 1,
                # nfts
                'nft/nfts': 1,
                'nft/{nft_id}': 1,
                'nft/{nft_id}/trades': 1,
                'nft/all_trades': 1,
                'nft/{nft_id}/account_info': 1,
                'nft/collections': 1,
                # ftx pay
                'ftxpay/apps/{user_specific_id}/details': 1,
            },
            'post': {
                'ftxpay/apps/{user_specific_id}/orders': 1,
            },
        },
        'private': {
            'get': {
                # subaccounts
                'subaccounts': 1,
                'subaccounts/{nickname}/balances': 1,
                # account
                'account': 1,
                'positions': 1,
                # wallet
                'wallet/balances': 1,
                'wallet/all_balances': 1,
                'wallet/deposit_address/{coin}': 1,  # ?method={method}
                'wallet/deposits': 1,
                'wallet/withdrawals': 1,
                'wallet/airdrops': 1,
                'wallet/withdrawal_fee': 1,
                'wallet/saved_addresses': 1,
                # orders
                'orders': 1,  # ?market={market}
                'orders/history': 1,  # ?market={market}
                'orders/{order_id}': 1,
                'orders/by_client_id/{client_order_id}': 1,
                # conditional orders
                'conditional_orders': 1,  # ?market={market}
                'conditional_orders/{conditional_order_id}/triggers': 1,
                'conditional_orders/history': 1,  # ?market={market}
                'fills': 1,  # ?market={market}
                'funding_payments': 1,
                # leverage tokens
                'lt/balances': 1,
                'lt/creations': 1,
                'lt/redemptions': 1,
                # options
                'options/my_requests': 1,
                'options/requests/{request_id}/quotes': 1,
                'options/my_quotes': 1,
                'options/account_info': 1,
                'options/positions': 1,
                'options/fills': 1,
                # staking
                'staking/stakes': 1,
                'staking/unstake_requests': 1,
                'staking/balances': 1,
                'staking/staking_rewards': 1,
                # otc
                'otc/quotes/{quoteId}': 1,
                # spot margin
                'spot_margin/borrow_rates': 1,
                'spot_margin/lending_rates': 1,
                'spot_margin/market_info': 1,  # ?market={market}
                'spot_margin/borrow_history': 1,
                'spot_margin/lending_history': 1,
                'spot_margin/offers': 1,
                'spot_margin/lending_info': 1,
                # nfts
                'nft/balances': 1,
                'nft/bids': 1,
                'nft/deposits': 1,
                'nft/withdrawals': 1,
                'nft/fills': 1,
                'nft/gallery/{gallery_id}': 1,
                'nft/gallery_settings': 1,
                # latency statistics
                'stats/latency_stats': 1,
                # pnl
                'pnl/historical_changes': 1,
            },
            'post': {
                # subaccounts
                'subaccounts': 1,
                'subaccounts/update_name': 1,
                'subaccounts/transfer': 1,
                # account
                'account/leverage': 1,
                # wallet
                'wallet/withdrawals': 90,
                'wallet/saved_addresses': 1,
                # orders
                'orders': 1,
                'conditional_orders': 1,
                'orders/{order_id}/modify': 1,
                'orders/by_client_id/{client_order_id}/modify': 1,
                'conditional_orders/{order_id}/modify': 1,
                # leverage tokens
                'lt/{token_name}/create': 1,
                'lt/{token_name}/redeem': 1,
                # options
                'options/requests': 1,
                'options/requests/{request_id}/quotes': 1,
                'options/quotes/{quote_id}/accept': 1,
                # staking
                'staking/unstake_requests': 1,
                'srm_stakes/stakes': 1,
                # otc
                'otc/quotes/{quote_id}/accept': 1,
                'otc/quotes': 1,
                # spot margin
                'spot_margin/offers': 1,
                # nfts
                'nft/offer': 1,
                'nft/buy': 1,
                'nft/auction': 1,
                'nft/edit_auction': 1,
                'nft/cancel_auction': 1,
                'nft/bids': 1,
                'nft/redeem': 1,
                'nft/gallery_settings': 1,
                # ftx pay
                'ftxpay/apps/{user_specific_id}/orders': 1,
            },
            'delete': {
                # subaccounts
                'subaccounts': 1,
                # wallet
                'wallet/saved_addresses/{saved_address_id}': 1,
                # orders
                'orders/{order_id}': 1,
                'orders/by_client_id/{client_order_id}': 1,
                'orders': 1,
                'conditional_orders/{order_id}': 1,
                # options
                'options/requests/{request_id}': 1,
                'options/quotes/{quote_id}': 1,
                # staking
                'staking/unstake_requests/{request_id}': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'maker': self.parse_number('0.0002'),
            'taker': self.parse_number('0.0007'),
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.0007')],
                    [self.parse_number('2000000'), self.parse_number('0.0006')],
                    [self.parse_number('5000000'), self.parse_number('0.00055')],
                    [self.parse_number('10000000'), self.parse_number('0.0005')],
                    [self.parse_number('25000000'), self.parse_number('0.0045')],
                    [self.parse_number('50000000'), self.parse_number('0.0004')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.0002')],
                    [self.parse_number('2000000'), self.parse_number('0.00015')],
                    [self.parse_number('5000000'), self.parse_number('0.0001')],
                    [self.parse_number('10000000'), self.parse_number('0.00005')],
                    [self.parse_number('25000000'), self.parse_number('0')],
                    [self.parse_number('50000000'), self.parse_number('0')],
                ],
            },
        },
        'funding': {
            'withdraw': {},
        },
    },
    'exceptions': {
        'exact': {
            'Slow down': RateLimitExceeded,  # {"error":"Slow down","success":false}
            'Size too small for provide': InvalidOrder,  # {"error":"Size too small for provide","success":false}
            'Not enough balances': InsufficientFunds,  # {"error":"Not enough balances","success":false}
            'InvalidPrice': InvalidOrder,  # {"error":"Invalid price","success":false}
            'Size too small': InvalidOrder,  # {"error":"Size too small","success":false}
            'Size too large': InvalidOrder,  # {"error":"Size too large","success":false}
            'Invalid price': InvalidOrder,  # {"success":false,"error":"Invalid price"}
            'Missing parameter price': InvalidOrder,  # {"error":"Missing parameter price","success":false}
            'Order not found': OrderNotFound,  # {"error":"Order not found","success":false}
            'Order already closed': InvalidOrder,  # {"error":"Order already closed","success":false}
            'Trigger price too high': InvalidOrder,  # {"error":"Trigger price too high","success":false}
            'Trigger price too low': InvalidOrder,  # {"error":"Trigger price too low","success":false}
            'Order already queued for cancellation': CancelPending,  # {"error":"Order already queued for cancellation","success":false}
            'Duplicate client order ID': DuplicateOrderId,  # {"error":"Duplicate client order ID","success":false}
            'Spot orders cannot be reduce-only': InvalidOrder,  # {"error":"Spot orders cannot be reduce-only","success":false}
            'Invalid reduce-only order': InvalidOrder,  # {"error":"Invalid reduce-only order","success":false}
            'Account does not have enough balances': InsufficientFunds,  # {"success":false,"error":"Account does not have enough balances"}
            'Not authorized for subaccount-specific access': PermissionDenied,  # {"success":false,"error":"Not authorized for subaccount-specific access"}
            'Not approved to trade self product': PermissionDenied,  # {"success":false,"error":"Not approved to trade self product"}
        },
        'broad': {
            # {"error":"Not logged in","success":false}
            # {"error":"Not logged in: Invalid API key","success":false}
            'Not logged in': AuthenticationError,
            'Account does not have enough margin for order': InsufficientFunds,
            'Invalid parameter': BadRequest,  # {"error":"Invalid parameter start_time","success":false}
            'The requested URL was not found on the server': BadRequest,
            'No such coin': BadRequest,
            'No such subaccount': AuthenticationError,
            'No such future': BadSymbol,
            'No such market': BadSymbol,
            'Do not send more than': RateLimitExceeded,
            'An unexpected error occurred': ExchangeNotAvailable,  # {"error":"An unexpected error occurred, please try again later(58BC21C795).","success":false}
            'Please retry request': ExchangeNotAvailable,  # {"error":"Please retry request","success":false}
            'Please try again': ExchangeNotAvailable,  # {"error":"Please try again","success":false}
            'Try again': ExchangeNotAvailable,  # {"error":"Try again","success":false}
            'Only have permissions for subaccount': PermissionDenied,  # {"success":false,"error":"Only have permissions for subaccount *sub_name*"}
        },
    },
    'precisionMode': TICK_SIZE,
    'options': {
        # support for canceling conditional orders
        # https://github.com/ccxt/ccxt/issues/6669
        'cancelOrder': {
            'method': 'privateDeleteOrdersOrderId',  # privateDeleteConditionalOrdersOrderId
        },
        'fetchOpenOrders': {
            'method': 'privateGetOrders',  # privateGetConditionalOrders
        },
        'fetchOrders': {
            'method': 'privateGetOrdersHistory',  # privateGetConditionalOrdersHistory
        },
        'sign': {
            'ftx.com': 'FTX',
            'ftx.us': 'FTXUS',
        },
        'networks': {
            'SOL': 'sol',
            'SPL': 'sol',
            'TRX': 'trx',
            'TRC20': 'trx',
            'ETH': 'erc20',
            'ERC20': 'erc20',
            'OMNI': 'omni',
            'BEP2': 'bep2',
            'BNB': 'bep2',
            'BEP20': 'bsc',
            'BSC': 'bsc',
        },
    },
    'commonCurrencies': {
        'STARS': 'StarLaunch',
    },
},
{
    'id': 'bequant',
    'name': 'Bequant',
    'countries': ['MT'],  # Malta
    'pro': True,
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/55248342-a75dfe00-525a-11e9-8aa2-05e9dca943c6.jpg',
        'api': {
            'public': 'https://api.bequant.io',
            'private': 'https://api.bequant.io',
        },
        'www': 'https://bequant.io',
        'doc': [
            'https://api.bequant.io/',
        ],
        'fees': [
            'https://bequant.io/fees-and-limits',
        ],
        'referral': 'https://bequant.io',
    },
},
{
    'id': 'kucoinfutures',
    'name': 'KuCoin Futures',
    'countries': ['SC'],
    'rateLimit': 75,
    'version': 'v1',
    'certified': False,
    'pro': False,
    'comment': 'Platform 2.0',
    'quoteJsonNumbers': False,
    'has': {
        'CORS': None,
        'spot': False,
        'margin': False,
        'swap': True,
        'future': True,
        'option': False,
        'addMargin': True,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': False,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFee': True,
        'fetchFundingHistory': True,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': False,
        'fetchIndexOHLCV': False,
        'fetchL3OrderBook': True,
        'fetchLedger': True,
        'fetchLeverageTiers': False,
        'fetchMarketLeverageTiers': True,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPositions': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': False,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchWithdrawals': True,
        'setMarginMode': False,
        'transfer': True,
        'withdraw': None,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/147508995-9e35030a-d046-43a1-a006-6fabd981b554.jpg',
        'doc': [
            'https://docs.kucoin.com/futures',
            'https://docs.kucoin.com',
        ],
        'www': 'https://futures.kucoin.com/',
        'referral': 'https://futures.kucoin.com/?rcode=E5wkqe',
        'api': {
            'public': 'https://openapi-v2.kucoin.com',
            'private': 'https://openapi-v2.kucoin.com',
            'futuresPrivate': 'https://api-futures.kucoin.com',
            'futuresPublic': 'https://api-futures.kucoin.com',
        },
        'test': {
            'public': 'https://openapi-sandbox.kucoin.com',
            'private': 'https://openapi-sandbox.kucoin.com',
            'futuresPrivate': 'https://api-sandbox-futures.kucoin.com',
            'futuresPublic': 'https://api-sandbox-futures.kucoin.com',
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'password': True,
    },
    'api': {
        'futuresPublic': {
            'get': {
                'contracts/active': 1,
                'contracts/{symbol}': 1,
                'contracts/risk-limit/{symbol}': 1,
                'ticker': 1,
                'level2/snapshot': 1.33,
                'level2/depth{limit}': 1,
                'level2/message/query': 1,
                'level3/message/query': 1,  # deprecated，level3/snapshot is suggested
                'level3/snapshot': 1,  # v2
                'trade/history': 1,
                'interest/query': 1,
                'index/query': 1,
                'mark-price/{symbol}/current': 1,
                'premium/query': 1,
                'funding-rate/{symbol}/current': 1,
                'timestamp': 1,
                'status': 1,
                'kline/query': 1,
            },
            'post': {
                'bullet-public': 1,
            },
        },
        'futuresPrivate': {
            'get': {
                'account-overview': 1.33,
                'transaction-history': 4.44,
                'deposit-address': 1,
                'deposit-list': 1,
                'withdrawals/quotas': 1,
                'withdrawal-list': 1,
                'transfer-list': 1,
                'orders': 1.33,
                'stopOrders': 1,
                'recentDoneOrders': 1,
                'orders/{orderId}': 1,  # ?clientOid={client-order-id}  # get order by orderId
                'orders/byClientOid': 1,  # ?clientOid=eresc138b21023a909e5ad59  # get order by clientOid
                'fills': 4.44,
                'recentFills': 4.44,
                'openOrderStatistics': 1,
                'position': 1,
                'positions': 4.44,
                'funding-history': 4.44,
            },
            'post': {
                'withdrawals': 1,
                'transfer-out': 1,  # v2
                'orders': 1.33,
                'position/margin/auto-deposit-status': 1,
                'position/margin/deposit-margin': 1,
                'bullet-private': 1,
            },
            'delete': {
                'withdrawals/{withdrawalId}': 1,
                'cancel/transfer-out': 1,
                'orders/{orderId}': 1,
                'orders': 4.44,
                'stopOrders': 1,
            },
        },
    },
    'precisionMode': TICK_SIZE,
    'exceptions': {
        'exact': {
            '400': BadRequest,  # Bad Request -- Invalid request format
            '401': AuthenticationError,  # Unauthorized -- Invalid API Key
            '403': NotSupported,  # Forbidden -- The request is forbidden
            '404': NotSupported,  # Not Found -- The specified resource could not be found
            '405': NotSupported,  # Method Not Allowed -- You tried to access the resource with an invalid method.
            '415': BadRequest,  # Content-Type -- application/json
            '429': RateLimitExceeded,  # Too Many Requests -- Access limit breached
            '500': ExchangeNotAvailable,  # Internal Server Error -- We had a problem with our server. Try again later.
            '503': ExchangeNotAvailable,  # Service Unavailable -- We're temporarily offline for maintenance. Please try again later.
            '100001': InvalidOrder,     # {"code":"100001","msg":"Unavailable to enable both \"postOnly\" and \"hidden\""}
            '100004': BadRequest,       # {"code":"100004","msg":"Order is in not cancelable state"}
            '101030': PermissionDenied,  # {"code":"101030","msg":"You haven't yet enabled the margin trading"}
            '200004': InsufficientFunds,
            '230003': InsufficientFunds,  # {"code":"230003","msg":"Balance insufficient!"}
            '260100': InsufficientFunds,  # {"code":"260100","msg":"account.noBalance"}
            '300003': InsufficientFunds,
            '300012': InvalidOrder,
            '400001': AuthenticationError,  # Any of KC-API-KEY, KC-API-SIGN, KC-API-TIMESTAMP, KC-API-PASSPHRASE is missing in your request header.
            '400002': InvalidNonce,  # KC-API-TIMESTAMP Invalid -- Time differs from server time by more than 5 seconds
            '400003': AuthenticationError,  # KC-API-KEY not exists
            '400004': AuthenticationError,  # KC-API-PASSPHRASE error
            '400005': AuthenticationError,  # Signature error -- Please check your signature
            '400006': AuthenticationError,  # The IP address is not in the API whitelist
            '400007': AuthenticationError,  # Access Denied -- Your API key does not have sufficient permissions to access the URI
            '404000': NotSupported,  # URL Not Found -- The requested resource could not be found
            '400100': BadRequest,  # Parameter Error -- You tried to access the resource with invalid parameters
            '411100': AccountSuspended,  # User is frozen -- Please contact us via support center
            '500000': ExchangeNotAvailable,  # Internal Server Error -- We had a problem with our server. Try again later.
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.0006'),
            'maker': self.parse_number('0.0002'),
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.0006')],
                    [self.parse_number('50'), self.parse_number('0.0006')],
                    [self.parse_number('200'), self.parse_number('0.0006')],
                    [self.parse_number('500'), self.parse_number('0.0005')],
                    [self.parse_number('1000'), self.parse_number('0.0004')],
                    [self.parse_number('2000'), self.parse_number('0.0004')],
                    [self.parse_number('4000'), self.parse_number('0.00038')],
                    [self.parse_number('8000'), self.parse_number('0.00035')],
                    [self.parse_number('15000'), self.parse_number('0.00032')],
                    [self.parse_number('25000'), self.parse_number('0.0003')],
                    [self.parse_number('40000'), self.parse_number('0.0003')],
                    [self.parse_number('60000'), self.parse_number('0.0003')],
                    [self.parse_number('80000'), self.parse_number('0.0003')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.02')],
                    [self.parse_number('50'), self.parse_number('0.015')],
                    [self.parse_number('200'), self.parse_number('0.01')],
                    [self.parse_number('500'), self.parse_number('0.01')],
                    [self.parse_number('1000'), self.parse_number('0.01')],
                    [self.parse_number('2000'), self.parse_number('0')],
                    [self.parse_number('4000'), self.parse_number('0')],
                    [self.parse_number('8000'), self.parse_number('0')],
                    [self.parse_number('15000'), self.parse_number('-0.003')],
                    [self.parse_number('25000'), self.parse_number('-0.006')],
                    [self.parse_number('40000'), self.parse_number('-0.009')],
                    [self.parse_number('60000'), self.parse_number('-0.012')],
                    [self.parse_number('80000'), self.parse_number('-0.015')],
                ],
            },
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {},
            'deposit': {},
        },
    },
    'commonCurrencies': {
        'HOT': 'HOTNOW',
        'EDGE': 'DADI',  # https://github.com/ccxt/ccxt/issues/5756
        'WAX': 'WAXP',
        'TRY': 'Trias',
        'VAI': 'VAIOT',
        'XBT': 'BTC',
    },
    'timeframes': {
        '1m': 1,
        '3m': None,
        '5m': 5,
        '15m': 15,
        '30m': 30,
        '1h': 60,
        '2h': 120,
        '4h': 240,
        '6h': None,
        '8h': 480,
        '12h': 720,
        '1d': 1440,
        '1w': 10080,
    },
    'options': {
        'version': 'v1',
        'symbolSeparator': '-',
        'defaultType': 'swap',
        'marginTypes': {},
        # endpoint versions
        'versions': {
            'futuresPrivate': {
                'POST': {
                    'transfer-out': 'v2',
                },
            },
            'futuresPublic': {
                'GET': {
                    'level3/snapshot': 'v2',
                },
            },
        },
        'networks': {
            'OMNI': 'omni',
            'ERC20': 'eth',
            'TRC20': 'trx',
        },
        # 'code': 'BTC',
        # 'fetchBalance': {
        #    'code': 'BTC',
        # },
    },
},
{
    'id': 'liquid',
    'name': 'Liquid',
    'countries': ['JP', 'CN', 'TW'],
    'version': '2',
    'rateLimit': 1000,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but not fully implemented
        'swap': None,  # has but not fully implemented
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/45798859-1a872600-bcb4-11e8-8746-69291ce87b04.jpg',
        'api': 'https://api.liquid.com',
        'www': 'https://www.liquid.com',
        'doc': [
            'https://developers.liquid.com',
        ],
        'fees': 'https://help.liquid.com/getting-started-with-liquid/the-platform/fee-structure',
        'referral': 'https://www.liquid.com/sign-up/?affiliate=SbzC62lt30976',
    },
    'api': {
        'public': {
            'get': [
                'currencies',
                'products',
                'products/{id}',
                'products/{id}/price_levels',
                'executions',
                'ir_ladders/{currency}',
                'fees',  # add fetchFees, fetchTradingFees, fetchFundingFees
            ],
        },
        'private': {
            'get': [
                'accounts',  # undocumented https://github.com/ccxt/ccxt/pull/7493
                'accounts/balance',
                'accounts/main_asset',
                'accounts/{id}',
                'accounts/{currency}/reserved_balance_details',
                'crypto_accounts',  # add fetchAccounts
                'crypto_withdrawal',
                'crypto_withdrawals',
                'crypto_withdrawals/crypto_networks',
                'executions/me',
                'fiat_accounts',  # add fetchAccounts
                'fund_infos',  # add fetchDeposits
                'loan_bids',
                'loans',
                'orders',
                'orders/{id}',
                'orders/{id}/trades',  # add fetchOrderTrades
                'trades',
                'trades/{id}/loans',
                'trading_accounts',
                'trading_accounts/{id}',
                'transactions',
                'withdrawals',  # add fetchWithdrawals
                'user/fee_tier',
                'user/fees',
                'trading_accounts/{id}',
                'bank_accounts',
                'accounts/{currency}/reserved_balance_details',
            ],
            'post': [
                'crypto_withdrawals',
                'fund_infos',
                'fiat_accounts',
                'loan_bids',
                'orders',
                'withdrawals',
                'fees/estimate',
            ],
            'put': [
                'crypto_withdrawal/{id}/cancel',
                'loan_bids/{id}/close',
                'loans/{id}',
                'orders/{id}',  # add editOrder
                'orders/{id}/cancel',
                'trades/{id}',
                'trades/{id}/adjust_margin',
                'trades/{id}/close',
                'trades/close_all',
                'trading_accounts/{id}',
                'withdrawals/{id}/cancel',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': 0.0030,
            'maker': 0.0000,
            'tiers': {
                'perpetual': {
                    'maker': [
                        [0, 0.0000],
                        [25000, 0.0000],
                        [50000, -0.00025],
                        [100000, -0.00025],
                        [1000000, -0.00025],
                        [10000000, -0.00025],
                        [25000000, -0.00025],
                        [50000000, -0.00025],
                        [75000000, -0.00025],
                        [100000000, -0.00025],
                        [200000000, -0.00025],
                        [300000000, -0.00025],
                    ],
                    'taker': [
                        [0, 0.00120],
                        [25000, 0.00115],
                        [50000, 0.00110],
                        [100000, 0.00105],
                        [1000000, 0.00100],
                        [10000000, 0.00095],
                        [25000000, 0.00090],
                        [50000000, 0.00085],
                        [75000000, 0.00080],
                        [100000000, 0.00075],
                        [200000000, 0.00070],
                        [300000000, 0.00065],
                    ],
                },
                'spot': {
                    'taker': [
                        [0, 0.003],
                        [10000, 0.0029],
                        [20000, 0.0028],
                        [50000, 0.0026],
                        [100000, 0.0020],
                        [1000000, 0.0016],
                        [5000000, 0.0012],
                        [10000000, 0.0010],
                        [25000000, 0.0009],
                        [50000000, 0.0008],
                        [100000000, 0.0007],
                        [200000000, 0.0006],
                        [500000000, 0.0004],
                        [1000000000, 0.0003],
                    ],
                    'maker': [
                        [0, 0.0000],
                        [10000, 0.0020],
                        [20000, 0.0019],
                        [50000, 0.0018],
                        [100000, 0.0016],
                        [1000000, 0.0008],
                        [5000000, 0.0007],
                        [10000000, 0.0005],
                        [25000000, 0.0000],
                        [50000000, 0.0000],
                        [100000000, 0.0000],
                        [200000000, 0.0000],
                        [500000000, 0.0000],
                        [1000000000, 0.0000],
                    ],
                },
            },
        },
    },
    'precisionMode': TICK_SIZE,
    'exceptions': {
        'API rate limit exceeded. Please retry after 300s': DDoSProtection,
        'API Authentication failed': AuthenticationError,
        'Nonce is too small': InvalidNonce,
        'Order not found': OrderNotFound,
        'Can not update partially filled order': InvalidOrder,
        'Can not update non-live order': OrderNotFound,
        'not_enough_free_balance': InsufficientFunds,
        'must_be_positive': InvalidOrder,
        'less_than_order_size': InvalidOrder,
        'price_too_high': InvalidOrder,
        'price_too_small': InvalidOrder,  # {"errors":{"order":["price_too_small"]}}
        'product_disabled': BadSymbol,  # {"errors":{"order":["product_disabled"]}}
    },
    'commonCurrencies': {
        'BIFI': 'BIFIF',
        'HOT': 'HOT Token',
        'MIOTA': 'IOTA',  # https://github.com/ccxt/ccxt/issues/7487
        'P-BTC': 'BTC',
        'TON': 'Tokamak Network',
    },
    'options': {
        'cancelOrderException': True,
        'networks': {
            'ETH': 'ERC20',
            'TRX': 'TRC20',
            'XLM': 'Stellar',
            'ALGO': 'Algorand',
        },
        'swap': {
            'fetchMarkets': {
                'settlementCurrencies': ['BTC', 'ETH', 'XRP', 'QASH', 'USD', 'JPY', 'EUR', 'SGD', 'AUD'],
            },
        },
    },
},
{
    'id': 'timex',
    'name': 'TimeX',
    'countries': ['AU'],
    'version': 'v1',
    'rateLimit': 1500,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'editOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': True,  # maker fee only
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'timeframes': {
        '1m': 'I1',
        '5m': 'I5',
        '15m': 'I15',
        '30m': 'I30',
        '1h': 'H1',
        '2h': 'H2',
        '4h': 'H4',
        '6h': 'H6',
        '12h': 'H12',
        '1d': 'D1',
        '1w': 'W1',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/70423869-6839ab00-1a7f-11ea-8f94-13ae72c31115.jpg',
        'api': 'https://plasma-relay-backend.timex.io',
        'www': 'https://timex.io',
        'doc': 'https://docs.timex.io',
        'referral': 'https://timex.io/?refcode=1x27vNkTbP1uwkCck',
    },
    'api': {
        'custody': {
            'get': [
                'credentials',  # Get api key for address
                'credentials/h/{hash}',  # Get api key by hash
                'credentials/k/{key}',  # Get api key by key
                'credentials/me/address',  # Get api key by hash
                'deposit-addresses',  # Get deposit addresses list
                'deposit-addresses/h/{hash}',  # Get deposit address by hash
            ],
        },
        'history': {
            'get': [
                'orders',  # Gets historical orders
                'orders/details',  # Gets order details
                'orders/export/csv',  # Export orders to csv
                'trades',  # Gets historical trades
                'trades/export/csv',  # Export trades to csv
            ],
        },
        'currencies': {
            'get': [
                'a/{address}',  # Gets currency by address
                'i/{id}',  # Gets currency by id
                's/{symbol}',  # Gets currency by symbol
            ],
            'post': [
                'perform',  # Creates new currency
                'prepare',  # Prepare creates new currency
                'remove/perform',  # Removes currency by symbol
                's/{symbol}/remove/prepare',  # Prepare remove currency by symbol
                's/{symbol}/update/perform',  # Prepare update currency by symbol
                's/{symbol}/update/prepare',  # Prepare update currency by symbol
            ],
        },
        'markets': {
            'get': [
                'i/{id}',  # Gets market by id
                's/{symbol}',  # Gets market by symbol
            ],
            'post': [
                'perform',  # Creates new market
                'prepare',  # Prepare creates new market
                'remove/perform',  # Removes market by symbol
                's/{symbol}/remove/prepare',  # Prepare remove market by symbol
                's/{symbol}/update/perform',  # Prepare update market by symbol
                's/{symbol}/update/prepare',  # Prepare update market by symbol
            ],
        },
        'public': {
            'get': [
                'candles',  # Gets candles
                'currencies',  # Gets all the currencies
                'markets',  # Gets all the markets
                'orderbook',  # Gets orderbook
                'orderbook/raw',  # Gets raw orderbook
                'orderbook/v2',  # Gets orderbook v2
                'tickers',  # Gets all the tickers
                'trades',  # Gets trades
            ],
        },
        'statistics': {
            'get': [
                'address',  # calculateAddressStatistics
            ],
        },
        'trading': {
            'get': [
                'balances',  # Get trading balances for all(or selected) currencies
                'fees',  # Get trading fee rates for all(or selected) markets
                'orders',  # Gets open orders
            ],
            'post': [
                'orders',  # Create new order
                'orders/json',  # Create orders
            ],
            'put': [
                'orders',  # Cancel or update orders
                'orders/json',  # Update orders
            ],
            'delete': [
                'orders',  # Delete orders
                'orders/json',  # Delete orders
            ],
        },
        'tradingview': {
            'get': [
                'config',  # Gets config
                'history',  # Gets history
                'symbol_info',  # Gets symbol info
                'time',  # Gets time
            ],
        },
    },
    'exceptions': {
        'exact': {
            '0': ExchangeError,
            '1': NotSupported,
            '4000': BadRequest,
            '4001': BadRequest,
            '4002': InsufficientFunds,
            '4003': AuthenticationError,
            '4004': AuthenticationError,
            '4005': BadRequest,
            '4006': BadRequest,
            '4007': BadRequest,
            '4300': PermissionDenied,
            '4100': AuthenticationError,
            '4400': OrderNotFound,
            '5001': InvalidOrder,
            '5002': ExchangeError,
            '400': BadRequest,
            '401': AuthenticationError,
            '403': PermissionDenied,
            '404': OrderNotFound,
            '429': RateLimitExceeded,
            '500': ExchangeError,
            '503': ExchangeNotAvailable,
        },
        'broad': {
            'Insufficient': InsufficientFunds,
        },
    },
    'options': {
        'expireIn': 31536000,  # 365 × 24 × 60 × 60
        'fetchTickers': {
            'period': '1d',
        },
        'fetchTrades': {
            'sort': 'timestamp,asc',
        },
        'fetchMyTrades': {
            'sort': 'timestamp,asc',
        },
        'fetchOpenOrders': {
            'sort': 'createdAt,asc',
        },
        'fetchClosedOrders': {
            'sort': 'createdAt,asc',
        },
        'defaultSort': 'timestamp,asc',
        'defaultSortOrders': 'createdAt,asc',
    },
},
{
    'id': 'bitbank',
    'name': 'bitbank',
    'countries': ['JP'],
    'version': 'v1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchDepositAddress': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1min',
        '5m': '5min',
        '15m': '15min',
        '30m': '30min',
        '1h': '1hour',
        '4h': '4hour',
        '8h': '8hour',
        '12h': '12hour',
        '1d': '1day',
        '1w': '1week',
    },
    'hostname': 'bitbank.cc',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/37808081-b87f2d9c-2e59-11e8-894d-c1900b7584fe.jpg',
        'api': {
            'public': 'https://public.{hostname}',
            'private': 'https://api.{hostname}',
            'markets': 'https://api.{hostname}',
        },
        'www': 'https://bitbank.cc/',
        'doc': 'https://docs.bitbank.cc/',
        'fees': 'https://bitbank.cc/docs/fees/',
    },
    'api': {
        'public': {
            'get': [
                '{pair}/ticker',
                '{pair}/depth',
                '{pair}/transactions',
                '{pair}/transactions/{yyyymmdd}',
                '{pair}/candlestick/{candletype}/{yyyymmdd}',
            ],
        },
        'private': {
            'get': [
                'user/assets',
                'user/spot/order',
                'user/spot/active_orders',
                'user/spot/trade_history',
                'user/withdrawal_account',
            ],
            'post': [
                'user/spot/order',
                'user/spot/cancel_order',
                'user/spot/cancel_orders',
                'user/spot/orders_info',
                'user/request_withdrawal',
            ],
        },
        'markets': {
            'get': [
                'spot/pairs',
            ],
        },
    },
    'exceptions': {
        '20001': AuthenticationError,
        '20002': AuthenticationError,
        '20003': AuthenticationError,
        '20005': AuthenticationError,
        '20004': InvalidNonce,
        '40020': InvalidOrder,
        '40021': InvalidOrder,
        '40025': ExchangeError,
        '40013': OrderNotFound,
        '40014': OrderNotFound,
        '50008': PermissionDenied,
        '50009': OrderNotFound,
        '50010': OrderNotFound,
        '60001': InsufficientFunds,
        '60005': InvalidOrder,
    },
},
{
    'id': 'coinbase',
    'name': 'Coinbase',
    'countries': ['US'],
    'rateLimit': 400,  # 10k calls per hour
    'version': 'v2',
    'userAgent': self.userAgents['chrome'],
    'headers': {
        'CB-VERSION': '2018-05-30',
    },
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': None,
        'createDepositAddress': True,
        'createOrder': None,
        'createReduceOnlyOrder': False,
        'deposit': None,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBidsAsks': None,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': None,
        'fetchCurrencies': True,
        'fetchDepositAddress': None,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchL2OrderBook': False,
        'fetchLedger': True,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyBuys': True,
        'fetchMySells': True,
        'fetchMyTrades': None,
        'fetchOHLCV': False,
        'fetchOpenOrders': None,
        'fetchOrder': None,
        'fetchOrderBook': False,
        'fetchOrders': None,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': None,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchTransactions': None,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': None,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/40811661-b6eceae2-653a-11e8-829e-10bfadb078cf.jpg',
        'api': 'https://api.coinbase.com',
        'www': 'https://www.coinbase.com',
        'doc': 'https://developers.coinbase.com/api/v2',
        'fees': 'https://support.coinbase.com/customer/portal/articles/2109597-buy-sell-bank-transfer-fees',
        'referral': 'https://www.coinbase.com/join/58cbe25a355148797479dbd2',
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'api': {
        'public': {
            'get': [
                'currencies',
                'time',
                'exchange-rates',
                'users/{user_id}',
                'prices/{symbol}/buy',
                'prices/{symbol}/sell',
                'prices/{symbol}/spot',
            ],
        },
        'private': {
            'get': [
                'accounts',
                'accounts/{account_id}',
                'accounts/{account_id}/addresses',
                'accounts/{account_id}/addresses/{address_id}',
                'accounts/{account_id}/addresses/{address_id}/transactions',
                'accounts/{account_id}/transactions',
                'accounts/{account_id}/transactions/{transaction_id}',
                'accounts/{account_id}/buys',
                'accounts/{account_id}/buys/{buy_id}',
                'accounts/{account_id}/sells',
                'accounts/{account_id}/sells/{sell_id}',
                'accounts/{account_id}/deposits',
                'accounts/{account_id}/deposits/{deposit_id}',
                'accounts/{account_id}/withdrawals',
                'accounts/{account_id}/withdrawals/{withdrawal_id}',
                'payment-methods',
                'payment-methods/{payment_method_id}',
                'user',
                'user/auth',
            ],
            'post': [
                'accounts',
                'accounts/{account_id}/primary',
                'accounts/{account_id}/addresses',
                'accounts/{account_id}/transactions',
                'accounts/{account_id}/transactions/{transaction_id}/complete',
                'accounts/{account_id}/transactions/{transaction_id}/resend',
                'accounts/{account_id}/buys',
                'accounts/{account_id}/buys/{buy_id}/commit',
                'accounts/{account_id}/sells',
                'accounts/{account_id}/sells/{sell_id}/commit',
                'accounts/{account_id}/deposists',
                'accounts/{account_id}/deposists/{deposit_id}/commit',
                'accounts/{account_id}/withdrawals',
                'accounts/{account_id}/withdrawals/{withdrawal_id}/commit',
            ],
            'put': [
                'accounts/{account_id}',
                'user',
            ],
            'delete': [
                'accounts/{id}',
                'accounts/{account_id}/transactions/{transaction_id}',
            ],
        },
    },
    'exceptions': {
        'exact': {
            'two_factor_required': AuthenticationError,  # 402 When sending money over 2fa limit
            'param_required': ExchangeError,  # 400 Missing parameter
            'validation_error': ExchangeError,  # 400 Unable to validate POST/PUT
            'invalid_request': ExchangeError,  # 400 Invalid request
            'personal_details_required': AuthenticationError,  # 400 User’s personal detail required to complete self request
            'identity_verification_required': AuthenticationError,  # 400 Identity verification is required to complete self request
            'jumio_verification_required': AuthenticationError,  # 400 Document verification is required to complete self request
            'jumio_face_match_verification_required': AuthenticationError,  # 400 Document verification including face match is required to complete self request
            'unverified_email': AuthenticationError,  # 400 User has not verified their email
            'authentication_error': AuthenticationError,  # 401 Invalid auth(generic)
            'invalid_authentication_method': AuthenticationError,  # 401 API access is blocked for deleted users.
            'invalid_token': AuthenticationError,  # 401 Invalid Oauth token
            'revoked_token': AuthenticationError,  # 401 Revoked Oauth token
            'expired_token': AuthenticationError,  # 401 Expired Oauth token
            'invalid_scope': AuthenticationError,  # 403 User hasn’t authenticated necessary scope
            'not_found': ExchangeError,  # 404 Resource not found
            'rate_limit_exceeded': RateLimitExceeded,  # 429 Rate limit exceeded
            'internal_server_error': ExchangeError,  # 500 Internal server error
        },
        'broad': {
            'request timestamp expired': InvalidNonce,  # {"errors":[{"id":"authentication_error","message":"request timestamp expired"}]}
        },
    },
    'commonCurrencies': {
        'CGLD': 'CELO',
    },
    'options': {
        'fetchCurrencies': {
            'expires': 5000,
        },
        'accounts': [
            'wallet',
            'fiat',
            # 'vault',
        ],
    },
},
{
    'id': 'novadax',
    'name': 'NovaDAX',
    'countries': ['BR'],  # Brazil
    'rateLimit': 50,
    'version': 'v1',
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistories': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': 'ONE_MIN',
        '5m': 'FIVE_MIN',
        '15m': 'FIFTEEN_MIN',
        '30m': 'HALF_HOU',
        '1h': 'ONE_HOU',
        '1d': 'ONE_DAY',
        '1w': 'ONE_WEE',
        '1M': 'ONE_MON',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/92337550-2b085500-f0b3-11ea-98e7-5794fb07dd3b.jpg',
        'api': {
            'public': 'https://api.novadax.com',
            'private': 'https://api.novadax.com',
        },
        'www': 'https://www.novadax.com.br',
        'doc': [
            'https://doc.novadax.com/pt-BR/',
        ],
        'fees': 'https://www.novadax.com.br/fees-and-limits',
        'referral': 'https://www.novadax.com.br/?s=ccxt',
    },
    'api': {
        'public': {
            'get': [
                'common/symbol',
                'common/symbols',
                'common/timestamp',
                'market/tickers',
                'market/ticker',
                'market/depth',
                'market/trades',
                'market/kline/history',
            ],
        },
        'private': {
            'get': [
                'orders/get',
                'orders/list',
                'orders/fill',
                'orders/fills',
                'account/getBalance',
                'account/subs',
                'account/subs/balance',
                'account/subs/transfer/record',
                'wallet/query/deposit-withdraw',
            ],
            'post': [
                'orders/create',
                'orders/cancel',
                'account/withdraw/coin',
                'account/subs/transfer',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.005'),
            'maker': self.parse_number('0.003'),
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'exceptions': {
        'exact': {
            'A99999': ExchangeError,  # 500 Failed Internal error
            # 'A10000': ExchangeError,  # 200 Success Successful request
            'A10001': BadRequest,  # 400 Params error Parameter is invalid
            'A10002': ExchangeError,  # 404 Api not found API used is irrelevant
            'A10003': AuthenticationError,  # 403 Authentication failed Authentication is failed
            'A10004': RateLimitExceeded,  # 429 Too many requests Too many requests are made
            'A10005': PermissionDenied,  # 403 Kyc required Need to complete KYC firstly
            'A10006': AccountSuspended,  # 403 Customer canceled Account is canceled
            'A10007': BadRequest,  # 400 Account not exist Sub account does not exist
            'A10011': BadSymbol,  # 400 Symbol not exist Trading symbol does not exist
            'A10012': BadSymbol,  # 400 Symbol not trading Trading symbol is temporarily not available
            'A10013': OnMaintenance,  # 503 Symbol maintain Trading symbol is in maintain
            'A30001': OrderNotFound,  # 400 Order not found Queried order is not found
            'A30002': InvalidOrder,  # 400 Order amount is too small Order amount is too small
            'A30003': InvalidOrder,  # 400 Order amount is invalid Order amount is invalid
            'A30004': InvalidOrder,  # 400 Order value is too small Order value is too small
            'A30005': InvalidOrder,  # 400 Order value is invalid Order value is invalid
            'A30006': InvalidOrder,  # 400 Order price is invalid Order price is invalid
            'A30007': InsufficientFunds,  # 400 Insufficient balance The balance is insufficient
            'A30008': InvalidOrder,  # 400 Order was closed The order has been executed
            'A30009': InvalidOrder,  # 400 Order canceled The order has been cancelled
            'A30010': CancelPending,  # 400 Order cancelling The order is being cancelled
            'A30011': InvalidOrder,  # 400 Order price too high The order price is too high
            'A30012': InvalidOrder,  # 400 Order price too low The order price is too low
        },
        'broad': {
        },
    },
    'options': {
        'fetchOHLCV': {
            'volume': 'amount',  # 'amount' for base volume or 'vol' for quote volume
        },
    },
},
{
    'id': 'deribit',
    'name': 'Deribit',
    'countries': ['NL'],  # Netherlands
    'version': 'v2',
    'userAgent': None,
    # 20 requests per second for non-matching-engine endpoints, 1000ms / 20 = 50ms between requests
    # 5 requests per second for matching-engine endpoints, cost = (1000ms / rateLimit) / 5 = 4
    'rateLimit': 50,
    'has': {
        'CORS': True,
        'spot': False,
        'margin': False,
        'swap': None,
        'future': None,
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchHistoricalVolatility': True,
        'fetchIndexOHLCV': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': None,
        'fetchOrderTrades': True,
        'fetchPosition': True,
        'fetchPositions': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTransactions': None,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1',
        '3m': '3',
        '5m': '5',
        '10m': '10',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '120',
        '3h': '180',
        '6h': '360',
        '12h': '720',
        '1d': '1D',
    },
    'urls': {
        'test': 'https://test.deribit.com',
        'logo': 'https://user-images.githubusercontent.com/1294454/41933112-9e2dd65a-798b-11e8-8440-5bab2959fcb8.jpg',
        'api': 'https://www.deribit.com',
        'www': 'https://www.deribit.com',
        'doc': [
            'https://docs.deribit.com/v2',
            'https://github.com/deribit',
        ],
        'fees': 'https://www.deribit.com/pages/information/fees',
        'referral': {
            'url': 'https://www.deribit.com/reg-1189.4038',
            'discount': 0.1,
        },
    },
    'api': {
        'public': {
            'get': {
                # Authentication
                'auth': 1,
                'exchange_token': 1,
                'fork_token': 1,
                # Session management
                'set_heartbeat': 1,
                'disable_heartbeat': 1,
                # Supporting
                'get_time': 1,
                'hello': 1,
                'test': 1,
                # Subscription management
                'subscribe': 1,
                'unsubscribe': 1,
                'unsubscribe_all': 1,
                # Account management
                'get_announcements': 1,
                # Market data
                'get_book_summary_by_currency': 1,
                'get_book_summary_by_instrument': 1,
                'get_contract_size': 1,
                'get_currencies': 1,
                'get_delivery_prices': 1,
                'get_funding_chart_data': 1,
                'get_funding_rate_history': 1,
                'get_funding_rate_value': 1,
                'get_historical_volatility': 1,
                'get_index': 1,
                'get_index_price': 1,
                'get_index_price_names': 1,
                'get_instrument': 1,
                'get_instruments': 1,
                'get_last_settlements_by_currency': 1,
                'get_last_settlements_by_instrument': 1,
                'get_last_trades_by_currency': 1,
                'get_last_trades_by_currency_and_time': 1,
                'get_last_trades_by_instrument': 1,
                'get_last_trades_by_instrument_and_time': 1,
                'get_mark_price_history': 1,
                'get_order_book': 1,
                'get_trade_volumes': 1,
                'get_tradingview_chart_data': 1,
                'get_volatility_index_data': 1,
                'ticker': 1,
            },
        },
        'private': {
            'get': {
                # Authentication
                'logout': 1,
                # Session management
                'enable_cancel_on_disconnect': 1,
                'disable_cancel_on_disconnect': 1,
                'get_cancel_on_disconnect': 1,
                # Subscription management
                'subscribe': 1,
                'unsubscribe': 1,
                'unsubscribe_all': 1,
                # Account management
                'change_api_key_name': 1,
                'change_scope_in_api_key': 1,
                'change_subaccount_name': 1,
                'create_api_key': 1,
                'create_subaccount': 1,
                'disable_api_key': 1,
                'disable_tfa_for_subaccount': 1,
                'enable_affiliate_program': 1,
                'enable_api_key': 1,
                'get_access_log': 1,
                'get_account_summary': 1,
                'get_affiliate_program_info': 1,
                'get_email_language': 1,
                'get_new_announcements': 1,
                'get_portfolio_margins': 1,
                'get_position': 1,
                'get_positions': 1,
                'get_subaccounts': 1,
                'get_subaccounts_details': 1,
                'get_transaction_log': 1,
                'list_api_keys': 1,
                'remove_api_key': 1,
                'remove_subaccount': 1,
                'reset_api_key': 1,
                'set_announcement_as_read': 1,
                'set_api_key_as_default': 1,
                'set_email_for_subaccount': 1,
                'set_email_language': 1,
                'set_password_for_subaccount': 1,
                'toggle_notifications_from_subaccount': 1,
                'toggle_subaccount_login': 1,
                # Block Trade
                'execute_block_trade': 4,
                'get_block_trade': 1,
                'get_last_block_trades_by_currency': 1,
                'invalidate_block_trade_signature': 1,
                'verify_block_trade': 4,
                # Trading
                'buy': 4,
                'sell': 4,
                'edit': 4,
                'edit_by_label': 4,
                'cancel': 4,
                'cancel_all': 4,
                'cancel_all_by_currency': 4,
                'cancel_all_by_instrument': 4,
                'cancel_by_label': 4,
                'close_position': 4,
                'get_margins': 1,
                'get_mmp_config': 1,
                'get_open_orders_by_currency': 1,
                'get_open_orders_by_instrument': 1,
                'get_order_history_by_currency': 1,
                'get_order_history_by_instrument': 1,
                'get_order_margin_by_ids': 1,
                'get_order_state': 1,
                'get_stop_order_history': 1,  # deprecated
                'get_trigger_order_history': 1,
                'get_user_trades_by_currency': 1,
                'get_user_trades_by_currency_and_time': 1,
                'get_user_trades_by_instrument': 1,
                'get_user_trades_by_instrument_and_time': 1,
                'get_user_trades_by_order': 1,
                'reset_mmp': 1,
                'set_mmp_config': 1,
                'get_settlement_history_by_instrument': 1,
                'get_settlement_history_by_currency': 1,
                # Wallet
                'cancel_transfer_by_id': 1,
                'cancel_withdrawal': 1,
                'create_deposit_address': 1,
                'get_current_deposit_address': 1,
                'get_deposits': 1,
                'get_transfers': 1,
                'get_withdrawals': 1,
                'submit_transfer_to_subaccount': 1,
                'submit_transfer_to_user': 1,
                'withdraw': 1,
            },
        },
    },
    'exceptions': {
        # 0 or absent Success, No error.
        '9999': PermissionDenied,  # 'api_not_enabled' User didn't enable API for the Account.
        '10000': AuthenticationError,  # 'authorization_required' Authorization issue, invalid or absent signature etc.
        '10001': ExchangeError,  # 'error' Some general failure, no public information available.
        '10002': InvalidOrder,  # 'qty_too_low' Order quantity is too low.
        '10003': InvalidOrder,  # 'order_overlap' Rejection, order overlap is found and self-trading is not enabled.
        '10004': OrderNotFound,  # 'order_not_found' Attempt to operate with order that can't be found by specified id.
        '10005': InvalidOrder,  # 'price_too_low <Limit>' Price is too low, <Limit> defines current limit for the operation.
        '10006': InvalidOrder,  # 'price_too_low4idx <Limit>' Price is too low for current index, <Limit> defines current bottom limit for the operation.
        '10007': InvalidOrder,  # 'price_too_high <Limit>' Price is too high, <Limit> defines current up limit for the operation.
        '10008': InvalidOrder,  # 'price_too_high4idx <Limit>' Price is too high for current index, <Limit> defines current up limit for the operation.
        '10009': InsufficientFunds,  # 'not_enough_funds' Account has not enough funds for the operation.
        '10010': OrderNotFound,  # 'already_closed' Attempt of doing something with closed order.
        '10011': InvalidOrder,  # 'price_not_allowed' This price is not allowed for some reason.
        '10012': InvalidOrder,  # 'book_closed' Operation for instrument which order book had been closed.
        '10013': PermissionDenied,  # 'pme_max_total_open_orders <Limit>' Total limit of open orders has been exceeded, it is applicable for PME users.
        '10014': PermissionDenied,  # 'pme_max_future_open_orders <Limit>' Limit of count of futures' open orders has been exceeded, it is applicable for PME users.
        '10015': PermissionDenied,  # 'pme_max_option_open_orders <Limit>' Limit of count of options' open orders has been exceeded, it is applicable for PME users.
        '10016': PermissionDenied,  # 'pme_max_future_open_orders_size <Limit>' Limit of size for futures has been exceeded, it is applicable for PME users.
        '10017': PermissionDenied,  # 'pme_max_option_open_orders_size <Limit>' Limit of size for options has been exceeded, it is applicable for PME users.
        '10018': PermissionDenied,  # 'non_pme_max_future_position_size <Limit>' Limit of size for futures has been exceeded, it is applicable for non-PME users.
        '10019': PermissionDenied,  # 'locked_by_admin' Trading is temporary locked by admin.
        '10020': ExchangeError,  # 'invalid_or_unsupported_instrument' Instrument name is not valid.
        '10021': InvalidOrder,  # 'invalid_amount' Amount is not valid.
        '10022': InvalidOrder,  # 'invalid_quantity' quantity was not recognized as a valid number(for API v1).
        '10023': InvalidOrder,  # 'invalid_price' price was not recognized as a valid number.
        '10024': InvalidOrder,  # 'invalid_max_show' max_show parameter was not recognized as a valid number.
        '10025': InvalidOrder,  # 'invalid_order_id' Order id is missing or its format was not recognized as valid.
        '10026': InvalidOrder,  # 'price_precision_exceeded' Extra precision of the price is not supported.
        '10027': InvalidOrder,  # 'non_integer_contract_amount' Futures contract amount was not recognized as integer.
        '10028': DDoSProtection,  # 'too_many_requests' Allowed request rate has been exceeded.
        '10029': OrderNotFound,  # 'not_owner_of_order' Attempt to operate with not own order.
        '10030': ExchangeError,  # 'must_be_websocket_request' REST request where Websocket is expected.
        '10031': ExchangeError,  # 'invalid_args_for_instrument' Some of arguments are not recognized as valid.
        '10032': InvalidOrder,  # 'whole_cost_too_low' Total cost is too low.
        '10033': NotSupported,  # 'not_implemented' Method is not implemented yet.
        '10034': InvalidOrder,  # 'stop_price_too_high' Stop price is too high.
        '10035': InvalidOrder,  # 'stop_price_too_low' Stop price is too low.
        '10036': InvalidOrder,  # 'invalid_max_show_amount' Max Show Amount is not valid.
        '10040': ExchangeNotAvailable,  # 'retry' Request can't be processed right now and should be retried.
        '10041': OnMaintenance,  # 'settlement_in_progress' Settlement is in progress. Every day at settlement time for several seconds, the system calculates user profits and updates balances. That time trading is paused for several seconds till the calculation is completed.
        '10043': InvalidOrder,  # 'price_wrong_tick' Price has to be rounded to a certain tick size.
        '10044': InvalidOrder,  # 'stop_price_wrong_tick' Stop Price has to be rounded to a certain tick size.
        '10045': InvalidOrder,  # 'can_not_cancel_liquidation_order' Liquidation order can't be canceled.
        '10046': InvalidOrder,  # 'can_not_edit_liquidation_order' Liquidation order can't be edited.
        '10047': DDoSProtection,  # 'matching_engine_queue_full' Reached limit of pending Matching Engine requests for user.
        '10048': ExchangeError,  # 'not_on_self_server' The requested operation is not available on self server.
        '11008': InvalidOrder,  # 'already_filled' This request is not allowed in regards to the filled order.
        '11029': BadRequest,  # 'invalid_arguments' Some invalid input has been detected.
        '11030': ExchangeError,  # 'other_reject <Reason>' Some rejects which are not considered as very often, more info may be specified in <Reason>.
        '11031': ExchangeError,  # 'other_error <Error>' Some errors which are not considered as very often, more info may be specified in <Error>.
        '11035': DDoSProtection,  # 'no_more_stops <Limit>' Allowed amount of stop orders has been exceeded.
        '11036': InvalidOrder,  # 'invalid_stoppx_for_index_or_last' Invalid StopPx(too high or too low) as to current index or market.
        '11037': BadRequest,  # 'outdated_instrument_for_IV_order' Instrument already not available for trading.
        '11038': InvalidOrder,  # 'no_adv_for_futures' Advanced orders are not available for futures.
        '11039': InvalidOrder,  # 'no_adv_postonly' Advanced post-only orders are not supported yet.
        '11041': InvalidOrder,  # 'not_adv_order' Advanced order properties can't be set if the order is not advanced.
        '11042': PermissionDenied,  # 'permission_denied' Permission for the operation has been denied.
        '11043': BadRequest,  # 'bad_argument' Bad argument has been passed.
        '11044': InvalidOrder,  # 'not_open_order' Attempt to do open order operations with the not open order.
        '11045': BadRequest,  # 'invalid_event' Event name has not been recognized.
        '11046': BadRequest,  # 'outdated_instrument' At several minutes to instrument expiration, corresponding advanced implied volatility orders are not allowed.
        '11047': BadRequest,  # 'unsupported_arg_combination' The specified combination of arguments is not supported.
        '11048': ExchangeError,  # 'wrong_max_show_for_option' Wrong Max Show for options.
        '11049': BadRequest,  # 'bad_arguments' Several bad arguments have been passed.
        '11050': BadRequest,  # 'bad_request' Request has not been parsed properly.
        '11051': OnMaintenance,  # 'system_maintenance' System is under maintenance.
        '11052': ExchangeError,  # 'subscribe_error_unsubscribed' Subscription error. However, subscription may fail without self error, please check list of subscribed channels returned, as some channels can be not subscribed due to wrong input or lack of permissions.
        '11053': ExchangeError,  # 'transfer_not_found' Specified transfer is not found.
        '11090': InvalidAddress,  # 'invalid_addr' Invalid address.
        '11091': InvalidAddress,  # 'invalid_transfer_address' Invalid addres for the transfer.
        '11092': InvalidAddress,  # 'address_already_exist' The address already exists.
        '11093': DDoSProtection,  # 'max_addr_count_exceeded' Limit of allowed addresses has been reached.
        '11094': ExchangeError,  # 'internal_server_error' Some unhandled error on server. Please report to admin. The details of the request will help to locate the problem.
        '11095': ExchangeError,  # 'disabled_deposit_address_creation' Deposit address creation has been disabled by admin.
        '11096': ExchangeError,  # 'address_belongs_to_user' Withdrawal instead of transfer.
        '12000': AuthenticationError,  # 'bad_tfa' Wrong TFA code
        '12001': DDoSProtection,  # 'too_many_subaccounts' Limit of subbacounts is reached.
        '12002': ExchangeError,  # 'wrong_subaccount_name' The input is not allowed as name of subaccount.
        '12998': AuthenticationError,  # 'tfa_over_limit' The number of failed TFA attempts is limited.
        '12003': AuthenticationError,  # 'login_over_limit' The number of failed login attempts is limited.
        '12004': AuthenticationError,  # 'registration_over_limit' The number of registration requests is limited.
        '12005': AuthenticationError,  # 'country_is_banned' The country is banned(possibly via IP check).
        '12100': ExchangeError,  # 'transfer_not_allowed' Transfer is not allowed. Possible wrong direction or other mistake.
        '12999': AuthenticationError,  # 'tfa_used' TFA code is correct but it is already used. Please, use next code.
        '13000': AuthenticationError,  # 'invalid_login' Login name is invalid(not allowed or it contains wrong characters).
        '13001': AuthenticationError,  # 'account_not_activated' Account must be activated.
        '13002': PermissionDenied,  # 'account_blocked' Account is blocked by admin.
        '13003': AuthenticationError,  # 'tfa_required' This action requires TFA authentication.
        '13004': AuthenticationError,  # 'invalid_credentials' Invalid credentials has been used.
        '13005': AuthenticationError,  # 'pwd_match_error' Password confirmation error.
        '13006': AuthenticationError,  # 'security_error' Invalid Security Code.
        '13007': AuthenticationError,  # 'user_not_found' User's security code has been changed or wrong.
        '13008': ExchangeError,  # 'request_failed' Request failed because of invalid input or internal failure.
        '13009': AuthenticationError,  # 'unauthorized' Wrong or expired authorization token or bad signature. For example, please check scope of the token, 'connection' scope can't be reused for other connections.
        '13010': BadRequest,  # 'value_required' Invalid input, missing value.
        '13011': BadRequest,  # 'value_too_short' Input is too short.
        '13012': PermissionDenied,  # 'unavailable_in_subaccount' Subaccount restrictions.
        '13013': BadRequest,  # 'invalid_phone_number' Unsupported or invalid phone number.
        '13014': BadRequest,  # 'cannot_send_sms' SMS sending failed -- phone number is wrong.
        '13015': BadRequest,  # 'invalid_sms_code' Invalid SMS code.
        '13016': BadRequest,  # 'invalid_input' Invalid input.
        '13017': ExchangeError,  # 'subscription_failed' Subscription hailed, invalid subscription parameters.
        '13018': ExchangeError,  # 'invalid_content_type' Invalid content type of the request.
        '13019': ExchangeError,  # 'orderbook_closed' Closed, expired order book.
        '13020': ExchangeError,  # 'not_found' Instrument is not found, invalid instrument name.
        '13021': PermissionDenied,  # 'forbidden' Not enough permissions to execute the request, forbidden.
        '13025': ExchangeError,  # 'method_switched_off_by_admin' API method temporarily switched off by administrator.
        '-32602': BadRequest,  # 'Invalid params' see JSON-RPC spec.
        '-32601': BadRequest,  # 'Method not found' see JSON-RPC spec.
        '-32700': BadRequest,  # 'Parse error' see JSON-RPC spec.
        '-32000': BadRequest,  # 'Missing params' see JSON-RPC spec.
    },
    'precisionMode': TICK_SIZE,
    'options': {
        'code': 'BTC',
        'fetchBalance': {
            'code': 'BTC',
        },
        'fetchPositions': {
            'code': 'BTC',
        },
    },
},
{
    'id': 'itbit',
    'name': 'itBit',
    'countries': ['US'],
    'rateLimit': 2000,
    'version': 'v1',
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchTransactions': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg',
        'api': 'https://api.itbit.com',
        'www': 'https://www.itbit.com',
        'doc': [
            'https://api.itbit.com/docs',
            'https://www.itbit.com/api',
        ],
    },
    'api': {
        'public': {
            'get': [
                'markets/{symbol}/ticker',
                'markets/{symbol}/order_book',
                'markets/{symbol}/trades',
            ],
        },
        'private': {
            'get': [
                'wallets',
                'wallets/{walletId}',
                'wallets/{walletId}/balances/{currencyCode}',
                'wallets/{walletId}/funding_history',
                'wallets/{walletId}/trades',
                'wallets/{walletId}/orders',
                'wallets/{walletId}/orders/{id}',
            ],
            'post': [
                'wallet_transfers',
                'wallets',
                'wallets/{walletId}/cryptocurrency_deposits',
                'wallets/{walletId}/cryptocurrency_withdrawals',
                'wallets/{walletId}/orders',
                'wire_withdrawal',
            ],
            'delete': [
                'wallets/{walletId}/orders/{id}',
            ],
        },
    },
    'markets': {
        'BTC/USD': {'id': 'XBTUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'baseId': 'XBT', 'quoteId': 'USD', 'type': 'spot', 'spot': True},
        'BTC/SGD': {'id': 'XBTSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD', 'baseId': 'XBT', 'quoteId': 'SGD', 'type': 'spot', 'spot': True},
        'BTC/EUR': {'id': 'XBTEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'XBT', 'quoteId': 'EUR', 'type': 'spot', 'spot': True},
        'ETH/USD': {'id': 'ETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'baseId': 'ETH', 'quoteId': 'USD', 'type': 'spot', 'spot': True},
        'ETH/EUR': {'id': 'ETHEUR', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR', 'baseId': 'ETH', 'quoteId': 'EUR', 'type': 'spot', 'spot': True},
        'ETH/SGD': {'id': 'ETHSGD', 'symbol': 'ETH/SGD', 'base': 'ETH', 'quote': 'SGD', 'baseId': 'ETH', 'quoteId': 'SGD', 'type': 'spot', 'spot': True},
        'PAXGUSD': {'id': 'PAXGUSD', 'symbol': 'PAXG/USD', 'base': 'PAXG', 'quote': 'USD', 'baseId': 'PAXG', 'quoteId': 'USD', 'type': 'spot', 'spot': True},
        'BCHUSD': {'id': 'BCHUSD', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD', 'baseId': 'BCH', 'quoteId': 'USD', 'type': 'spot', 'spot': True},
        'LTCUSD': {'id': 'LTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD', 'baseId': 'LTC', 'quoteId': 'USD', 'type': 'spot', 'spot': True},
    },
    'fees': {
        'trading': {
            'maker': -0.03 / 100,
            'taker': 0.35 / 100,
        },
    },
    'commonCurrencies': {
        'XBT': 'BTC',
    },
},
{
    'id': 'probit',
    'name': 'ProBit',
    'countries': ['SC', 'KR'],  # Seychelles, South Korea
    'rateLimit': 50,  # ms
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDepositAddresses': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'signIn': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '10m': '10m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '6h': '6h',
        '12h': '12h',
        '1d': '1D',
        '1w': '1W',
        '1M': '1M',
    },
    'version': 'v1',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/79268032-c4379480-7ea2-11ea-80b3-dd96bb29fd0d.jpg',
        'api': {
            'accounts': 'https://accounts.probit.com',
            'public': 'https://api.probit.com/api/exchange',
            'private': 'https://api.probit.com/api/exchange',
        },
        'www': 'https://www.probit.com',
        'doc': [
            'https://docs-en.probit.com',
            'https://docs-ko.probit.com',
        ],
        'fees': 'https://support.probit.com/hc/en-us/articles/360020968611-Trading-Fees',
        'referral': 'https://www.probit.com/r/34608773',
    },
    'api': {
        'public': {
            'get': {
                'market': 1,
                'currency': 1,
                'currency_with_platform': 1,
                'time': 1,
                'ticker': 1,
                'order_book': 1,
                'trade': 1,
                'candle': 1,
            },
        },
        'private': {
            'post': {
                'new_order': 2,
                'cancel_order': 1,
                'withdrawal': 2,
            },
            'get': {
                'balance': 1,
                'order': 1,
                'open_order': 1,
                'order_history': 1,
                'trade_history': 1,
                'deposit_address': 1,
            },
        },
        'accounts': {
            'post': {
                'token': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
    },
    'exceptions': {
        'exact': {
            'UNAUTHORIZED': AuthenticationError,
            'INVALID_ARGUMENT': BadRequest,  # Parameters are not a valid format, parameters are empty, or out of range, or a parameter was sent when not required.
            'TRADING_UNAVAILABLE': ExchangeNotAvailable,
            'NOT_ENOUGH_BALANCE': InsufficientFunds,
            'NOT_ALLOWED_COMBINATION': BadRequest,
            'INVALID_ORDER': InvalidOrder,  # Requested order does not exist, or it is not your order
            'RATE_LIMIT_EXCEEDED': RateLimitExceeded,  # You are sending requests too frequently. Please try it later.
            'MARKET_UNAVAILABLE': ExchangeNotAvailable,  # Market is closed today
            'INVALID_MARKET': BadSymbol,  # Requested market is not exist
            'MARKET_CLOSED': BadSymbol,  # {"errorCode":"MARKET_CLOSED"}
            'MARKET_NOT_FOUND': BadSymbol,  # {"errorCode":"MARKET_NOT_FOUND","message":"8e2b8496-0a1e-5beb-b990-a205b902eabe","details":{}}
            'INVALID_CURRENCY': BadRequest,  # Requested currency is not exist on ProBit system
            'TOO_MANY_OPEN_ORDERS': DDoSProtection,  # Too many open orders
            'DUPLICATE_ADDRESS': InvalidAddress,  # Address already exists in withdrawal address list
            'invalid_grant': AuthenticationError,  # {"error":"invalid_grant"}
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'precisionMode': TICK_SIZE,
    'options': {
        'createMarketBuyOrderRequiresPrice': True,
        'timeInForce': {
            'limit': 'gtc',
            'market': 'ioc',
        },
        'networks': {
            'BEP20': 'BSC',
            'ERC20': 'ETH',
            'TRC20': 'TRON',
            'TRX': 'TRON',
        },
    },
    'commonCurrencies': {
        'AUTO': 'Cube',
        'AZU': 'Azultec',
        'BCC': 'BCC',
        'BDP': 'BidiPass',
        'BIRD': 'Birdchain',
        'BTCBEAR': 'BEAR',
        'BTCBULL': 'BULL',
        'CBC': 'CryptoBharatCoin',
        'CHE': 'Chellit',
        'CLR': 'Color Platform',
        'CTK': 'Cryptyk',
        'DIP': 'Dipper',
        'EGC': 'EcoG9coin',
        'EPS': 'Epanus',  # conflict with EPS Ellipsis https://github.com/ccxt/ccxt/issues/8909
        'FX': 'Fanzy',
        'GDT': 'Gorilla Diamond',
        'GM': 'GM Holding',
        'GOGOL': 'GOL',
        'GOL': 'Goldofir',
        'GRB': 'Global Reward Bank',
        'HBC': 'Hybrid Bank Cash',
        'HUSL': 'The Hustle App',
        'LBK': 'Legal Block',
        'ORC': 'Oracle System',
        'PYE': 'CreamPYE',
        'ROOK': 'Reckoon',
        'SOC': 'Soda Coin',
        'SST': 'SocialSwap',
        'TCT': 'Top Coin Token',
        'TPAY': 'Tetra Pay',
        'UNI': 'UNICORN Token',
        'UNISWAP': 'UNI',
    },
},
{
    'id': 'okex',
    'alias': True,
},
{
    'id': 'bitbay',
    'alias': True,
},
{
    'id': 'btcturk',
    'name': 'BTCTurk',
    'countries': ['TR'],  # Turkey
    'rateLimit': 100,
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'timeframes': {
        '1d': '1d',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87153926-efbef500-c2c0-11ea-9842-05b63612c4b9.jpg',
        'api': {
            'public': 'https://api.btcturk.com/api/v2',
            'private': 'https://api.btcturk.com/api/v1',
            'graph': 'https://graph-api.btcturk.com/v1',
        },
        'www': 'https://www.btcturk.com',
        'doc': 'https://github.com/BTCTrader/broker-api-docs',
    },
    'api': {
        'public': {
            'get': {
                'orderbook': 1,
                'ticker': 0.1,
                'trades': 1,   # ?last=COUNT(max 50)
                'server/exchangeinfo': 1,
            },
        },
        'private': {
            'get': {
                'users/balances': 1,
                'openOrders': 1,
                'allOrders': 1,
                'users/transactions/trade': 1,
            },
            'post': {
                'order': 1,
                'cancelOrder': 1,
            },
            'delete': {
                'order': 1,
            },
        },
        'graph': {
            'get': {
                'ohlcs': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.0005'),
            'taker': self.parse_number('0.0009'),
        },
    },
    'exceptions': {
        'exact': {
            'FAILED_ORDER_WITH_OPEN_ORDERS': InsufficientFunds,
            'FAILED_LIMIT_ORDER': InvalidOrder,
            'FAILED_MARKET_ORDER': InvalidOrder,
        },
    },
},
{
    'id': 'coincheck',
    'name': 'coincheck',
    'countries': ['JP', 'ID'],
    'rateLimit': 1500,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87182088-1d6d6380-c2ec-11ea-9c64-8ab9f9b289f5.jpg',
        'api': 'https://coincheck.com/api',
        'www': 'https://coincheck.com',
        'doc': 'https://coincheck.com/documents/exchange/api',
        'fees': [
            'https://coincheck.com/exchange/fee',
            'https://coincheck.com/info/fee',
        ],
    },
    'api': {
        'public': {
            'get': [
                'exchange/orders/rate',
                'order_books',
                'rate/{pair}',
                'ticker',
                'trades',
            ],
        },
        'private': {
            'get': [
                'accounts',
                'accounts/balance',
                'accounts/leverage_balance',
                'bank_accounts',
                'deposit_money',
                'exchange/orders/opens',
                'exchange/orders/transactions',
                'exchange/orders/transactions_pagination',
                'exchange/leverage/positions',
                'lending/borrows/matches',
                'send_money',
                'withdraws',
            ],
            'post': [
                'bank_accounts',
                'deposit_money/{id}/fast',
                'exchange/orders',
                'exchange/transfers/to_leverage',
                'exchange/transfers/from_leverage',
                'lending/borrows',
                'lending/borrows/{id}/repay',
                'send_money',
                'withdraws',
            ],
            'delete': [
                'bank_accounts/{id}',
                'exchange/orders/{id}',
                'withdraws/{id}',
            ],
        },
    },
    'markets': {
        'BTC/JPY': {'id': 'btc_jpy', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY', 'baseId': 'btc', 'quoteId': 'jpy', 'type': 'spot', 'spot': True},  # the only real pair
        # 'ETH/JPY': {'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY', 'baseId': 'eth', 'quoteId': 'jpy'},
        'ETC/JPY': {'id': 'etc_jpy', 'symbol': 'ETC/JPY', 'base': 'ETC', 'quote': 'JPY', 'baseId': 'etc', 'quoteId': 'jpy', 'type': 'spot', 'spot': True},
        # 'DAO/JPY': {'id': 'dao_jpy', 'symbol': 'DAO/JPY', 'base': 'DAO', 'quote': 'JPY', 'baseId': 'dao', 'quoteId': 'jpy'},
        # 'LSK/JPY': {'id': 'lsk_jpy', 'symbol': 'LSK/JPY', 'base': 'LSK', 'quote': 'JPY', 'baseId': 'lsk', 'quoteId': 'jpy'},
        'FCT/JPY': {'id': 'fct_jpy', 'symbol': 'FCT/JPY', 'base': 'FCT', 'quote': 'JPY', 'baseId': 'fct', 'quoteId': 'jpy', 'type': 'spot', 'spot': True},
        'MONA/JPY': {'id': 'mona_jpy', 'symbol': 'MONA/JPY', 'base': 'MONA', 'quote': 'JPY', 'baseId': 'mona', 'quoteId': 'jpy', 'type': 'spot', 'spot': True},
        # 'XMR/JPY': {'id': 'xmr_jpy', 'symbol': 'XMR/JPY', 'base': 'XMR', 'quote': 'JPY', 'baseId': 'xmr', 'quoteId': 'jpy'},
        # 'REP/JPY': {'id': 'rep_jpy', 'symbol': 'REP/JPY', 'base': 'REP', 'quote': 'JPY', 'baseId': 'rep', 'quoteId': 'jpy'},
        # 'XRP/JPY': {'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY', 'baseId': 'xrp', 'quoteId': 'jpy'},
        # 'ZEC/JPY': {'id': 'zec_jpy', 'symbol': 'ZEC/JPY', 'base': 'ZEC', 'quote': 'JPY', 'baseId': 'zec', 'quoteId': 'jpy'},
        # 'XEM/JPY': {'id': 'xem_jpy', 'symbol': 'XEM/JPY', 'base': 'XEM', 'quote': 'JPY', 'baseId': 'xem', 'quoteId': 'jpy'},
        # 'LTC/JPY': {'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY', 'baseId': 'ltc', 'quoteId': 'jpy'},
        # 'DASH/JPY': {'id': 'dash_jpy', 'symbol': 'DASH/JPY', 'base': 'DASH', 'quote': 'JPY', 'baseId': 'dash', 'quoteId': 'jpy'},
        # 'ETH/BTC': {'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc'},
        'ETC/BTC': {'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC', 'baseId': 'etc', 'quoteId': 'btc', 'type': 'spot', 'spot': True},
        # 'LSK/BTC': {'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC', 'baseId': 'lsk', 'quoteId': 'btc'},
        # 'FCT/BTC': {'id': 'fct_btc', 'symbol': 'FCT/BTC', 'base': 'FCT', 'quote': 'BTC', 'baseId': 'fct', 'quoteId': 'btc'},
        # 'XMR/BTC': {'id': 'xmr_btc', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC', 'baseId': 'xmr', 'quoteId': 'btc'},
        # 'REP/BTC': {'id': 'rep_btc', 'symbol': 'REP/BTC', 'base': 'REP', 'quote': 'BTC', 'baseId': 'rep', 'quoteId': 'btc'},
        # 'XRP/BTC': {'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc'},
        # 'ZEC/BTC': {'id': 'zec_btc', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC', 'baseId': 'zec', 'quoteId': 'btc'},
        # 'XEM/BTC': {'id': 'xem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC', 'baseId': 'xem', 'quoteId': 'btc'},
        # 'LTC/BTC': {'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc'},
        # 'DASH/BTC': {'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'dash', 'quoteId': 'btc'},
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0'),
            'taker': self.parse_number('0'),
        },
    },
    'exceptions': {
        'exact': {
            'disabled API Key': AuthenticationError,  # {"success":false,"error":"disabled API Key"}'
            'invalid authentication': AuthenticationError,  # {"success":false,"error":"invalid authentication"}
        },
        'broad': {},
    },
},
{
    'id': 'bitstamp1',
    'name': 'Bitstamp',
    'countries': ['GB'],
    'rateLimit': 1000,
    'version': 'v1',
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',
        'api': 'https://www.bitstamp.net/api',
        'www': 'https://www.bitstamp.net',
        'doc': 'https://www.bitstamp.net/api',
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'uid': True,
    },
    'api': {
        'public': {
            'get': [
                'ticker',
                'ticker_hour',
                'order_book',
                'transactions',
                'eur_usd',
            ],
        },
        'private': {
            'post': [
                'balance',
                'user_transactions',
                'open_orders',
                'order_status',
                'cancel_order',
                'cancel_all_orders',
                'buy',
                'sell',
                'bitcoin_deposit_address',
                'unconfirmed_btc',
                'ripple_withdrawal',
                'ripple_address',
                'withdrawal_requests',
                'bitcoin_withdrawal',
            ],
        },
    },
    'markets': {
        'BTC/USD': {'id': 'btcusd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'baseId': 'btc', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'BTC/EUR': {'id': 'btceur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'btc', 'quoteId': 'eur', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'EUR/USD': {'id': 'eurusd', 'symbol': 'EUR/USD', 'base': 'EUR', 'quote': 'USD', 'baseId': 'eur', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'XRP/USD': {'id': 'xrpusd', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD', 'baseId': 'xrp', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'XRP/EUR': {'id': 'xrpeur', 'symbol': 'XRP/EUR', 'base': 'XRP', 'quote': 'EUR', 'baseId': 'xrp', 'quoteId': 'eur', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'XRP/BTC': {'id': 'xrpbtc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'LTC/USD': {'id': 'ltcusd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD', 'baseId': 'ltc', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'LTC/EUR': {'id': 'ltceur', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR', 'baseId': 'ltc', 'quoteId': 'eur', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'LTC/BTC': {'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'ETH/USD': {'id': 'ethusd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'baseId': 'eth', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'ETH/EUR': {'id': 'etheur', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR', 'baseId': 'eth', 'quoteId': 'eur', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
        'ETH/BTC': {'id': 'ethbtc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc', 'maker': 0.005, 'taker': 0.005, 'type': 'spot', 'spot': True},
    },
},
{
    'id': 'wazirx',
    'name': 'WazirX',
    'countries': ['IN'],
    'version': 'v2',
    'rateLimit': 100,
    'has': {
        'CORS': False,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': False,
        'future': False,
        'option': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchBidsAsks': False,
        'fetchClosedOrders': False,
        'fetchCurrencies': False,
        'fetchDepositAddress': False,
        'fetchDepositAddressesByNetwork': False,
        'fetchDeposits': True,
        'fetchFundingFees': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': False,
        'fetchOHLCV': False,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchTransactions': False,
        'fetchTransfers': False,
        'fetchWithdrawals': False,
        'transfer': False,
        'withdraw': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/148647666-c109c20b-f8ac-472f-91c3-5f658cb90f49.jpeg',
        'api': 'https://api.wazirx.com/sapi/v1',
        'www': 'https://wazirx.com',
        'doc': 'https://docs.wazirx.com/#public-rest-api-for-wazirx',
        'fees': 'https://wazirx.com/fees',
        'referral': 'https://wazirx.com/invite/k7rrnks5',
    },
    'api': {
        'public': {
            'get': {
                'exchangeInfo': 1,
                'depth': 1,
                'ping': 1,
                'systemStatus': 1,
                'tickers/24hr': 1,
                'ticker/24hr': 1,
                'time': 1,
                'trades': 1,
            },
        },
        'private': {
            'get': {
                'account': 1,
                'allOrders': 1,
                'funds': 1,
                'historicalTrades': 1,
                'openOrders': 1,
                'order': 1,
                'myTrades': 1,
            },
            'post': {
                'order': 1,
                'order/test': 1,
            },
            'delete': {
                'order': 1,
                'openOrders': 1,
            },
        },
    },
    'fees': {
        'WRX': {'maker': self.parse_number('0.0'), 'taker': self.parse_number('0.0')},
    },
    'exceptions': {
        'exact': {
            '-1121': BadSymbol,  # {"code": -1121, "message": "Invalid symbol."}
            '1999': BadRequest,  # {"code":1999,"message":"symbol is missing, symbol does not have a valid value"} message varies depending on the error
            '2002': InsufficientFunds,  # {"code":2002,"message":"Not enough USDT balance to execute self order"}
            '2005': BadRequest,  # {"code":2005,"message":"Signature is incorrect."}
            '2078': PermissionDenied,  # {"code":2078,"message":"Permission denied."}
            '2098': BadRequest,  # {"code":2098,"message":"Request out of receiving window."}
            '2031': InvalidOrder,  # {"code":2031,"message":"Minimum buy amount must be worth 2.0 USDT"}
            '2113': BadRequest,  # {"code":2113,"message":"RecvWindow must be in range 1..60000"}
            '2115': BadRequest,  # {"code":2115,"message":"Signature not found."}
            '2136': RateLimitExceeded,  # {"code":2136,"message":"Too many api request"}
            '94001': InvalidOrder,  # {"code":94001,"message":"Stop price not found."}
        },
    },
    'options': {
        # 'fetchTradesMethod': 'privateGetHistoricalTrades',
        'recvWindow': 10000,
    },
},
{
    'id': 'bitrue',
    'name': 'Bitrue',
    'countries': ['SG'],  # Singapore, Malta
    'rateLimit': 1000,
    'certified': False,
    'version': 'v1',
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': None,  # has but unimplemented
        'future': None,
        'option': False,
        'cancelAllOrders': False,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchBidsAsks': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': False,
        'fetchDeposits': True,
        'fetchFundingFees': False,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': 'emulated',
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': False,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchTransactions': False,
        'fetchTransfers': False,
        'fetchWithdrawals': True,
        'transfer': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '1d': '1d',
        '1w': '1w',
        '1M': '1M',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/139516488-243a830d-05dd-446b-91c6-c1f18fe30c63.jpg',
        'api': {
            'v1': 'https://www.bitrue.com/api/v1',
            'v2': 'https://www.bitrue.com/api/v2',
            'kline': 'https://www.bitrue.com/kline-api',
        },
        'www': 'https://www.bitrue.com',
        'referral': 'https://www.bitrue.com/activity/task/task-landing?inviteCode=EZWETQE&cn=900000',
        'doc': [
            'https://github.com/Bitrue-exchange/bitrue-official-api-docs',
        ],
        'fees': 'https://bitrue.zendesk.com/hc/en-001/articles/4405479952537',
    },
    'api': {
        'kline': {
            'public': {
                'get': {
                    'public.json': 1,
                    'public{currency}.json': 1,
                },
            },
        },
        'v1': {
            'public': {
                'get': {
                    'ping': 1,
                    'time': 1,
                    'exchangeInfo': 1,
                    'depth': {'cost': 1, 'byLimit': [[100, 1], [500, 5], [1000, 10]]},
                    'trades': 1,
                    'historicalTrades': 5,
                    'aggTrades': 1,
                    'ticker/24hr': {'cost': 1, 'noSymbol': 40},
                    'ticker/price': {'cost': 1, 'noSymbol': 2},
                    'ticker/bookTicker': {'cost': 1, 'noSymbol': 2},
                },
            },
            'private': {
                'get': {
                    'order': 1,
                    'openOrders': 1,
                    'allOrders': 5,
                    'account': 5,
                    'myTrades': {'cost': 5, 'noSymbol': 40},
                    'etf/net-value/{symbol}': 1,
                    'withdraw/history': 1,
                    'deposit/history': 1,
                },
                'post': {
                    'order': 4,
                    'withdraw/commit': 1,
                },
                'delete': {
                    'order': 1,
                },
            },
        },
        'v2': {
            'private': {
                'get': {
                    'myTrades': 5,
                },
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.00098'),
            'maker': self.parse_number('0.00098'),
        },
        'future': {
            'trading': {
                'feeSide': 'quote',
                'tierBased': True,
                'percentage': True,
                'taker': self.parse_number('0.000400'),
                'maker': self.parse_number('0.000200'),
                'tiers': {
                    'taker': [
                        [self.parse_number('0'), self.parse_number('0.000400')],
                        [self.parse_number('250'), self.parse_number('0.000400')],
                        [self.parse_number('2500'), self.parse_number('0.000350')],
                        [self.parse_number('7500'), self.parse_number('0.000320')],
                        [self.parse_number('22500'), self.parse_number('0.000300')],
                        [self.parse_number('50000'), self.parse_number('0.000270')],
                        [self.parse_number('100000'), self.parse_number('0.000250')],
                        [self.parse_number('200000'), self.parse_number('0.000220')],
                        [self.parse_number('400000'), self.parse_number('0.000200')],
                        [self.parse_number('750000'), self.parse_number('0.000170')],
                    ],
                    'maker': [
                        [self.parse_number('0'), self.parse_number('0.000200')],
                        [self.parse_number('250'), self.parse_number('0.000160')],
                        [self.parse_number('2500'), self.parse_number('0.000140')],
                        [self.parse_number('7500'), self.parse_number('0.000120')],
                        [self.parse_number('22500'), self.parse_number('0.000100')],
                        [self.parse_number('50000'), self.parse_number('0.000080')],
                        [self.parse_number('100000'), self.parse_number('0.000060')],
                        [self.parse_number('200000'), self.parse_number('0.000040')],
                        [self.parse_number('400000'), self.parse_number('0.000020')],
                        [self.parse_number('750000'), self.parse_number('0')],
                    ],
                },
            },
        },
        'delivery': {
            'trading': {
                'feeSide': 'base',
                'tierBased': True,
                'percentage': True,
                'taker': self.parse_number('0.000500'),
                'maker': self.parse_number('0.000100'),
                'tiers': {
                    'taker': [
                        [self.parse_number('0'), self.parse_number('0.000500')],
                        [self.parse_number('250'), self.parse_number('0.000450')],
                        [self.parse_number('2500'), self.parse_number('0.000400')],
                        [self.parse_number('7500'), self.parse_number('0.000300')],
                        [self.parse_number('22500'), self.parse_number('0.000250')],
                        [self.parse_number('50000'), self.parse_number('0.000240')],
                        [self.parse_number('100000'), self.parse_number('0.000240')],
                        [self.parse_number('200000'), self.parse_number('0.000240')],
                        [self.parse_number('400000'), self.parse_number('0.000240')],
                        [self.parse_number('750000'), self.parse_number('0.000240')],
                    ],
                    'maker': [
                        [self.parse_number('0'), self.parse_number('0.000100')],
                        [self.parse_number('250'), self.parse_number('0.000080')],
                        [self.parse_number('2500'), self.parse_number('0.000050')],
                        [self.parse_number('7500'), self.parse_number('0.0000030')],
                        [self.parse_number('22500'), self.parse_number('0')],
                        [self.parse_number('50000'), self.parse_number('-0.000050')],
                        [self.parse_number('100000'), self.parse_number('-0.000060')],
                        [self.parse_number('200000'), self.parse_number('-0.000070')],
                        [self.parse_number('400000'), self.parse_number('-0.000080')],
                        [self.parse_number('750000'), self.parse_number('-0.000090')],
                    ],
                },
            },
        },
    },
    # exchange-specific options
    'options': {
        # 'fetchTradesMethod': 'publicGetAggTrades',  # publicGetTrades, publicGetHistoricalTrades
        'fetchMyTradesMethod': 'v2PrivateGetMyTrades',  # v1PrivateGetMyTrades
        'hasAlreadyAuthenticatedSuccessfully': False,
        'recvWindow': 5 * 1000,  # 5 sec, binance default
        'timeDifference': 0,  # the difference between system clock and Binance clock
        'adjustForTimeDifference': False,  # controls the adjustment logic upon instantiation
        'parseOrderToPrecision': False,  # force amounts and costs in parseOrder to precision
        'newOrderRespType': {
            'market': 'FULL',  # 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
            'limit': 'FULL',  # we change it from 'ACK' by default to 'FULL'(returns immediately if limit is not hit)
        },
        'networks': {
            'SPL': 'SOLANA',
            'SOL': 'SOLANA',
            'DOGE': 'dogecoin',
            'ADA': 'Cardano',
        },
    },
    # https://binance-docs.github.io/apidocs/spot/en/#error-codes-2
    'exceptions': {
        'exact': {
            'System is under maintenance.': OnMaintenance,  # {"code":1,"msg":"System is under maintenance."}
            'System abnormality': ExchangeError,  # {"code":-1000,"msg":"System abnormality"}
            'You are not authorized to execute self request.': PermissionDenied,  # {"msg":"You are not authorized to execute self request."}
            'API key does not exist': AuthenticationError,
            'Order would trigger immediately.': OrderImmediatelyFillable,
            'Stop price would trigger immediately.': OrderImmediatelyFillable,  # {"code":-2010,"msg":"Stop price would trigger immediately."}
            'Order would immediately match and take.': OrderImmediatelyFillable,  # {"code":-2010,"msg":"Order would immediately match and take."}
            'Account has insufficient balance for requested action.': InsufficientFunds,
            'Rest API trading is not enabled.': ExchangeNotAvailable,
            "You don't have permission.": PermissionDenied,  # {"msg":"You don't have permission.","success":false}
            'Market is closed.': ExchangeNotAvailable,  # {"code":-1013,"msg":"Market is closed."}
            'Too many requests. Please try again later.': DDoSProtection,  # {"msg":"Too many requests. Please try again later.","success":false}
            '-1000': ExchangeNotAvailable,  # {"code":-1000,"msg":"An unknown error occured while processing the request."}
            '-1001': ExchangeNotAvailable,  # 'Internal error; unable to process your request. Please try again.'
            '-1002': AuthenticationError,  # 'You are not authorized to execute self request.'
            '-1003': RateLimitExceeded,  # {"code":-1003,"msg":"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API."}
            '-1013': InvalidOrder,  # createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL
            '-1015': RateLimitExceeded,  # 'Too many new orders; current limit is %s orders per %s.'
            '-1016': ExchangeNotAvailable,  # 'This service is no longer available.',
            '-1020': BadRequest,  # 'This operation is not supported.'
            '-1021': InvalidNonce,  # 'your time is ahead of server'
            '-1022': AuthenticationError,  # {"code":-1022,"msg":"Signature for self request is not valid."}
            '-1100': BadRequest,  # createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'
            '-1101': BadRequest,  # Too many parameters; expected %s and received %s.
            '-1102': BadRequest,  # Param %s or %s must be sent, but both were empty
            '-1103': BadRequest,  # An unknown parameter was sent.
            '-1104': BadRequest,  # Not all sent parameters were read, read 8 parameters but was sent 9
            '-1105': BadRequest,  # Parameter %s was empty.
            '-1106': BadRequest,  # Parameter %s sent when not required.
            '-1111': BadRequest,  # Precision is over the maximum defined for self asset.
            '-1112': InvalidOrder,  # No orders on book for symbol.
            '-1114': BadRequest,  # TimeInForce parameter sent when not required.
            '-1115': BadRequest,  # Invalid timeInForce.
            '-1116': BadRequest,  # Invalid orderType.
            '-1117': BadRequest,  # Invalid side.
            '-1118': BadRequest,  # New client order ID was empty.
            '-1119': BadRequest,  # Original client order ID was empty.
            '-1120': BadRequest,  # Invalid interval.
            '-1121': BadSymbol,  # Invalid symbol.
            '-1125': AuthenticationError,  # This listenKey does not exist.
            '-1127': BadRequest,  # More than %s hours between startTime and endTime.
            '-1128': BadRequest,  # {"code":-1128,"msg":"Combination of optional parameters invalid."}
            '-1130': BadRequest,  # Data sent for paramter %s is not valid.
            '-1131': BadRequest,  # recvWindow must be less than 60000
            '-2008': AuthenticationError,  # {"code":-2008,"msg":"Invalid Api-Key ID."}
            '-2010': ExchangeError,  # generic error code for createOrder -> 'Account has insufficient balance for requested action.', {"code":-2010,"msg":"Rest API trading is not enabled."}, etc...
            '-2011': OrderNotFound,  # cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'
            '-2013': OrderNotFound,  # fetchOrder(1, 'BTC/USDT') -> 'Order does not exist'
            '-2014': AuthenticationError,  # {"code":-2014, "msg": "API-key format invalid."}
            '-2015': AuthenticationError,  # "Invalid API-key, IP, or permissions for action."
            '-2019': InsufficientFunds,  # {"code":-2019,"msg":"Margin is insufficient."}
            '-3005': InsufficientFunds,  # {"code":-3005,"msg":"Transferring out not allowed. Transfer out amount exceeds max amount."}
            '-3006': InsufficientFunds,  # {"code":-3006,"msg":"Your borrow amount has exceed maximum borrow amount."}
            '-3008': InsufficientFunds,  # {"code":-3008,"msg":"Borrow not allowed. Your borrow amount has exceed maximum borrow amount."}
            '-3010': ExchangeError,  # {"code":-3010,"msg":"Repay not allowed. Repay amount exceeds borrow amount."}
            '-3015': ExchangeError,  # {"code":-3015,"msg":"Repay amount exceeds borrow amount."}
            '-3022': AccountSuspended,  # You account's trading is banned.
            '-4028': BadRequest,  # {"code":-4028,"msg":"Leverage 100 is not valid"}
            '-3020': InsufficientFunds,  # {"code":-3020,"msg":"Transfer out amount exceeds max amount."}
            '-3041': InsufficientFunds,  # {"code":-3041,"msg":"Balance is not enough"}
            '-5013': InsufficientFunds,  # Asset transfer failed: insufficient balance"
            '-11008': InsufficientFunds,  # {"code":-11008,"msg":"Exceeding the account's maximum borrowable limit."}
            '-4051': InsufficientFunds,  # {"code":-4051,"msg":"Isolated balance insufficient."}
        },
        'broad': {
            'has no operation privilege': PermissionDenied,
            'MAX_POSITION': InvalidOrder,  # {"code":-2010,"msg":"Filter failure: MAX_POSITION"}
        },
    },
},
{
    'id': 'btctradeua',
    'name': 'BTC Trade UA',
    'countries': ['UA'],  # Ukraine,
    'rateLimit': 3000,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkOHLCV': False,
        'fetchOpenOrders': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'signIn': True,
    },
    'urls': {
        'referral': 'https://btc-trade.com.ua/registration/22689',
        'logo': 'https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg',
        'api': 'https://btc-trade.com.ua/api',
        'www': 'https://btc-trade.com.ua',
        'doc': 'https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit',
    },
    'api': {
        'public': {
            'get': [
                'deals/{symbol}',
                'trades/sell/{symbol}',
                'trades/buy/{symbol}',
                'japan_stat/high/{symbol}',
            ],
        },
        'private': {
            'post': [
                'auth',
                'ask/{symbol}',
                'balance',
                'bid/{symbol}',
                'buy/{symbol}',
                'my_orders/{symbol}',
                'order/status/{id}',
                'remove/order/{id}',
                'sell/{symbol}',
            ],
        },
    },
    'markets': {
        'BCH/UAH': {'id': 'bch_uah', 'symbol': 'BCH/UAH', 'base': 'BCH', 'quote': 'UAH', 'baseId': 'bch', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'BTC/UAH': {'id': 'btc_uah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH', 'baseId': 'btc', 'quoteId': 'uah', 'precision': {'price': 1}, 'limits': {'amount': {'min': 0.0000000001}}, 'type': 'spot', 'spot': True},
        'DASH/BTC': {'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'dash', 'quoteId': 'btc', 'type': 'spot', 'spot': True},
        'DASH/UAH': {'id': 'dash_uah', 'symbol': 'DASH/UAH', 'base': 'DASH', 'quote': 'UAH', 'baseId': 'dash', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'DOGE/BTC': {'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'baseId': 'doge', 'quoteId': 'btc', 'type': 'spot', 'spot': True},
        'DOGE/UAH': {'id': 'doge_uah', 'symbol': 'DOGE/UAH', 'base': 'DOGE', 'quote': 'UAH', 'baseId': 'doge', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'ETH/UAH': {'id': 'eth_uah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH', 'baseId': 'eth', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'ITI/UAH': {'id': 'iti_uah', 'symbol': 'ITI/UAH', 'base': 'ITI', 'quote': 'UAH', 'baseId': 'iti', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'KRB/UAH': {'id': 'krb_uah', 'symbol': 'KRB/UAH', 'base': 'KRB', 'quote': 'UAH', 'baseId': 'krb', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'LTC/BTC': {'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc', 'type': 'spot', 'spot': True},
        'LTC/UAH': {'id': 'ltc_uah', 'symbol': 'LTC/UAH', 'base': 'LTC', 'quote': 'UAH', 'baseId': 'ltc', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'NVC/BTC': {'id': 'nvc_btc', 'symbol': 'NVC/BTC', 'base': 'NVC', 'quote': 'BTC', 'baseId': 'nvc', 'quoteId': 'btc', 'type': 'spot', 'spot': True},
        'NVC/UAH': {'id': 'nvc_uah', 'symbol': 'NVC/UAH', 'base': 'NVC', 'quote': 'UAH', 'baseId': 'nvc', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'PPC/BTC': {'id': 'ppc_btc', 'symbol': 'PPC/BTC', 'base': 'PPC', 'quote': 'BTC', 'baseId': 'ppc', 'quoteId': 'btc', 'type': 'spot', 'spot': True},
        'SIB/UAH': {'id': 'sib_uah', 'symbol': 'SIB/UAH', 'base': 'SIB', 'quote': 'UAH', 'baseId': 'sib', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'XMR/UAH': {'id': 'xmr_uah', 'symbol': 'XMR/UAH', 'base': 'XMR', 'quote': 'UAH', 'baseId': 'xmr', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
        'ZEC/UAH': {'id': 'zec_uah', 'symbol': 'ZEC/UAH', 'base': 'ZEC', 'quote': 'UAH', 'baseId': 'zec', 'quoteId': 'uah', 'type': 'spot', 'spot': True},
    },
    'fees': {
        'trading': {
            'maker': 0.1 / 100,
            'taker': 0.1 / 100,
        },
        'funding': {
            'withdraw': {
                'BTC': 0.0006,
                'LTC': 0.01,
                'NVC': 0.01,
                'DOGE': 10,
            },
        },
    },
},
{
    'id': 'binancecoinm',
    'name': 'Binance COIN-M',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg',
        'doc': [
            'https://binance-docs.github.io/apidocs/delivery/en/',
            'https://binance-docs.github.io/apidocs/spot/en',
        ],
    },
    'options': {
        'defaultType': 'delivery',
        'leverageBrackets': None,
    },
},
{
    'id': 'yobit',
    'name': 'YoBit',
    'countries': ['RU'],
    'rateLimit': 3000,  # responses are cached every 2 seconds
    'version': '3',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createMarketOrder': None,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchDepositAddress': True,
        'fetchDeposits': None,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderBooks': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': None,
        'fetchWithdrawals': None,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg',
        'api': {
            'public': 'https://yobit.net/api',
            'private': 'https://yobit.net/tapi',
        },
        'www': 'https://www.yobit.net',
        'doc': 'https://www.yobit.net/en/api/',
        'fees': 'https://www.yobit.net/en/fees/',
    },
    'api': {
        'public': {
            'get': [
                'depth/{pair}',
                'info',
                'ticker/{pair}',
                'trades/{pair}',
            ],
        },
        'private': {
            'post': [
                'ActiveOrders',
                'CancelOrder',
                'GetDepositAddress',
                'getInfo',
                'OrderInfo',
                'Trade',
                'TradeHistory',
                'WithdrawCoinsToAddress',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': 0.002,
            'taker': 0.002,
        },
        'funding': {
            'withdraw': {},
        },
    },
    'commonCurrencies': {
        'AIR': 'AirCoin',
        'ANI': 'ANICoin',
        'ANT': 'AntsCoin',  # what is self, a coin for ants?
        'ATMCHA': 'ATM',
        'ASN': 'Ascension',
        'AST': 'Astral',
        'ATM': 'Autumncoin',
        'AUR': 'AuroraCoin',
        'BAB': 'Babel',
        'BAN': 'BANcoin',
        'BCC': 'BCH',
        'BCS': 'BitcoinStake',
        'BITS': 'Bitstar',
        'BLN': 'Bulleon',
        'BNS': 'Benefit Bonus Coin',
        'BOT': 'BOTcoin',
        'BON': 'BONES',
        'BPC': 'BitcoinPremium',
        'BST': 'BitStone',
        'BTS': 'Bitshares2',
        'CAT': 'BitClave',
        'CBC': 'CryptoBossCoin',
        'CMT': 'CometCoin',
        'COIN': 'Coin.com',
        'COV': 'Coven Coin',
        'COVX': 'COV',
        'CPC': 'Capricoin',
        'CREDIT': 'Creditbit',
        'CS': 'CryptoSpots',
        'DCT': 'Discount',
        'DFT': 'DraftCoin',
        'DGD': 'DarkGoldCoin',
        'DIRT': 'DIRTY',
        'DROP': 'FaucetCoin',
        'DSH': 'DASH',
        'EGC': 'EverGreenCoin',
        'EGG': 'EggCoin',
        'EKO': 'EkoCoin',
        'ENTER': 'ENTRC',
        'EPC': 'ExperienceCoin',
        'ESC': 'EdwardSnowden',
        'EUROPE': 'EUROP',
        'EXT': 'LifeExtension',
        'FUND': 'FUNDChains',
        'FUNK': 'FUNKCoin',
        'FX': 'FCoin',
        'GCC': 'GlobalCryptocurrency',
        'GEN': 'Genstake',
        'GENE': 'Genesiscoin',
        'GOLD': 'GoldMint',
        'GOT': 'Giotto Coin',
        'GSX': 'GlowShares',
        'GT': 'GTcoin',
        'HTML5': 'HTML',
        'HYPERX': 'HYPER',
        'ICN': 'iCoin',
        'INSANE': 'INSN',
        'JNT': 'JointCoin',
        'JPC': 'JupiterCoin',
        'JWL': 'Jewels',
        'KNC': 'KingN Coin',
        'LBTCX': 'LiteBitcoin',
        'LIZI': 'LiZi',
        'LOC': 'LocoCoin',
        'LOCX': 'LOC',
        'LUNYR': 'LUN',
        'LUN': 'LunarCoin',  # they just change the ticker if it is already taken
        'LUNA': 'Luna Coin',
        'MASK': 'Yobit MASK',
        'MDT': 'Midnight',
        'MEME': 'Memez Token',  # conflict with Meme Inu / Degenerator Meme
        'MIS': 'MIScoin',
        'MM': 'MasterMint',  # conflict with MilliMeter
        'NAV': 'NavajoCoin',
        'NBT': 'NiceBytes',
        'OMG': 'OMGame',
        'ONX': 'Onix',
        'PAC': '$PAC',
        'PLAY': 'PlayCoin',
        'PIVX': 'Darknet',
        'PRS': 'PRE',
        'PURE': 'PurePOS',
        'PUTIN': 'PutinCoin',
        'SPACE': 'Spacecoin',
        'STK': 'StakeCoin',
        'SUB': 'Subscriptio',
        'PAY': 'EPAY',
        'PLC': 'Platin Coin',
        'RAI': 'RaiderCoin',
        'RCN': 'RCoin',
        'REP': 'Republicoin',
        'RUR': 'RUB',
        'SBTC': 'Super Bitcoin',
        'SMC': 'SmartCoin',
        'SOLO': 'SoloCoin',
        'STAR': 'StarCoin',
        'SUPER': 'SuperCoin',
        'TNS': 'Transcodium',
        'TTC': 'TittieCoin',
        'UNI': 'Universe',
        'UST': 'Uservice',
        'VOL': 'VolumeCoin',
        'XIN': 'XINCoin',
        'XMT': 'SummitCoin',
        'XRA': 'Ratecoin',
    },
    'options': {
        # 'fetchTickersMaxLength': 2048,
        'fetchOrdersRequiresSymbol': True,
        'fetchTickersMaxLength': 512,
    },
    'exceptions': {
        'exact': {
            '803': InvalidOrder,  # "Count could not be less than 0.001."(selling below minAmount)
            '804': InvalidOrder,  # "Count could not be more than 10000."(buying above maxAmount)
            '805': InvalidOrder,  # "price could not be less than X."(minPrice violation on buy & sell)
            '806': InvalidOrder,  # "price could not be more than X."(maxPrice violation on buy & sell)
            '807': InvalidOrder,  # "cost could not be less than X."(minCost violation on buy & sell)
            '831': InsufficientFunds,  # "Not enougth X to create buy order."(buying with balance.quote < order.cost)
            '832': InsufficientFunds,  # "Not enougth X to create sell order."(selling with balance.base < order.amount)
            '833': OrderNotFound,  # "Order with id X was not found."(cancelling non-existent, closed and cancelled order)
        },
        'broad': {
            'Invalid pair name': ExchangeError,  # {"success":0,"error":"Invalid pair name: btc_eth"}
            'invalid api key': AuthenticationError,
            'invalid sign': AuthenticationError,
            'api key dont have trade permission': AuthenticationError,
            'invalid parameter': InvalidOrder,
            'invalid order': InvalidOrder,
            'The given order has already been cancelled': InvalidOrder,
            'Requests too often': DDoSProtection,
            'not available': ExchangeNotAvailable,
            'data unavailable': ExchangeNotAvailable,
            'external service unavailable': ExchangeNotAvailable,
            'Total transaction amount': InvalidOrder,  # {"success": 0, "error": "Total transaction amount is less than minimal total: 0.00010000"}
            'The given order has already been closed and cannot be cancelled': InvalidOrder,
            'Insufficient funds': InsufficientFunds,
            'invalid key': AuthenticationError,
            'invalid nonce': InvalidNonce,  # {"success":0,"error":"invalid nonce(has already been used)"}'
            'Total order amount is less than minimal amount': InvalidOrder,
            'Rate Limited': RateLimitExceeded,
        },
    },
    'orders': {},  # orders cache / emulation
},
{
    'id': 'delta',
    'name': 'Delta Exchange',
    'countries': ['VC'],  # Saint Vincent and the Grenadines
    'rateLimit': 300,
    'version': 'v2',
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,
        'swap': None,
        'future': None,
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchLedger': True,
        'fetchLeverageTiers': False,  # An infinite number of tiers, see examples/js/delta-maintenance-margin-rate-max-leverage.js
        'fetchMarketLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrderBook': True,
        'fetchPosition': True,
        'fetchPositions': True,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
    },
    'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '2h': '2h',
        '4h': '4h',
        '6h': '6h',
        '1d': '1d',
        '7d': '7d',
        '1w': '1w',
        '2w': '2w',
        '1M': '30d',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/99450025-3be60a00-2931-11eb-9302-f4fd8d8589aa.jpg',
        'test': {
            'public': 'https://testnet-api.delta.exchange',
            'private': 'https://testnet-api.delta.exchange',
        },
        'api': {
            'public': 'https://api.delta.exchange',
            'private': 'https://api.delta.exchange',
        },
        'www': 'https://www.delta.exchange',
        'doc': [
            'https://docs.delta.exchange',
        ],
        'fees': 'https://www.delta.exchange/fees',
        'referral': 'https://www.delta.exchange/app/signup/?code=IULYNB',
    },
    'api': {
        'public': {
            'get': [
                'assets',
                'settings',
                'indices',
                'products',
                'tickers',
                'tickers/{symbol}',
                'l2orderbook/{symbol}',
                'trades/{symbol}',
                'history/candles',
                'history/sparklines',
            ],
        },
        'private': {
            'get': [
                'orders',
                'orders/leverage',
                'positions',
                'positions/margined',
                'orders/history',
                'fills',
                'fills/history/download/csv',
                'wallet/balances',
                'wallet/transactions',
                'wallet/transactions/download',
                'deposits/address',
            ],
            'post': [
                'orders',
                'orders/batch',
                'orders/leverage',
                'positions/change_margin',
            ],
            'put': [
                'orders',
                'orders/batch',
            ],
            'delete': [
                'orders',
                'orders/all',
                'orders/batch',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': 0.15 / 100,
            'maker': 0.10 / 100,
            'tiers': {
                'taker': [
                    [0, 0.15 / 100],
                    [100, 0.13 / 100],
                    [250, 0.13 / 100],
                    [1000, 0.1 / 100],
                    [5000, 0.09 / 100],
                    [10000, 0.075 / 100],
                    [20000, 0.065 / 100],
                ],
                'maker': [
                    [0, 0.1 / 100],
                    [100, 0.1 / 100],
                    [250, 0.09 / 100],
                    [1000, 0.075 / 100],
                    [5000, 0.06 / 100],
                    [10000, 0.05 / 100],
                    [20000, 0.05 / 100],
                ],
            },
        },
    },
    'precisionMode': TICK_SIZE,
    'requiredCredentials': {
        'apiKey': True,
        'secret': False,
    },
    'exceptions': {
        'exact': {
            # Margin required to place order with selected leverage and quantity is insufficient.
            'insufficient_margin': InsufficientFunds,  # {"error":{"code":"insufficient_margin","context":{"available_balance":"0.000000000000000000","required_additional_balance":"1.618626000000000000000000000"}},"success":false}
            'order_size_exceed_available': InvalidOrder,  # The order book doesn't have sufficient liquidity, hence the order couldnt be filled, for example, ioc orders
            'risk_limits_breached': BadRequest,  # orders couldn't be placed as it will breach allowed risk limits.
            'invalid_contract': BadSymbol,  # The contract/product is either doesn't exist or has already expired.
            'immediate_liquidation': InvalidOrder,  # Order will cause immediate liquidation.
            'out_of_bankruptcy': InvalidOrder,  # Order prices are out of position bankruptcy limits.
            'self_matching_disrupted_post_only': InvalidOrder,  # Self matching is not allowed during auction.
            'immediate_execution_post_only': InvalidOrder,  # orders couldn't be placed as it includes post only orders which will be immediately executed
            'bad_schema': BadRequest,  # {"error":{"code":"bad_schema","context":{"schema_errors":[{"code":"validation_error","message":"id is required","param":""}]}},"success":false}
            'invalid_api_key': AuthenticationError,  # {"success":false,"error":{"code":"invalid_api_key"}}
            'invalid_signature': AuthenticationError,  # {"success":false,"error":{"code":"invalid_signature"}}
            'open_order_not_found': OrderNotFound,  # {"error":{"code":"open_order_not_found"},"success":false}
            'unavailable': ExchangeNotAvailable,  # {"error":{"code":"unavailable"},"success":false}
        },
        'broad': {
        },
    },
},
{
    'id': 'bitfinex2',
    'name': 'Bitfinex',
    'countries': ['VG'],
    'version': 'v2',
    'certified': False,
    'pro': False,
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': None,  # has but unimplemented
        'future': None,
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createLimitOrder': True,
        'createMarketOrder': True,
        'createOrder': True,
        'deposit': None,
        'editOrder': None,
        'fetchBalance': True,
        'fetchClosedOrder': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchFundingFees': None,
        'fetchIndexOHLCV': False,
        'fetchLedger': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderTrades': True,
        'fetchStatus': True,
        'fetchTickers': True,
        'fetchTime': False,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '3h': '3h',
        '4h': '4h',
        '6h': '6h',
        '12h': '12h',
        '1d': '1D',
        '1w': '7D',
        '2w': '14D',
        '1M': '1M',
    },
    # cheapest endpoint is 240 requests per minute => ~ 4 requests per second =>( 1000ms / 4 ) = 250ms between requests on average
    'rateLimit': 250,
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
        'api': {
            'v1': 'https://api.bitfinex.com',
            'public': 'https://api-pub.bitfinex.com',
            'private': 'https://api.bitfinex.com',
        },
        'www': 'https://www.bitfinex.com',
        'doc': [
            'https://docs.bitfinex.com/v2/docs/',
            'https://github.com/bitfinexcom/bitfinex-api-node',
        ],
        'fees': 'https://www.bitfinex.com/fees',
    },
    'api': {
        'v1': {
            'get': [
                'symbols',
                'symbols_details',
            ],
        },
        'public': {
            'get': {
                'conf/{config}': 2.66,  # 90 requests a minute
                'conf/pub:{action}:{object}': 2.66,
                'conf/pub:{action}:{object}:{detail}': 2.66,
                'conf/pub:map:{object}': 2.66,
                'conf/pub:map:{object}:{detail}': 2.66,
                'conf/pub:map:currency:{detail}': 2.66,
                'conf/pub:map:currency:sym': 2.66,  # maps symbols to their API symbols, BAB > BCH
                'conf/pub:map:currency:label': 2.66,  # verbose friendly names, BNT > Bancor
                'conf/pub:map:currency:unit': 2.66,  # maps symbols to unit of measure where applicable
                'conf/pub:map:currency:undl': 2.66,  # maps derivatives symbols to their underlying currency
                'conf/pub:map:currency:pool': 2.66,  # maps symbols to underlying network/protocol they operate on
                'conf/pub:map:currency:explorer': 2.66,  # maps symbols to their recognised block explorer URLs
                'conf/pub:map:currency:tx:fee': 2.66,  # maps currencies to their withdrawal fees https://github.com/ccxt/ccxt/issues/7745
                'conf/pub:map:tx:method': 2.66,
                'conf/pub:list:{object}': 2.66,
                'conf/pub:list:{object}:{detail}': 2.66,
                'conf/pub:list:currency': 2.66,
                'conf/pub:list:pair:exchange': 2.66,
                'conf/pub:list:pair:margin': 2.66,
                'conf/pub:list:pair:futures': 2.66,
                'conf/pub:list:competitions': 2.66,
                'conf/pub:info:{object}': 2.66,
                'conf/pub:info:{object}:{detail}': 2.66,
                'conf/pub:info:pair': 2.66,
                'conf/pub:info:tx:status': 2.66,  # [deposit, withdrawal] statuses 1 = active, 0 = maintenance
                'conf/pub:fees': 2.66,
                'platform/status': 8,  # 30 requests per minute = 0.5 requests per second =>( 1000ms / rateLimit ) / 0.5 = 8
                'tickers': 2.66,  # 90 requests a minute = 1.5 requests per second =>( 1000 / rateLimit ) / 1.5 = 2.666666666
                'ticker/{symbol}': 2.66,
                'tickers/hist': 2.66,
                'trades/{symbol}/hist': 2.66,
                'book/{symbol}/{precision}': 1,  # 240 requests a minute
                'book/{symbol}/P0': 1,
                'book/{symbol}/P1': 1,
                'book/{symbol}/P2': 1,
                'book/{symbol}/P3': 1,
                'book/{symbol}/R0': 1,
                'stats1/{key}:{size}:{symbol}:{side}/{section}': 2.66,
                'stats1/{key}:{size}:{symbol}:{side}/last': 2.66,
                'stats1/{key}:{size}:{symbol}:{side}/hist': 2.66,
                'stats1/{key}:{size}:{symbol}/{section}': 2.66,
                'stats1/{key}:{size}:{symbol}/last': 2.66,
                'stats1/{key}:{size}:{symbol}/hist': 2.66,
                'stats1/{key}:{size}:{symbol}:long/last': 2.66,
                'stats1/{key}:{size}:{symbol}:long/hist': 2.66,
                'stats1/{key}:{size}:{symbol}:short/last': 2.66,
                'stats1/{key}:{size}:{symbol}:short/hist': 2.66,
                'candles/trade:{timeframe}:{symbol}:{period}/{section}': 2.66,
                'candles/trade:{timeframe}:{symbol}/{section}': 2.66,
                'candles/trade:{timeframe}:{symbol}/last': 2.66,
                'candles/trade:{timeframe}:{symbol}/hist': 2.66,
                'status/{type}': 2.66,
                'status/deriv': 2.66,
                'liquidations/hist': 80,  # 3 requests a minute = 0.05 requests a second =>( 1000ms / rateLimit ) / 0.05 = 80
                'rankings/{key}:{timeframe}:{symbol}/{section}': 2.66,
                'rankings/{key}:{timeframe}:{symbol}/hist': 2.66,
                'pulse/hist': 2.66,
                'pulse/profile/{nickname}': 2.66,
                'funding/stats/{symbol}/hist': 10,  # ratelimit not in docs
            },
            'post': {
                'calc/trade/avg': 2.66,
                'calc/fx': 2.66,
            },
        },
        'private': {
            'post': {
                # 'auth/r/orders/{symbol}/new',  # outdated
                # 'auth/r/stats/perf:{timeframe}/hist',  # outdated
                'auth/r/wallets': 2.66,
                'auth/r/wallets/hist': 2.66,
                'auth/r/orders': 2.66,
                'auth/r/orders/{symbol}': 2.66,
                'auth/w/order/submit': 2.66,
                'auth/w/order/update': 2.66,
                'auth/w/order/cancel': 2.66,
                'auth/w/order/multi': 2.66,
                'auth/w/order/cancel/multi': 2.66,
                'auth/r/orders/{symbol}/hist': 2.66,
                'auth/r/orders/hist': 2.66,
                'auth/r/order/{symbol}:{id}/trades': 2.66,
                'auth/r/trades/{symbol}/hist': 2.66,
                'auth/r/trades/hist': 2.66,
                'auth/r/ledgers/{currency}/hist': 2.66,
                'auth/r/ledgers/hist': 2.66,
                'auth/r/info/margin/{key}': 2.66,
                'auth/r/info/margin/base': 2.66,
                'auth/r/info/margin/sym_all': 2.66,
                'auth/r/positions': 2.66,
                'auth/w/position/claim': 2.66,
                'auth/w/position/increase:': 2.66,
                'auth/r/position/increase/info': 2.66,
                'auth/r/positions/hist': 2.66,
                'auth/r/positions/audit': 2.66,
                'auth/r/positions/snap': 2.66,
                'auth/w/deriv/collateral/set': 2.66,
                'auth/w/deriv/collateral/limits': 2.66,
                'auth/r/funding/offers': 2.66,
                'auth/r/funding/offers/{symbol}': 2.66,
                'auth/w/funding/offer/submit': 2.66,
                'auth/w/funding/offer/cancel': 2.66,
                'auth/w/funding/offer/cancel/all': 2.66,
                'auth/w/funding/close': 2.66,
                'auth/w/funding/auto': 2.66,
                'auth/w/funding/keep': 2.66,
                'auth/r/funding/offers/{symbol}/hist': 2.66,
                'auth/r/funding/offers/hist': 2.66,
                'auth/r/funding/loans': 2.66,
                'auth/r/funding/loans/hist': 2.66,
                'auth/r/funding/loans/{symbol}': 2.66,
                'auth/r/funding/loans/{symbol}/hist': 2.66,
                'auth/r/funding/credits': 2.66,
                'auth/r/funding/credits/hist': 2.66,
                'auth/r/funding/credits/{symbol}': 2.66,
                'auth/r/funding/credits/{symbol}/hist': 2.66,
                'auth/r/funding/trades/{symbol}/hist': 2.66,
                'auth/r/funding/trades/hist': 2.66,
                'auth/r/info/funding/{key}': 2.66,
                'auth/r/info/user': 2.66,
                'auth/r/summary': 2.66,
                'auth/r/logins/hist': 2.66,
                'auth/r/permissions': 2.66,
                'auth/w/token': 2.66,
                'auth/r/audit/hist': 2.66,
                'auth/w/transfer': 2.66,  # ratelimit not in docs...
                'auth/w/deposit/address': 24,  # 10 requests a minute = 0.166 requests per second =>( 1000ms / rateLimit ) / 0.166 = 24
                'auth/w/deposit/invoice': 24,  # ratelimit not in docs
                'auth/w/withdraw': 24,  # ratelimit not in docs
                'auth/r/movements/{currency}/hist': 2.66,
                'auth/r/movements/hist': 2.66,
                'auth/r/alerts': 5.33,  # 45 requests a minute = 0.75 requests per second =>( 1000ms / rateLimit ) / 0.75 => 5.33
                'auth/w/alert/set': 2.66,
                'auth/w/alert/price:{symbol}:{price}/del': 2.66,
                'auth/w/alert/{type}:{symbol}:{price}/del': 2.66,
                'auth/calc/order/avail': 2.66,
                'auth/w/settings/set': 2.66,
                'auth/r/settings': 2.66,
                'auth/w/settings/del': 2.66,
                'auth/r/pulse/hist': 2.66,
                'auth/w/pulse/add': 16,  # 15 requests a minute = 0.25 requests per second =>( 1000ms / rateLimit ) / 0.25 => 16
                'auth/w/pulse/del': 2.66,
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'percentage': True,
            'tierBased': True,
            'maker': self.parse_number('0.001'),
            'taker': self.parse_number('0.002'),
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.002')],
                    [self.parse_number('500000'), self.parse_number('0.002')],
                    [self.parse_number('1000000'), self.parse_number('0.002')],
                    [self.parse_number('2500000'), self.parse_number('0.002')],
                    [self.parse_number('5000000'), self.parse_number('0.002')],
                    [self.parse_number('7500000'), self.parse_number('0.002')],
                    [self.parse_number('10000000'), self.parse_number('0.0018')],
                    [self.parse_number('15000000'), self.parse_number('0.0016')],
                    [self.parse_number('20000000'), self.parse_number('0.0014')],
                    [self.parse_number('25000000'), self.parse_number('0.0012')],
                    [self.parse_number('30000000'), self.parse_number('0.001')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.001')],
                    [self.parse_number('500000'), self.parse_number('0.0008')],
                    [self.parse_number('1000000'), self.parse_number('0.0006')],
                    [self.parse_number('2500000'), self.parse_number('0.0004')],
                    [self.parse_number('5000000'), self.parse_number('0.0002')],
                    [self.parse_number('7500000'), self.parse_number('0')],
                    [self.parse_number('10000000'), self.parse_number('0')],
                    [self.parse_number('15000000'), self.parse_number('0')],
                    [self.parse_number('20000000'), self.parse_number('0')],
                    [self.parse_number('25000000'), self.parse_number('0')],
                    [self.parse_number('30000000'), self.parse_number('0')],
                ],
            },
        },
        'funding': {
            'withdraw': {},
        },
    },
    'options': {
        'precision': 'R0',  # P0, P1, P2, P3, P4, R0
        # convert 'EXCHANGE MARKET' to lowercase 'market'
        # convert 'EXCHANGE LIMIT' to lowercase 'limit'
        # everything else remains uppercase
        'exchangeTypes': {
            # 'MARKET': None,
            'EXCHANGE MARKET': 'market',
            # 'LIMIT': None,
            'EXCHANGE LIMIT': 'limit',
            # 'STOP': None,
            # 'EXCHANGE STOP': None,
            # 'TRAILING STOP': None,
            # 'EXCHANGE TRAILING STOP': None,
            # 'FOK': None,
            # 'EXCHANGE FOK': None,
            # 'STOP LIMIT': None,
            # 'EXCHANGE STOP LIMIT': None,
            # 'IOC': None,
            # 'EXCHANGE IOC': None,
        },
        # convert 'market' to 'EXCHANGE MARKET'
        # convert 'limit' 'EXCHANGE LIMIT'
        # everything else remains as is
        'orderTypes': {
            'market': 'EXCHANGE MARKET',
            'limit': 'EXCHANGE LIMIT',
        },
        'fiat': {
            'USD': 'USD',
            'EUR': 'EUR',
            'JPY': 'JPY',
            'GBP': 'GBP',
            'CHN': 'CHN',
        },
        # actually the correct names unlike the v1
        # we don't want to self.extend self with accountsByType in v1
        'v2AccountsByType': {
            'spot': 'exchange',
            'exchange': 'exchange',
            'funding': 'funding',
            'margin': 'margin',
            'derivatives': 'margin',
        },
    },
    'exceptions': {
        'exact': {
            '10001': PermissionDenied,  # api_key: permission invalid(#10001)
            '10020': BadRequest,
            '10100': AuthenticationError,
            '10114': InvalidNonce,
            '20060': OnMaintenance,
            # {"code":503,"error":"temporarily_unavailable","error_description":"Sorry, the service is temporarily unavailable. See https://www.bitfinex.com/ for more info."}
            'temporarily_unavailable': ExchangeNotAvailable,
        },
        'broad': {
            'address': InvalidAddress,
            'available balance is only': InsufficientFunds,
            'not enough exchange balance': InsufficientFunds,
            'Order not found': OrderNotFound,
            'symbol: invalid': BadSymbol,
            'Invalid order': InvalidOrder,
        },
    },
},
{
    'id': 'ftxus',
    'name': 'FTX US',
    'countries': ['US'],
    'certified': False,
    'hostname': 'ftx.us',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # Has but not fully implemented
        'swap': False,
        'future': False,
        'option': None,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkOHLCV': False,
        'fetchPremiumIndexOHLCV': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/141506670-12f6115f-f425-4cd8-b892-b51d157ca01f.jpg',
        'www': 'https://ftx.us/',
        'docs': 'https://docs.ftx.us/',
        'fees': 'https://help.ftx.us/hc/en-us/articles/360043579273-Fees',
    },
},
{
    'id': 'crex24',
    'name': 'CREX24',
    'countries': ['EE'],  # Estonia
    'rateLimit': 500,
    'version': 'v2',
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'editOrder': True,
        'fetchBalance': True,
        'fetchBidsAsks': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFees': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': None,  # actually, True, but will be implemented later
        'fetchTradingFees': None,  # actually, True, but will be implemented later
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '3m': '3m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '1d': '1d',
        '1w': '1w',
        '1M': '1mo',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/47813922-6f12cc00-dd5d-11e8-97c6-70f957712d47.jpg',
        'api': 'https://api.crex24.com',
        'www': 'https://crex24.com',
        'referral': 'https://crex24.com/?refid=slxsjsjtil8xexl9hksr',
        'doc': 'https://docs.crex24.com/trade-api/v2',
        'fees': 'https://crex24.com/fees',
    },
    'api': {
        'public': {
            'get': [
                'currencies',
                'instruments',
                'tickers',
                'recentTrades',
                'orderBook',
                'ohlcv',
                'tradingFeeSchedules',
                'withdrawalFees',
                'currencyTransport',
                'currenciesWithdrawalFees',
            ],
        },
        'trading': {
            'get': [
                'orderStatus',
                'orderTrades',
                'activeOrders',
                'orderHistory',
                'tradeHistory',
                'tradingFee',
                'tradeFee',  # The support of self method has been dropped on February 18, 2020. Please, use tradingFee method instead. https://docs.crex24.com/trade-api/v2/#trade-fee-and-rebate-discontinued
            ],
            'post': [
                'placeOrder',
                'modifyOrder',
                'cancelOrdersById',
                'cancelOrdersByInstrument',
                'cancelAllOrders',
            ],
        },
        'account': {
            'get': [
                'balance',
                'depositAddress',
                'moneyTransfers',
                'moneyTransferStatus',
                'previewWithdrawal',
            ],
            'post': [
                'withdraw',
            ],
        },
    },
    'precisionMode': TICK_SIZE,
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': 0.001,
            'maker': -0.0001,
        },
        # should be deleted, these are outdated and inaccurate
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {},
            'deposit': {},
        },
    },
    'commonCurrencies': {
        'ACM': 'Actinium',
        'BCC': 'BCH',
        'BIT': 'BitMoney',
        'BULL': 'BuySell',
        'CLC': 'CaluraCoin',
        'CREDIT': 'TerraCredit',
        'DMS': 'Documentchain',  # conflict with Dragon Mainland Shards
        'EGG': 'NestEGG Coin',
        'EPS': 'Epanus',  # conflict with EPS Ellipsis https://github.com/ccxt/ccxt/issues/8909
        'FUND': 'FUNDChains',
        'GHOST': 'GHOSTPRISM',
        'GM': 'GM Holding',
        'GTC': 'GastroCoin',  # conflict with Gitcoin and Game.com
        'IQ': 'IQ.Cash',
        'ONE': 'One Hundred Coin',
        'PUT': 'PutinCoin',
        'SBTC': 'SBTCT',  # SiamBitcoin
        'SPH': 'SapphireCoin',
        'SUPER': 'SuperCoin',
        'UNI': 'Universe',
        'YOYO': 'YOYOW',
    },
    # exchange-specific options
    'options': {
        'networks': {
            'ETH': 'ERC20',
            'TRX': 'TRC20',
            'BSC': 'BEP20',
        },
        'fetchOrdersMethod': 'tradingGetOrderHistory',  # or 'tradingGetActiveOrders'
        'fetchClosedOrdersMethod': 'tradingGetOrderHistory',  # or 'tradingGetActiveOrders'
        'fetchTickersMethod': 'publicGetTicker24hr',
        'defaultTimeInForce': 'GTC',  # 'GTC' = Good To Cancel(default), 'IOC' = Immediate Or Cancel
        'hasAlreadyAuthenticatedSuccessfully': False,
        'warnOnFetchOpenOrdersWithoutSymbol': True,
        'parseOrderToPrecision': False,  # force amounts and costs in parseOrder to precision
        'newOrderRespType': 'RESULT',  # 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
    },
    'exceptions': {
        'exact': {
            "Parameter 'filter' contains invalid value.": BadRequest,  # eslint-disable-quotes
            "Mandatory parameter 'instrument' is missing.": BadRequest,  # eslint-disable-quotes
            "The value of parameter 'till' must be greater than or equal to the value of parameter 'from'.": BadRequest,  # eslint-disable-quotes
            'Failed to verify request signature.': AuthenticationError,  # eslint-disable-quotes
            "Nonce error. Make sure that the value passed in the 'X-CREX24-API-NONCE' header is greater in each consecutive request than in the previous one for the corresponding API-Key provided in 'X-CREX24-API-KEY' header.": InvalidNonce,
            'Market orders are not supported by the instrument currently.': InvalidOrder,
            "Parameter 'instrument' contains invalid value.": BadSymbol,
            "Trading has been disabled for the account until the verification is passed. To initiate the verification process, please log into your account at crex24.com and proceed to 'My account' -> 'Verification'.": AccountSuspended,  # {"errorDescription":"Trading has been disabled for the account until the verification is passed. To initiate the verification process, please log into your account at crex24.com and proceed to 'My account' -> 'Verification'."}
        },
        'broad': {
            'try again later': ExchangeNotAvailable,  # {"errorDescription":"Failed to process the request. Please, try again later."}
            'API Key': AuthenticationError,  # "API Key '9edc48de-d5b0-4248-8e7e-f59ffcd1c7f1' doesn't exist."
            'Insufficient funds': InsufficientFunds,  # "Insufficient funds: new order requires 10 ETH which is more than the available balance."
            'has been delisted.': BadSymbol,  # {"errorDescription":"Instrument '$PAC-BTC' has been delisted."}
            'is currently suspended.': BadSymbol,  # {"errorDescription":"Trading in BITG-BTC is currently suspended."}
            'Mandatory parameter': BadRequest,  # {"errorDescription":"Mandatory parameter 'feeCurrency' is missing."}
            'can not trade': AccountSuspended,  # {"errorDescription":"User 123456 can not trade"}
        },
    },
},
{
    'id': 'flowbtc',
    'name': 'flowBTC',
    'countries': ['BR'],  # Brazil
    'rateLimit': 1000,
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87443317-01c0d080-c5fe-11ea-95c2-9ebe1a8fafd9.jpg',
        'api': {
            'public': 'https://api.flowbtc.com.br:8443/ap/',
            'private': 'https://api.flowbtc.com.br:8443/ap/',
        },
        'www': 'https://www.flowbtc.com.br',
        'doc': 'https://www.flowbtc.com.br/api.html',
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': 0.0025,
            'taker': 0.005,
        },
    },
},
{
    'id': 'currencycom',
    'name': 'Currency.com',
    'countries': ['BY'],  # Belarus
    'rateLimit': 100,
    'certified': True,
    'pro': True,
    'version': 'v2',
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': True,
        'swap': True,
        'future': False,
        'option': False,
        'addMargin': None,
        'cancelAllOrders': None,
        'cancelOrder': True,
        'cancelOrders': None,
        'createDepositAddress': None,
        'createLimitOrder': True,
        'createMarketOrder': True,
        'createOrder': True,
        'deposit': None,
        'editOrder': 'emulated',
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBidsAsks': None,
        'fetchBorrowRate': None,
        'fetchBorrowRateHistory': None,
        'fetchBorrowRates': None,
        'fetchBorrowRatesPerSymbol': None,
        'fetchCanceledOrders': None,
        'fetchClosedOrder': None,
        'fetchClosedOrders': None,
        'fetchCurrencies': True,
        'fetchDeposit': None,
        'fetchDepositAddress': True,
        'fetchDepositAddresses': False,
        'fetchDepositAddressesByNetwork': False,
        'fetchDeposits': True,
        'fetchFundingFee': None,
        'fetchFundingFees': None,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchL2OrderBook': True,
        'fetchLedger': True,
        'fetchLedgerEntry': False,
        'fetchLeverage': True,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': None,
        'fetchOpenOrders': True,
        'fetchOrder': None,
        'fetchOrderBook': True,
        'fetchOrderBooks': None,
        'fetchOrders': None,
        'fetchOrderTrades': None,
        'fetchPosition': None,
        'fetchPositions': True,
        'fetchPositionsRisk': None,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTradingLimits': None,
        'fetchTransactions': True,
        'fetchTransfers': None,
        'fetchWithdrawal': None,
        'fetchWithdrawals': True,
        'reduceMargin': None,
        'setLeverage': None,
        'setMarginMode': None,
        'setPositionMode': None,
        'signIn': None,
        'transfer': None,
        'withdraw': None,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '10m': '10m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '1d': '1d',
        '1w': '1w',
    },
    'hostname': 'backend.currency.com',
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg',
        'api': {
            'public': 'https://api-adapter.{hostname}/api',
            'private': 'https://api-adapter.{hostname}/api',
            'marketcap': 'https://marketcap.{hostname}/api',
        },
        'test': {
            'public': 'https://demo-api-adapter.{hostname}/api',
            'private': 'https://demo-api-adapter.{hostname}/api',
        },
        'www': 'https://www.currency.com',
        'referral': 'https://currency.com/trading/signup?c=362jaimv&pid=referral',
        'doc': [
            'https://currency.com/api',
        ],
        'fees': 'https://currency.com/fees-charges',
    },
    # rate-limits are described at: https://currency.com/api-get-started
    'api': {
        'public': {
            'get': {
                'v1/time': 1,
                'v1/exchangeInfo': 1,
                'v1/depth': 1,
                'v1/aggTrades': 1,
                'v1/klines': 1,
                'v1/ticker/24hr': 1,
                'v2/time': 1,
                'v2/exchangeInfo': 1,
                'v2/depth': 1,
                'v2/aggTrades': 1,
                'v2/klines': 1,
                'v2/ticker/24hr': 1,
            },
        },
        'marketcap': {
            'get': {
                'v1/assets': 1,
                'v1/candles': 1,
                'v1/orderbook': 1,
                'v1/summary': 1,
                'v1/ticker': 1,
                'v1/token/assets': 1,
                'v1/token/orderbook': 1,
                'v1/token/summary': 1,
                'v1/token/ticker': 1,
                'v1/token/trades': 1,
                'v1/token_crypto/OHLC': 1,
                'v1/token_crypto/assets': 1,
                'v1/token_crypto/orderbook': 1,
                'v1/token_crypto/summary': 1,
                'v1/token_crypto/ticker': 1,
                'v1/token_crypto/trades': 1,
                'v1/trades': 1,
            },
        },
        'private': {
            'get': {
                'v1/account': 1,
                'v1/currencies': 1,
                'v1/deposits': 1,
                'v1/depositAddress': 1,
                'v1/ledger': 1,
                'v1/leverageSettings': 1,
                'v1/myTrades': 1,
                'v1/openOrders': 1,
                'v1/tradingPositions': 1,
                'v1/tradingPositionsHistory': 1,
                'v1/transactions': 1,
                'v1/withdrawals': 1,
                'v2/account': 1,
                'v2/currencies': 1,
                'v2/deposits': 1,
                'v2/depositAddress': 1,
                'v2/ledger': 1,
                'v2/leverageSettings': 1,
                'v2/myTrades': 1,
                'v2/openOrders': 1,
                'v2/tradingPositions': 1,
                'v2/tradingPositionsHistory': 1,
                'v2/transactions': 1,
                'v2/withdrawals': 1,
            },
            'post': {
                'v1/order': 1,
                'v1/updateTradingPosition': 1,
                'v1/updateTradingOrder': 1,
                'v1/closeTradingPosition': 1,
                'v2/order': 1,
                'v2/updateTradingPosition': 1,
                'v2/updateTradingOrder': 1,
                'v2/closeTradingPosition': 1,
            },
            'delete': {
                'v1/order': 1,
                'v2/order': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.002'),
            'maker': self.parse_number('0.002'),
        },
    },
    'precisionMode': TICK_SIZE,
    # exchange-specific options
    'options': {
        'defaultTimeInForce': 'GTC',  # 'GTC' = Good To Cancel(default), 'IOC' = Immediate Or Cancel, 'FOK' = Fill Or Kill
        'warnOnFetchOpenOrdersWithoutSymbol': True,
        'recvWindow': 5 * 1000,  # 5 sec, default
        'timeDifference': 0,  # the difference between system clock and Binance clock
        'adjustForTimeDifference': False,  # controls the adjustment logic upon instantiation
        'parseOrderToPrecision': False,  # force amounts and costs in parseOrder to precision
        'newOrderRespType': {
            'market': 'FULL',  # 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
            'limit': 'RESULT',  # we change it from 'ACK' by default to 'RESULT'
            'stop': 'RESULT',
        },
    },
    'exceptions': {
        'broad': {
            'FIELD_VALIDATION_ERROR Cancel is available only for LIMIT order': InvalidOrder,
            'API key does not exist': AuthenticationError,
            'Order would trigger immediately.': InvalidOrder,
            'Account has insufficient balance for requested action.': InsufficientFunds,
            'Rest API trading is not enabled.': ExchangeNotAvailable,
            'Combination of parameters invalid': BadRequest,
            'Invalid limit price': BadRequest,
            'Only leverage symbol allowed here:': BadSymbol,  # when you fetchLeverage for non-leverage symbols, like 'BTC/USDT' instead of 'BTC/USDT_LEVERAGE': {"code":"-1128","msg":"Only leverage symbol allowed here: BTC/USDT"}
        },
        'exact': {
            '-1000': ExchangeNotAvailable,  # {"code":-1000,"msg":"An unknown error occured while processing the request."}
            '-1013': InvalidOrder,  # createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL
            '-1021': InvalidNonce,  # 'your time is ahead of server'
            '-1022': AuthenticationError,  # {"code":-1022,"msg":"Signature for self request is not valid."}
            '-1100': InvalidOrder,  # createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'
            '-1104': ExchangeError,  # Not all sent parameters were read, read 8 parameters but was sent 9
            '-1025': AuthenticationError,  # {"code":-1025,"msg":"Invalid API-key, IP, or permissions for action"}
            '-1128': BadRequest,  # {"code":-1128,"msg":"Combination of optional parameters invalid."} | {"code":"-1128","msg":"Combination of parameters invalid"} | {"code":"-1128","msg":"Invalid limit price"}
            '-2010': ExchangeError,  # generic error code for createOrder -> 'Account has insufficient balance for requested action.', {"code":-2010,"msg":"Rest API trading is not enabled."}, etc...
            '-2011': OrderNotFound,  # cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'
            '-2013': OrderNotFound,  # fetchOrder(1, 'BTC/USDT') -> 'Order does not exist'
            '-2014': AuthenticationError,  # {"code":-2014, "msg": "API-key format invalid."}
            '-2015': AuthenticationError,  # "Invalid API-key, IP, or permissions for action."
        },
    },
    'commonCurrencies': {
        'ACN': 'Accenture',
        'BNS': 'Bank of Nova Scotia',
        'CAR': 'Avis Budget Group Inc',
        'CLR': 'Continental Resources',
        'EDU': 'New Oriental Education & Technology Group Inc',
        'ETN': 'Eaton',
        'FOX': 'Fox Corporation',
        'GM': 'General Motors Co',
        'IQ': 'iQIYI',
        'OSK': 'Oshkosh',
        'PLAY': "Dave & Buster's Entertainment",
    },
},
{
    'id': 'bitso',
    'name': 'Bitso',
    'countries': ['MX'],  # Mexico
    'rateLimit': 2000,  # 30 requests per minute
    'version': 'v3',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchDepositAddress': True,
        'fetchFundingFee': False,
        'fetchFundingFees': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderTrades': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87295554-11f98280-c50e-11ea-80d6-15b3bafa8cbf.jpg',
        'api': 'https://api.bitso.com',
        'www': 'https://bitso.com',
        'doc': 'https://bitso.com/api_info',
        'fees': 'https://bitso.com/fees',
        'referral': 'https://bitso.com/?ref=itej',
    },
    'precisionMode': TICK_SIZE,
    'options': {
        'precision': {
            'XRP': 0.000001,
            'MXN': 0.01,
            'TUSD': 0.01,
        },
        'defaultPrecision': 0.00000001,
    },
    'api': {
        'public': {
            'get': [
                'available_books',
                'ticker',
                'order_book',
                'trades',
            ],
        },
        'private': {
            'get': [
                'account_status',
                'balance',
                'fees',
                'fundings',
                'fundings/{fid}',
                'funding_destination',
                'kyc_documents',
                'ledger',
                'ledger/trades',
                'ledger/fees',
                'ledger/fundings',
                'ledger/withdrawals',
                'mx_bank_codes',
                'open_orders',
                'order_trades/{oid}',
                'orders/{oid}',
                'user_trades',
                'user_trades/{tid}',
                'withdrawals/',
                'withdrawals/{wid}',
            ],
            'post': [
                'bitcoin_withdrawal',
                'debit_card_withdrawal',
                'ether_withdrawal',
                'ripple_withdrawal',
                'bcash_withdrawal',
                'litecoin_withdrawal',
                'orders',
                'phone_number',
                'phone_verification',
                'phone_withdrawal',
                'spei_withdrawal',
                'ripple_withdrawal',
                'bcash_withdrawal',
                'litecoin_withdrawal',
            ],
            'delete': [
                'orders/{oid}',
                'orders/all',
            ],
        },
    },
    'exceptions': {
        '0201': AuthenticationError,  # Invalid Nonce or Invalid Credentials
        '104': InvalidNonce,  # Cannot perform request - nonce must be higher than 1520307203724237
    },
},
{
    'id': 'bitstamp',
    'name': 'Bitstamp',
    'countries': ['GB'],
    'rateLimit': 1000,
    'version': 'v2',
    'userAgent': self.userAgents['chrome'],
    'pro': True,
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchFundingFees': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLedger': True,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',
        'api': {
            'public': 'https://www.bitstamp.net/api',
            'private': 'https://www.bitstamp.net/api',
        },
        'www': 'https://www.bitstamp.net',
        'doc': 'https://www.bitstamp.net/api',
    },
    'timeframes': {
        '1m': '60',
        '3m': '180',
        '5m': '300',
        '15m': '900',
        '30m': '1800',
        '1h': '3600',
        '2h': '7200',
        '4h': '14400',
        '6h': '21600',
        '12h': '43200',
        '1d': '86400',
        '1w': '259200',
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
    },
    'api': {
        'public': {
            'get': [
                'ohlc/{pair}/',
                'order_book/{pair}/',
                'ticker_hour/{pair}/',
                'ticker/{pair}/',
                'transactions/{pair}/',
                'trading-pairs-info/',
            ],
        },
        'private': {
            'post': [
                'balance/',
                'balance/{pair}/',
                'bch_withdrawal/',
                'bch_address/',
                'user_transactions/',
                'user_transactions/{pair}/',
                'open_orders/all/',
                'open_orders/{pair}/',
                'order_status/',
                'cancel_order/',
                'cancel_all_orders/',
                'cancel_all_orders/{pair}/',
                'buy/{pair}/',
                'buy/market/{pair}/',
                'buy/instant/{pair}/',
                'sell/{pair}/',
                'sell/market/{pair}/',
                'sell/instant/{pair}/',
                'btc_withdrawal/',
                'btc_address/',
                'ripple_withdrawal/',
                'ripple_address/',
                'ltc_withdrawal/',
                'ltc_address/',
                'eth_withdrawal/',
                'eth_address/',
                'xrp_withdrawal/',
                'xrp_address/',
                'xlm_withdrawal/',
                'xlm_address/',
                'pax_withdrawal/',
                'pax_address/',
                'link_withdrawal/',
                'link_address/',
                'usdc_withdrawal/',
                'usdc_address/',
                'omg_withdrawal/',
                'omg_address/',
                'dai_withdrawal/',
                'dai_address/',
                'knc_withdrawal/',
                'knc_address/',
                'mkr_withdrawal/',
                'mkr_address/',
                'zrx_withdrawal/',
                'zrx_address/',
                'gusd_withdrawal/',
                'gusd_address/',
                'aave_withdrawal/',
                'aave_address/',
                'bat_withdrawal/',
                'bat_address/',
                'uma_withdrawal/',
                'uma_address/',
                'snx_withdrawal/',
                'snx_address/',
                'uni_withdrawal/',
                'uni_address/',
                'yfi_withdrawal/',
                'yfi_address',
                'audio_withdrawal/',
                'audio_address/',
                'crv_withdrawal/',
                'crv_address/',
                'algo_withdrawal/',
                'algo_address/',
                'comp_withdrawal/',
                'comp_address/',
                'grt_withdrawal',
                'grt_address/',
                'usdt_withdrawal/',
                'usdt_address/',
                'eurt_withdrawal/',
                'eurt_address/',
                'matic_withdrawal/',
                'matic_address/',
                'sushi_withdrawal/',
                'sushi_address/',
                'chz_withdrawal/',
                'chz_address/',
                'enj_withdrawal/',
                'enj_address/',
                'alpha_withdrawal/',
                'alpha_address/',
                'ftt_withdrawal/',
                'ftt_address/',
                'storj_withdrawal/',
                'storj_address/',
                'axs_withdrawal/',
                'axs_address/',
                'sand_withdrawal/',
                'sand_address/',
                'hbar_withdrawal/',
                'hbar_address/',
                'rgt_withdrawal/',
                'rgt_address/',
                'fet_withdrawal/',
                'fet_address/',
                'skl_withdrawal/',
                'skl_address/',
                'cel_withdrawal/',
                'cel_address/',
                'sxp_withdrawal/',
                'sxp_address/',
                'ada_withdrawal/',
                'ada_address/',
                'slp_withdrawal/',
                'slp_address/',
                'ftm_withdrawal/',
                'ftm_address/',
                'perp_withdrawal/',
                'perp_address/',
                'dydx_withdrawal/',
                'dydx_address/',
                'gala_withdrawal/',
                'gala_address/',
                'shib_withdrawal/',
                'shib_address/',
                'amp_withdrawal/',
                'amp_address/',
                'sgb_withdrawal/',
                'sgb_address/',
                'avax_withdrawal/',
                'avax_address/',
                'wbtc_withdrawal/',
                'wbtc_address/',
                'transfer-to-main/',
                'transfer-from-main/',
                'withdrawal-requests/',
                'withdrawal/open/',
                'withdrawal/status/',
                'withdrawal/cancel/',
                'liquidation_address/new/',
                'liquidation_address/info/',
                'btc_unconfirmed/',
                'websockets_token/',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.005'),
            'maker': self.parse_number('0.005'),
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.005')],
                    [self.parse_number('20000'), self.parse_number('0.0025')],
                    [self.parse_number('100000'), self.parse_number('0.0024')],
                    [self.parse_number('200000'), self.parse_number('0.0022')],
                    [self.parse_number('400000'), self.parse_number('0.0020')],
                    [self.parse_number('600000'), self.parse_number('0.0015')],
                    [self.parse_number('1000000'), self.parse_number('0.0014')],
                    [self.parse_number('2000000'), self.parse_number('0.0013')],
                    [self.parse_number('4000000'), self.parse_number('0.0012')],
                    [self.parse_number('20000000'), self.parse_number('0.0011')],
                    [self.parse_number('50000000'), self.parse_number('0.0010')],
                    [self.parse_number('100000000'), self.parse_number('0.0007')],
                    [self.parse_number('500000000'), self.parse_number('0.0005')],
                    [self.parse_number('2000000000'), self.parse_number('0.0003')],
                    [self.parse_number('6000000000'), self.parse_number('0.0001')],
                    [self.parse_number('20000000000'), self.parse_number('0.00005')],
                    [self.parse_number('20000000001'), self.parse_number('0')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.005')],
                    [self.parse_number('20000'), self.parse_number('0.0025')],
                    [self.parse_number('100000'), self.parse_number('0.0024')],
                    [self.parse_number('200000'), self.parse_number('0.0022')],
                    [self.parse_number('400000'), self.parse_number('0.0020')],
                    [self.parse_number('600000'), self.parse_number('0.0015')],
                    [self.parse_number('1000000'), self.parse_number('0.0014')],
                    [self.parse_number('2000000'), self.parse_number('0.0013')],
                    [self.parse_number('4000000'), self.parse_number('0.0012')],
                    [self.parse_number('20000000'), self.parse_number('0.0011')],
                    [self.parse_number('50000000'), self.parse_number('0.0010')],
                    [self.parse_number('100000000'), self.parse_number('0.0007')],
                    [self.parse_number('500000000'), self.parse_number('0.0005')],
                    [self.parse_number('2000000000'), self.parse_number('0.0003')],
                    [self.parse_number('6000000000'), self.parse_number('0.0001')],
                    [self.parse_number('20000000000'), self.parse_number('0.00005')],
                    [self.parse_number('20000000001'), self.parse_number('0')],
                ],
            },
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {},
            'deposit': {
                'BTC': 0,
                'BCH': 0,
                'LTC': 0,
                'ETH': 0,
                'XRP': 0,
                'XLM': 0,
                'PAX': 0,
                'USD': 7.5,
                'EUR': 0,
            },
        },
    },
    'exceptions': {
        'exact': {
            'No permission found': PermissionDenied,
            'API key not found': AuthenticationError,
            'IP address not allowed': PermissionDenied,
            'Invalid nonce': InvalidNonce,
            'Invalid signature': AuthenticationError,
            'Authentication failed': AuthenticationError,
            'Missing key, signature and nonce parameters': AuthenticationError,
            'Your account is frozen': PermissionDenied,
            'Please update your profile with your FATCA information, before using API.': PermissionDenied,
            'Order not found': OrderNotFound,
            'Price is more than 20% below market price.': InvalidOrder,
            "Bitstamp.net is under scheduled maintenance. We'll be back soon.": OnMaintenance,  # {"error": "Bitstamp.net is under scheduled maintenance. We'll be back soon."}
            'Order could not be placed.': ExchangeNotAvailable,  # Order could not be placed(perhaps due to internal error or trade halt). Please retry placing order.
            'Invalid offset.': BadRequest,
        },
        'broad': {
            'Minimum order size is': InvalidOrder,  # Minimum order size is 5.0 EUR.
            'Check your account balance for details.': InsufficientFunds,  # You have only 0.00100000 BTC available. Check your account balance for details.
            'Ensure self value has at least': InvalidAddress,  # Ensure self value has at least 25 characters(it has 4).
        },
    },
},
{
    'id': 'luno',
    'name': 'luno',
    'countries': ['GB', 'SG', 'ZA'],
    'rateLimit': 1000,
    'version': '1',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLedger': True,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFees': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'referral': 'https://www.luno.com/invite/44893A',
        'logo': 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',
        'api': {
            'public': 'https://api.luno.com/api',
            'private': 'https://api.luno.com/api',
            'exchange': 'https://api.luno.com/api/exchange',
        },
        'www': 'https://www.luno.com',
        'doc': [
            'https://www.luno.com/en/api',
            'https://npmjs.org/package/bitx',
            'https://github.com/bausmeier/node-bitx',
        ],
    },
    'api': {
        'exchange': {
            'get': [
                'markets',
            ],
        },
        'public': {
            'get': [
                'orderbook',
                'orderbook_top',
                'ticker',
                'tickers',
                'trades',
            ],
        },
        'private': {
            'get': [
                'accounts/{id}/pending',
                'accounts/{id}/transactions',
                'balance',
                'beneficiaries',
                'fee_info',
                'funding_address',
                'listorders',
                'listtrades',
                'orders/{id}',
                'quotes/{id}',
                'withdrawals',
                'withdrawals/{id}',
                'transfers',
                # GET /api/exchange/2/listorders
                # GET /api/exchange/2/orders/{id}
                # GET /api/exchange/3/order
            ],
            'post': [
                'accounts',
                'accounts/{id}/name',
                'postorder',
                'marketorder',
                'stoporder',
                'funding_address',
                'withdrawals',
                'send',
                'quotes',
                'oauth2/grant',
            ],
            'put': [
                'accounts/{id}/name',
                'quotes/{id}',
            ],
            'delete': [
                'quotes/{id}',
                'withdrawals/{id}',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,  # based on volume from your primary currency(not the same for everyone)
            'percentage': True,
            'taker': self.parse_number('0.001'),
            'maker': self.parse_number('0'),
        },
    },
},
{
    'id': 'cex',
    'name': 'CEX.IO',
    'countries': ['GB', 'EU', 'CY', 'RU'],
    'rateLimit': 1500,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': False,
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
    },
    'timeframes': {
        '1m': '1m',
        '1h': '1h',
        '1d': '1d',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',
        'api': 'https://cex.io/api',
        'www': 'https://cex.io',
        'doc': 'https://cex.io/cex-api',
        'fees': [
            'https://cex.io/fee-schedule',
            'https://cex.io/limits-commissions',
        ],
        'referral': 'https://cex.io/r/0/up105393824/0/',
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'uid': True,
    },
    'api': {
        'public': {
            'get': [
                'currency_profile',
                'currency_limits/',
                'last_price/{pair}/',
                'last_prices/{currencies}/',
                'ohlcv/hd/{yyyymmdd}/{pair}',
                'order_book/{pair}/',
                'ticker/{pair}/',
                'tickers/{currencies}/',
                'trade_history/{pair}/',
            ],
            'post': [
                'convert/{pair}',
                'price_stats/{pair}',
            ],
        },
        'private': {
            'post': [
                'active_orders_status/',
                'archived_orders/{pair}/',
                'balance/',
                'cancel_order/',
                'cancel_orders/{pair}/',
                'cancel_replace_order/{pair}/',
                'close_position/{pair}/',
                'get_address/',
                'get_myfee/',
                'get_order/',
                'get_order_tx/',
                'open_orders/{pair}/',
                'open_orders/',
                'open_position/{pair}/',
                'open_positions/{pair}/',
                'place_order/{pair}/',
                'raw_tx_history',
            ],
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.0016'),
            'taker': self.parse_number('0.0025'),
        },
        'funding': {
            'withdraw': {},
            'deposit': {
                # 'USD': amount => amount * 0.035 + 0.25,
                # 'EUR': amount => amount * 0.035 + 0.24,
                # 'RUB': amount => amount * 0.05 + 15.57,
                # 'GBP': amount => amount * 0.035 + 0.2,
                'BTC': 0.0,
                'ETH': 0.0,
                'BCH': 0.0,
                'DASH': 0.0,
                'BTG': 0.0,
                'ZEC': 0.0,
                'XRP': 0.0,
                'XLM': 0.0,
            },
        },
    },
    'exceptions': {
        'exact': {},
        'broad': {
            'Insufficient funds': InsufficientFunds,
            'Nonce must be incremented': InvalidNonce,
            'Invalid Order': InvalidOrder,
            'Order not found': OrderNotFound,
            'limit exceeded': RateLimitExceeded,  # {"error":"rate limit exceeded"}
            'Invalid API key': AuthenticationError,
            'There was an error while placing your order': InvalidOrder,
            'Sorry, too many clients already': DDoSProtection,
        },
    },
    'options': {
        'fetchOHLCVWarning': True,
        'createMarketBuyOrderRequiresPrice': True,
        'order': {
            'status': {
                'c': 'canceled',
                'd': 'closed',
                'cd': 'canceled',
                'a': 'open',
            },
        },
    },
},
{
    'id': 'independentreserve',
    'name': 'Independent Reserve',
    'countries': ['AU', 'NZ'],  # Australia, New Zealand
    'rateLimit': 1000,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87182090-1e9e9080-c2ec-11ea-8e49-563db9a38f37.jpg',
        'api': {
            'public': 'https://api.independentreserve.com/Public',
            'private': 'https://api.independentreserve.com/Private',
        },
        'www': 'https://www.independentreserve.com',
        'doc': 'https://www.independentreserve.com/API',
    },
    'api': {
        'public': {
            'get': [
                'GetValidPrimaryCurrencyCodes',
                'GetValidSecondaryCurrencyCodes',
                'GetValidLimitOrderTypes',
                'GetValidMarketOrderTypes',
                'GetValidOrderTypes',
                'GetValidTransactionTypes',
                'GetMarketSummary',
                'GetOrderBook',
                'GetAllOrders',
                'GetTradeHistorySummary',
                'GetRecentTrades',
                'GetFxRates',
                'GetOrderMinimumVolumes',
                'GetCryptoWithdrawalFees',
            ],
        },
        'private': {
            'post': [
                'GetOpenOrders',
                'GetClosedOrders',
                'GetClosedFilledOrders',
                'GetOrderDetails',
                'GetAccounts',
                'GetTransactions',
                'GetFiatBankAccounts',
                'GetDigitalCurrencyDepositAddress',
                'GetDigitalCurrencyDepositAddresses',
                'GetTrades',
                'GetBrokerageFees',
                'GetDigitalCurrencyWithdrawal',
                'PlaceLimitOrder',
                'PlaceMarketOrder',
                'CancelOrder',
                'SynchDigitalCurrencyDepositAddressWithBlockchain',
                'RequestFiatWithdrawal',
                'WithdrawFiatCurrency',
                'WithdrawDigitalCurrency',
            ],
        },
    },
    'fees': {
        'trading': {
            'taker': 0.5 / 100,
            'maker': 0.5 / 100,
            'percentage': True,
            'tierBased': False,
        },
    },
    'commonCurrencies': {
        'PLA': 'PlayChip',
    },
},
{
    'id': 'bitcoincom',
},
{
    'id': 'bybit',
    'name': 'Bybit',
    'countries': ['VG'],  # British Virgin Islands
    'version': 'v2',
    'userAgent': None,
    # 50 requests per second for GET requests, 1000ms / 50 = 20ms between requests
    # 20 requests per second for POST requests, cost = 50 / 20 = 2.5
    'rateLimit': 20,
    'hostname': 'bybit.com',  # bybit.com, bytick.com
    'has': {
        'CORS': True,
        'spot': True,
        'margin': False,
        'swap': True,
        'future': True,
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRates': False,
        'fetchClosedOrders': True,
        'fetchDeposits': True,
        'fetchFundingRate': True,
        'fetchFundingRateHistory': False,
        'fetchIndexOHLCV': True,
        'fetchLedger': True,
        'fetchMarketLeverageTiers': True,
        'fetchMarkets': True,
        'fetchMarkOHLCV': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPositions': True,
        'fetchPremiumIndexOHLCV': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchTransactions': None,
        'fetchWithdrawals': True,
        'setLeverage': True,
        'setMarginMode': True,
    },
    'timeframes': {
        '1m': '1',
        '3m': '3',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '2h': '120',
        '4h': '240',
        '6h': '360',
        '12h': '720',
        '1d': 'D',
        '1w': 'W',
        '1M': 'M',
        '1y': 'Y',
    },
    'urls': {
        'test': {
            'spot': 'https://api-testnet.{hostname}',
            'futures': 'https://api-testnet.{hostname}',
            'v2': 'https://api-testnet.{hostname}',
            'public': 'https://api-testnet.{hostname}',
            'private': 'https://api-testnet.{hostname}',
        },
        'logo': 'https://user-images.githubusercontent.com/51840849/76547799-daff5b80-649e-11ea-87fb-3be9bac08954.jpg',
        'api': {
            'spot': 'https://api.{hostname}',
            'futures': 'https://api.{hostname}',
            'v2': 'https://api.{hostname}',
            'public': 'https://api.{hostname}',
            'private': 'https://api.{hostname}',
        },
        'www': 'https://www.bybit.com',
        'doc': [
            'https://bybit-exchange.github.io/docs/inverse/',
            'https://bybit-exchange.github.io/docs/linear/',
            'https://github.com/bybit-exchange',
        ],
        'fees': 'https://help.bybit.com/hc/en-us/articles/360039261154',
        'referral': 'https://www.bybit.com/app/register?ref=X7Prm',
    },
    'api': {
        # outdated endpoints -----------------------------------------
        'spot': {
            'public': {
                'get': [
                    'symbols',
                ],
            },
            'quote': {
                'get': [
                    'depth',
                    'depth/merged',
                    'trades',
                    'kline',
                    'ticker/24hr',
                    'ticker/price',
                    'ticker/book_ticker',
                ],
            },
            'private': {
                'get': [
                    'order',
                    'open-orders',
                    'history-orders',
                    'myTrades',
                    'account',
                    'time',
                ],
                'post': [
                    'order',
                ],
                'delete': [
                    'order',
                    'order/fast',
                ],
            },
            'order': {
                'delete': [
                    'batch-cancel',
                    'batch-fast-cancel',
                    'batch-cancel-by-ids',
                ],
            },
        },
        'futures': {
            'private': {
                'get': [
                    'order/list',
                    'order',
                    'stop-order/list',
                    'stop-order',
                    'position/list',
                    'execution/list',
                    'trade/closed-pnl/list',
                ],
                'post': [
                    'order/create',
                    'order/cancel',
                    'order/cancelAll',
                    'order/replace',
                    'stop-order/create',
                    'stop-order/cancel',
                    'stop-order/cancelAll',
                    'stop-order/replace',
                    'position/change-position-margin',
                    'position/trading-stop',
                    'position/leverage/save',
                    'position/switch-mode',
                    'position/switch-isolated',
                    'position/risk-limit',
                ],
            },
        },
        'v2': {
            'public': {
                'get': [
                    'orderBook/L2',
                    'kline/list',
                    'tickers',
                    'trading-records',
                    'symbols',
                    'liq-records',
                    'mark-price-kline',
                    'index-price-kline',
                    'premium-index-kline',
                    'open-interest',
                    'big-deal',
                    'account-ratio',
                    'time',
                    'announcement',
                    'funding/prev-funding-rate',
                    'risk-limit/list',
                ],
            },
            'private': {
                'get': [
                    'order/list',
                    'order',
                    'stop-order/list',
                    'stop-order',
                    'position/list',
                    'execution/list',
                    'trade/closed-pnl/list',
                    'funding/prev-funding-rate',
                    'funding/prev-funding',
                    'funding/predicted-funding',
                    'account/api-key',
                    'account/lcp',
                    'wallet/balance',
                    'wallet/fund/records',
                    'wallet/withdraw/list',
                    'exchange-order/list',
                ],
                'post': [
                    'order/create',
                    'order/cancel',
                    'order/cancelAll',
                    'order/replace',
                    'stop-order/create',
                    'stop-order/cancel',
                    'stop-order/cancelAll',
                    'stop-order/replace',
                    'position/change-position-margin',
                    'position/trading-stop',
                    'position/leverage/save',
                    'position/switch-mode',
                    'position/switch-isolated',
                    'position/risk-limit',
                ],
            },
        },
        # new endpoints ------------------------------------------
        'public': {
            'get': {
                # inverse swap
                'v2/public/orderBook/L2': 1,
                'v2/public/kline/list': 3,
                'v2/public/tickers': 1,
                'v2/public/trading-records': 1,
                'v2/public/symbols': 1,
                'v2/public/mark-price-kline': 3,
                'v2/public/index-price-kline': 3,
                'v2/public/premium-index-kline': 2,
                'v2/public/open-interest': 1,
                'v2/public/big-deal': 1,
                'v2/public/account-ratio': 1,
                'v2/public/funding-rate': 1,
                'v2/public/elite-ratio': 1,
                # linear swap USDT
                'public/linear/kline': 3,
                'public/linear/recent-trading-records': 1,
                'public/linear/funding/prev-funding-rate': 1,
                'public/linear/mark-price-kline': 1,
                'public/linear/index-price-kline': 1,
                'public/linear/premium-index-kline': 1,
                # spot
                'spot/v1/time': 1,
                'spot/v1/symbols': 1,
                'spot/quote/v1/depth': 1,
                'spot/quote/v1/depth/merged': 1,
                'spot/quote/v1/trades': 1,
                'spot/quote/v1/kline': 1,
                'spot/quote/v1/ticker/24hr': 1,
                'spot/quote/v1/ticker/price': 1,
                'spot/quote/v1/ticker/book_ticker': 1,
                # data
                'v2/public/time': 1,
                'v2/public/announcement': 1,
                # USDC endpoints are testnet only as of 2022 Jan 11 ----------
                # option USDC(testnet only)
                'option/usdc/openapi/public/v1/order-book': 1,
                'option/usdc/openapi/public/v1/symbols': 1,
                'option/usdc/openapi/public/v1/tick': 1,
                'option/usdc/openapi/public/v1/delivery-price': 1,
                'option/usdc/openapi/public/v1/query-trade-latest': 1,
                # perpetual swap USDC(testnet only)
                'perpetual/usdc/openapi/public/v1/order-book': 1,
                'perpetual/usdc/openapi/public/v1/symbols': 1,
                'perpetual/usdc/openapi/public/v1/tick': 1,
                'perpetual/usdc/openapi/public/v1/kline/list': 1,
                'perpetual/usdc/openapi/public/v1/mark-price-kline': 1,
                'perpetual/usdc/openapi/public/v1/index-price-kline': 1,
                'perpetual/usdc/openapi/public/v1/premium-index-kline': 1,
                'perpetual/usdc/openapi/public/v1/open-interest': 1,
                'perpetual/usdc/openapi/public/v1/big-deal': 1,
                'perpetual/usdc/openapi/public/v1/account-ratio': 1,
            },
            # outdated endpoints--------------------------------------
            'linear': {
                'get': [
                    'kline',
                    'recent-trading-records',
                    'funding/prev-funding-rate',
                    'mark-price-kline',
                    'index-price-kline',
                    'premium-index-kline',
                    'risk-limit',
                ],
            },
        },
        # new endpoints ------------------------------------------
        'private': {
            'get': {
                # inverse swap
                'v2/private/order/list': 5,
                'v2/private/order': 5,
                'v2/private/stop-order/list': 5,
                'v2/private/stop-order': 1,
                'v2/private/position/list': 25,
                'v2/private/execution/list': 25,
                'v2/private/trade/closed-pnl/list': 1,
                'v2/public/risk-limit/list': 1,  # TODO check
                'v2/public/funding/prev-funding-rate': 25,  # TODO check
                'v2/private/funding/prev-funding': 25,
                'v2/private/funding/predicted-funding': 25,
                'v2/private/account/api-key': 5,
                'v2/private/account/lcp': 1,
                'v2/private/wallet/balance': 25,  # 120 per minute = 2 per second => cost = 50 / 2 = 25
                'v2/private/wallet/fund/records': 25,
                'v2/private/wallet/withdraw/list': 25,
                'v2/private/exchange-order/list': 1,
                # linear swap USDT
                'private/linear/order/list': 5,  # 600 per minute = 10 per second => cost = 50 / 10 =  5
                'private/linear/order/search': 5,
                'private/linear/stop-order/list': 5,
                'private/linear/stop-order/search': 5,
                'private/linear/position/list': 25,
                'private/linear/trade/execution/list': 25,
                'private/linear/trade/closed-pnl/list': 25,
                'public/linear/risk-limit': 1,
                'private/linear/funding/predicted-funding': 25,
                'private/linear/funding/prev-funding': 25,
                # inverse futures
                'futures/private/order/list': 5,
                'futures/private/order': 5,
                'futures/private/stop-order/list': 5,
                'futures/private/stop-order': 5,
                'futures/private/position/list': 25,
                'futures/private/execution/list': 25,
                'futures/private/trade/closed-pnl/list': 1,
                # spot
                'spot/v1/account': 2.5,
                'spot/v1/order': 2.5,
                'spot/v1/open-orders': 2.5,
                'spot/v1/history-orders': 2.5,
                'spot/v1/myTrades': 2.5,
                # account
                'asset/v1/private/transfer/list': 50,  # 60 per minute = 1 per second => cost = 50 / 1 = 50
                'asset/v1/private/sub-member/transfer/list': 50,
                'asset/v1/private/sub-member/member-ids': 50,
            },
            'post': {
                # inverse swap
                'v2/private/order/create': 30,
                'v2/private/order/cancel': 30,
                'v2/private/order/cancelAll': 300,  # 100 per minute + 'consumes 10 requests'
                'v2/private/order/replace': 30,
                'v2/private/stop-order/create': 30,
                'v2/private/stop-order/cancel': 30,
                'v2/private/stop-order/cancelAll': 300,
                'v2/private/stop-order/replace': 30,
                'v2/private/position/change-position-margin': 40,
                'v2/private/position/trading-stop': 40,
                'v2/private/position/leverage/save': 40,
                'v2/private/tpsl/switch-mode': 40,
                'v2/private/position/switch-isolated': 2.5,
                'v2/private/position/risk-limit': 2.5,
                'v2/private/position/switch-mode': 2.5,
                # linear swap USDT
                'private/linear/order/create': 30,  # 100 per minute = 1.666 per second => cost = 50 / 1.6666 = 30
                'private/linear/order/cancel': 30,
                'private/linear/order/cancel-all': 300,  # 100 per minute + 'consumes 10 requests'
                'private/linear/order/replace': 30,
                'private/linear/stop-order/create': 30,
                'private/linear/stop-order/cancel': 30,
                'private/linear/stop-order/cancel-all': 300,
                'private/linear/stop-order/replace': 30,
                'private/linear/position/set-auto-add-margin': 40,
                'private/linear/position/switch-isolated': 40,
                'private/linear/position/switch-mode': 40,
                'private/linear/tpsl/switch-mode': 2.5,
                'private/linear/position/add-margin': 40,
                'private/linear/position/set-leverage': 40,  # 75 per minute = 1.25 per second => cost = 50 / 1.25 = 40
                'private/linear/position/trading-stop': 40,
                'private/linear/position/set-risk': 2.5,
                # inverse futures
                'futures/private/order/create': 30,
                'futures/private/order/cancel': 30,
                'futures/private/order/cancelAll': 30,
                'futures/private/order/replace': 30,
                'futures/private/stop-order/create': 30,
                'futures/private/stop-order/cancel': 30,
                'futures/private/stop-order/cancelAll': 30,
                'futures/private/stop-order/replace': 30,
                'futures/private/position/change-position-margin': 40,
                'futures/private/position/trading-stop': 40,
                'futures/private/position/leverage/save': 40,
                'futures/private/position/switch-mode': 40,
                'futures/private/tpsl/switch-mode': 40,
                'futures/private/position/switch-isolated': 40,
                'futures/private/position/risk-limit': 2.5,
                # spot
                'spot/v1/order': 2.5,
                # account
                'asset/v1/private/transfer': 150,  # 20 per minute = 0.333 per second => cost = 50 / 0.3333 = 150
                'asset/v1/private/sub-member/transfer': 150,
                # USDC endpoints are testnet only as of 2022 Jan 11 ----------
                # option USDC(testnet only)
                'option/usdc/openapi/private/v1/place-order': 2.5,
                'option/usdc/openapi/private/v1/batch-place-order': 2.5,
                'option/usdc/openapi/private/v1/replace-order': 2.5,
                'option/usdc/openapi/private/v1/batch-replace-orders': 2.5,
                'option/usdc/openapi/private/v1/cancel-order': 2.5,
                'option/usdc/openapi/private/v1/batch-cancel-orders': 2.5,
                'option/usdc/openapi/private/v1/cancel-all': 2.5,
                'option/usdc/openapi/private/v1/query-active-orders': 2.5,
                'option/usdc/openapi/private/v1/query-order-history': 2.5,
                'option/usdc/openapi/private/v1/execution-list': 2.5,
                'option/usdc/openapi/private/v1/query-transaction-log': 2.5,
                'option/usdc/openapi/private/v1/query-wallet-balance': 2.5,
                'option/usdc/openapi/private/v1/query-asset-info': 2.5,
                'option/usdc/openapi/private/v1/query-margin-info': 2.5,
                'option/usdc/openapi/private/v1/query-position': 2.5,
                'option/usdc/openapi/private/v1/query-delivery-list': 2.5,
                'option/usdc/openapi/private/v1/query-position-exp-date': 2.5,
                'option/usdc/openapi/private/v1/mmp-modify': 2.5,
                'option/usdc/openapi/private/v1/mmp-reset': 2.5,
                # perpetual swap USDC(testnet only)
                'perpetual/usdc/openapi/private/v1/place-order': 2.5,
                'perpetual/usdc/openapi/private/v1/replace-order': 2.5,
                'perpetual/usdc/openapi/private/v1/cancel-order': 2.5,
                'perpetual/usdc/openapi/private/v1/cancel-all': 2.5,
                'perpetual/usdc/openapi/private/v1/position/leverage/save': 2.5,
                'option/usdc/openapi/private/v1/session-settlement': 2.5,
                'perpetual/usdc/openapi/public/v1/risk-limit/list': 2.5,
                'perpetual/usdc/openapi/private/v1/position/set-risk-limit': 2.5,
            },
            'delete': {
                # spot
                'spot/v1/order': 2.5,
                'spot/v1/order/fast': 2.5,
                'spot/order/batch-cancel': 2.5,
                'spot/order/batch-fast-cancel': 2.5,
                'spot/order/batch-cancel-by-ids': 2.5,
            },
            # outdated endpoints -------------------------------------
            'linear': {
                'get': [
                    'order/list',
                    'order/search',
                    'stop-order/list',
                    'stop-order/search',
                    'position/list',
                    'trade/execution/list',
                    'trade/closed-pnl/list',
                    'funding/predicted-funding',
                    'funding/prev-funding',
                ],
                'post': [
                    'order/create',
                    'order/cancel',
                    'order/cancel-all',
                    'order/replace',
                    'stop-order/create',
                    'stop-order/cancel',
                    'stop-order/cancel-all',
                    'stop-order/replace',
                    'position/set-auto-add-margin',
                    'position/switch-isolated',
                    'position/switch-mode',
                    'tpsl/switch-mode',
                    'position/add-margin',
                    'position/set-leverage',
                    'position/trading-stop',
                    'position/set-risk',
                ],
            },
        },
    },
    'httpExceptions': {
        '403': RateLimitExceeded,  # Forbidden -- You request too many times
    },
    'exceptions': {
        'exact': {
            '-2015': AuthenticationError,  # Invalid API-key, IP, or permissions for action.
            '10001': BadRequest,  # parameter error
            '10002': InvalidNonce,  # request expired, check your timestamp and recv_window
            '10003': AuthenticationError,  # Invalid apikey
            '10004': AuthenticationError,  # invalid sign
            '10005': PermissionDenied,  # permission denied for current apikey
            '10006': RateLimitExceeded,  # too many requests
            '10007': AuthenticationError,  # api_key not found in your request parameters
            '10010': PermissionDenied,  # request ip mismatch
            '10017': BadRequest,  # request path not found or request method is invalid
            '10018': RateLimitExceeded,  # exceed ip rate limit
            '20001': OrderNotFound,  # Order not exists
            '20003': InvalidOrder,  # missing parameter side
            '20004': InvalidOrder,  # invalid parameter side
            '20005': InvalidOrder,  # missing parameter symbol
            '20006': InvalidOrder,  # invalid parameter symbol
            '20007': InvalidOrder,  # missing parameter order_type
            '20008': InvalidOrder,  # invalid parameter order_type
            '20009': InvalidOrder,  # missing parameter qty
            '20010': InvalidOrder,  # qty must be greater than 0
            '20011': InvalidOrder,  # qty must be an integer
            '20012': InvalidOrder,  # qty must be greater than zero and less than 1 million
            '20013': InvalidOrder,  # missing parameter price
            '20014': InvalidOrder,  # price must be greater than 0
            '20015': InvalidOrder,  # missing parameter time_in_force
            '20016': InvalidOrder,  # invalid value for parameter time_in_force
            '20017': InvalidOrder,  # missing parameter order_id
            '20018': InvalidOrder,  # invalid date format
            '20019': InvalidOrder,  # missing parameter stop_px
            '20020': InvalidOrder,  # missing parameter base_price
            '20021': InvalidOrder,  # missing parameter stop_order_id
            '20022': BadRequest,  # missing parameter leverage
            '20023': BadRequest,  # leverage must be a number
            '20031': BadRequest,  # leverage must be greater than zero
            '20070': BadRequest,  # missing parameter margin
            '20071': BadRequest,  # margin must be greater than zero
            '20084': BadRequest,  # order_id or order_link_id is required
            '30001': BadRequest,  # order_link_id is repeated
            '30003': InvalidOrder,  # qty must be more than the minimum allowed
            '30004': InvalidOrder,  # qty must be less than the maximum allowed
            '30005': InvalidOrder,  # price exceeds maximum allowed
            '30007': InvalidOrder,  # price exceeds minimum allowed
            '30008': InvalidOrder,  # invalid order_type
            '30009': ExchangeError,  # no position found
            '30010': InsufficientFunds,  # insufficient wallet balance
            '30011': PermissionDenied,  # operation not allowed as position is undergoing liquidation
            '30012': PermissionDenied,  # operation not allowed as position is undergoing ADL
            '30013': PermissionDenied,  # position is in liq or adl status
            '30014': InvalidOrder,  # invalid closing order, qty should not greater than size
            '30015': InvalidOrder,  # invalid closing order, side should be opposite
            '30016': ExchangeError,  # TS and SL must be cancelled first while closing position
            '30017': InvalidOrder,  # estimated fill price cannot be lower than current Buy liq_price
            '30018': InvalidOrder,  # estimated fill price cannot be higher than current Sell liq_price
            '30019': InvalidOrder,  # cannot attach TP/SL params for non-zero position when placing non-opening position order
            '30020': InvalidOrder,  # position already has TP/SL params
            '30021': InvalidOrder,  # cannot afford estimated position_margin
            '30022': InvalidOrder,  # estimated buy liq_price cannot be higher than current mark_price
            '30023': InvalidOrder,  # estimated sell liq_price cannot be lower than current mark_price
            '30024': InvalidOrder,  # cannot set TP/SL/TS for zero-position
            '30025': InvalidOrder,  # trigger price should bigger than 10% of last price
            '30026': InvalidOrder,  # price too high
            '30027': InvalidOrder,  # price set for Take profit should be higher than Last Traded Price
            '30028': InvalidOrder,  # price set for Stop loss should be between Liquidation price and Last Traded Price
            '30029': InvalidOrder,  # price set for Stop loss should be between Last Traded Price and Liquidation price
            '30030': InvalidOrder,  # price set for Take profit should be lower than Last Traded Price
            '30031': InsufficientFunds,  # insufficient available balance for order cost
            '30032': InvalidOrder,  # order has been filled or cancelled
            '30033': RateLimitExceeded,  # The number of stop orders exceeds maximum limit allowed
            '30034': OrderNotFound,  # no order found
            '30035': RateLimitExceeded,  # too fast to cancel
            '30036': ExchangeError,  # the expected position value after order execution exceeds the current risk limit
            '30037': InvalidOrder,  # order already cancelled
            '30041': ExchangeError,  # no position found
            '30042': InsufficientFunds,  # insufficient wallet balance
            '30043': InvalidOrder,  # operation not allowed as position is undergoing liquidation
            '30044': InvalidOrder,  # operation not allowed as position is undergoing AD
            '30045': InvalidOrder,  # operation not allowed as position is not normal status
            '30049': InsufficientFunds,  # insufficient available balance
            '30050': ExchangeError,  # any adjustments made will trigger immediate liquidation
            '30051': ExchangeError,  # due to risk limit, cannot adjust leverage
            '30052': ExchangeError,  # leverage can not less than 1
            '30054': ExchangeError,  # position margin is invalid
            '30057': ExchangeError,  # requested quantity of contracts exceeds risk limit
            '30063': ExchangeError,  # reduce-only rule not satisfied
            '30067': InsufficientFunds,  # insufficient available balance
            '30068': ExchangeError,  # exit value must be positive
            '30074': InvalidOrder,  # can't create the stop order, because you expect the order will be triggered when the LastPrice(or IndexPrice、 MarkPrice, determined by trigger_by) is raising to stop_px, but the LastPrice(or IndexPrice、 MarkPrice) is already equal to or greater than stop_px, please adjust base_price or stop_px
            '30075': InvalidOrder,  # can't create the stop order, because you expect the order will be triggered when the LastPrice(or IndexPrice、 MarkPrice, determined by trigger_by) is falling to stop_px, but the LastPrice(or IndexPrice、 MarkPrice) is already equal to or less than stop_px, please adjust base_price or stop_px
            '30078': ExchangeError,  # {"ret_code":30078,"ret_msg":"","ext_code":"","ext_info":"","result":null,"time_now":"1644853040.916000","rate_limit_status":73,"rate_limit_reset_ms":1644853040912,"rate_limit":75}
            # '30084': BadRequest,  # Isolated not modified, see handleErrors below
            '33004': AuthenticationError,  # apikey already expired
            '34026': ExchangeError,  # the limit is no change
            '130021': InsufficientFunds,  # {"ret_code":130021,"ret_msg":"orderfix price failed for CannotAffordOrderCost.","ext_code":"","ext_info":"","result":null,"time_now":"1644588250.204878","rate_limit_status":98,"rate_limit_reset_ms":1644588250200,"rate_limit":100}
        },
        'broad': {
            'unknown orderInfo': OrderNotFound,  # {"ret_code":-1,"ret_msg":"unknown orderInfo","ext_code":"","ext_info":"","result":null,"time_now":"1584030414.005545","rate_limit_status":99,"rate_limit_reset_ms":1584030414003,"rate_limit":100}
            'invalid api_key': AuthenticationError,  # {"ret_code":10003,"ret_msg":"invalid api_key","ext_code":"","ext_info":"","result":null,"time_now":"1599547085.415797"}
        },
    },
    'precisionMode': TICK_SIZE,
    'options': {
        'marketTypes': {
            'BTC/USDT': 'linear',
            'ETH/USDT': 'linear',
            'BNB/USDT': 'linear',
            'ADA/USDT': 'linear',
            'DOGE/USDT': 'linear',
            'XRP/USDT': 'linear',
            'DOT/USDT': 'linear',
            'UNI/USDT': 'linear',
            'BCH/USDT': 'linear',
            'LTC/USDT': 'linear',
            'SOL/USDT': 'linear',
            'LINK/USDT': 'linear',
            'MATIC/USDT': 'linear',
            'ETC/USDT': 'linear',
            'FIL/USDT': 'linear',
            'EOS/USDT': 'linear',
            'AAVE/USDT': 'linear',
            'XTZ/USDT': 'linear',
            'SUSHI/USDT': 'linear',
            'XEM/USDT': 'linear',
            'BTC/USD': 'inverse',
            'ETH/USD': 'inverse',
            'EOS/USD': 'inverse',
            'XRP/USD': 'inverse',
        },
        'defaultType': 'linear',  # linear, inverse, futures
        #
        # ^
        # |
        # | self will be replaced with the following soon |
        #                                                 |
        #                                                 v
        #
        # 'defaultType': 'swap',  # swap, spot, future, option
        'code': 'BTC',
        'cancelAllOrders': {
            # 'method': 'v2PrivatePostOrderCancelAll',  # v2PrivatePostStopOrderCancelAll
        },
        'recvWindow': 5 * 1000,  # 5 sec default
        'timeDifference': 0,  # the difference between system clock and exchange server clock
        'adjustForTimeDifference': False,  # controls the adjustment logic upon instantiation
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'taker': 0.00075,
            'maker': -0.00025,
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {},
            'deposit': {},
        },
    },
},
{
    'id': 'cryptocom',
    'name': 'Crypto.com',
    'countries': ['MT'],
    'version': 'v2',
    'rateLimit': 10,  # 100 requests per second
    'has': {
        'CORS': False,
        'spot': True,
        'margin': None,  # has but not fully implemented
        'swap': None,  # has but not fully implemented
        'future': None,  # has but not fully implemented
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchBidsAsks': False,
        'fetchClosedOrders': 'emulated',
        'fetchCurrencies': False,
        'fetchDepositAddress': True,
        'fetchDepositAddressesByNetwork': True,
        'fetchDeposits': True,
        'fetchFundingFees': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRates': False,
        'fetchIsolatedPositions': False,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPositions': False,
        'fetchStatus': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': False,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchTransactions': False,
        'fetchTransfers': True,
        'fetchWithdrawals': True,
        'setLeverage': False,
        'setMarginMode': False,
        'transfer': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '6h': '6h',
        '12h': '12h',
        '1d': '1D',
        '1w': '7D',
        '2w': '14D',
        '1M': '1M',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/147792121-38ed5e36-c229-48d6-b49a-48d05fc19ed4.jpeg',
        'test': 'https://uat-api.3ona.co/v2',
        'api': {
            'spot': 'https://api.crypto.com/v2',
            'derivatives': 'https://deriv-api.crypto.com/v1',
        },
        'www': 'https://crypto.com/',
        'referral': 'https://crypto.com/exch/5835vstech',
        'doc': 'https://exchange-docs.crypto.com/',
        'fees': 'https://crypto.com/exchange/document/fees-limits',
    },
    'api': {
        'spot': {
            'public': {
                'get': {
                    'public/auth': 1,
                    'public/get-instruments': 1,
                    'public/get-book': 1,
                    'public/get-candlestick': 1,
                    'public/get-ticker': 1,
                    'public/get-trades': 1,
                    'public/margin/get-transfer-currencies': 1,
                    'public/margin/get-load-currenices': 1,
                    'public/respond-heartbeat': 1,
                },
            },
            'private': {
                'post': {
                    'private/set-cancel-on-disconnect': 10 / 3,
                    'private/get-cancel-on-disconnect': 10 / 3,
                    'private/create-withdrawal': 10 / 3,
                    'private/get-withdrawal-history': 10 / 3,
                    'private/get-deposit-history': 10 / 3,
                    'private/get-deposit-address': 10 / 3,
                    'private/get-account-summary': 10 / 3,
                    'private/create-order': 2 / 3,
                    'private/cancel-order': 2 / 3,
                    'private/cancel-all-orders': 2 / 3,
                    'private/get-order-history': 10 / 3,
                    'private/get-open-orders': 10 / 3,
                    'private/get-order-detail': 1 / 3,
                    'private/get-trades': 100,
                    'private/margin/get-user-config': 10 / 3,
                    'private/margin/get-account-summary': 10 / 3,
                    'private/margin/transfer': 10 / 3,
                    'private/margin/borrow': 10 / 3,
                    'private/margin/repay': 10 / 3,
                    'private/margin/get-transfer-history': 10 / 3,
                    'private/margin/get-borrow-history': 10 / 3,
                    'private/margin/get-interest-history': 10 / 3,
                    'private/margin/get-repay-history': 10 / 3,
                    'private/margin/get-liquidation-history': 10 / 3,
                    'private/margin/get-liquidation-orders': 10 / 3,
                    'private/margin/create-order': 2 / 3,
                    'private/margin/cancel-order': 2 / 3,
                    'private/margin/cancel-all-orders': 2 / 3,
                    'private/margin/get-order-history': 10 / 3,
                    'private/margin/get-open-orders': 10 / 3,
                    'private/margin/get-order-detail': 1 / 3,
                    'private/margin/get-trades': 100,
                    'private/deriv/transfer': 10 / 3,
                    'private/deriv/get-transfer-history': 10 / 3,
                    'private/subaccount/get-sub-accounts': 10 / 3,
                    'private/subaccount/get-transfer-history': 10 / 3,
                    'private/subaccount/transfer': 10 / 3,
                },
            },
        },
        'derivatives': {
            'public': {
                'get': {
                    'public/auth': 10 / 3,
                    'public/get-instruments': 10 / 3,
                    'public/get-book': 1,
                    'public/get-candlestick': 1,
                    'public/get-trades': 1,
                    'public/get-tickers': 1,
                    'public/get-valuations': 1,
                    'public/get-expired-settlement-price': 10 / 3,
                    'public/get-insurance': 1,
                },
            },
            'private': {
                'post': {
                    'private/set-cancel-on-disconnect': 10 / 3,
                    'private/get-cancel-on-disconnect': 10 / 3,
                    'private/user-balance': 10 / 3,
                    'private/user-balance-history': 10 / 3,
                    'private/get-positions': 10 / 3,
                    'private/create-order': 2 / 3,
                    'private/cancel-order': 2 / 3,
                    'private/cancel-all-orders': 2 / 3,
                    'private/close-position': 10 / 3,
                    'private/convert-collateral': 10 / 3,
                    'private/get-order-history': 100,
                    'private/get-open-orders': 10 / 3,
                    'private/get-order-detail': 1 / 3,
                    'private/get-trades': 100,
                    'private/change-account-leverage': 10 / 3,
                    'private/get-transactions': 10 / 3,
                },
            },
        },
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.004'),
            'taker': self.parse_number('0.004'),
            'tiers': {
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.004')],
                    [self.parse_number('25000'), self.parse_number('0.0035')],
                    [self.parse_number('50000'), self.parse_number('0.0015')],
                    [self.parse_number('100000'), self.parse_number('0.001')],
                    [self.parse_number('250000'), self.parse_number('0.0009')],
                    [self.parse_number('1000000'), self.parse_number('0.0008')],
                    [self.parse_number('20000000'), self.parse_number('0.0007')],
                    [self.parse_number('100000000'), self.parse_number('0.0006')],
                    [self.parse_number('200000000'), self.parse_number('0.0004')],
                ],
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.004')],
                    [self.parse_number('25000'), self.parse_number('0.0035')],
                    [self.parse_number('50000'), self.parse_number('0.0025')],
                    [self.parse_number('100000'), self.parse_number('0.0016')],
                    [self.parse_number('250000'), self.parse_number('0.00015')],
                    [self.parse_number('1000000'), self.parse_number('0.00014')],
                    [self.parse_number('20000000'), self.parse_number('0.00013')],
                    [self.parse_number('100000000'), self.parse_number('0.00012')],
                    [self.parse_number('200000000'), self.parse_number('0.0001')],
                ],
            },
        },
    },
    'options': {
        'defaultType': 'spot',
        'accountsByType': {
            'spot': 'SPOT',
            'derivatives': 'DERIVATIVES',
            'swap': 'DERIVATIVES',
            'future': 'DERIVATIVES',
        },
    },
    # https://exchange-docs.crypto.com/spot/index.html#response-and-reason-codes
    'commonCurrencies': {
        'USD_STABLE_COIN': 'USDC',
    },
    'exceptions': {
        'exact': {
            '10001': ExchangeError,
            '10002': PermissionDenied,
            '10003': PermissionDenied,
            '10004': BadRequest,
            '10005': PermissionDenied,
            '10006': DDoSProtection,
            '10007': InvalidNonce,
            '10008': BadRequest,
            '10009': BadRequest,
            '20001': BadRequest,
            '20002': InsufficientFunds,
            '20005': AccountNotEnabled,  # {"id":"123xxx","method":"private/margin/xxx","code":"20005","message":"ACCOUNT_NOT_FOUND"}
            '30003': BadSymbol,
            '30004': BadRequest,
            '30005': BadRequest,
            '30006': BadRequest,
            '30007': BadRequest,
            '30008': BadRequest,
            '30009': BadRequest,
            '30010': BadRequest,
            '30013': BadRequest,
            '30014': BadRequest,
            '30016': BadRequest,
            '30017': BadRequest,
            '30023': BadRequest,
            '30024': BadRequest,
            '30025': BadRequest,
            '40001': BadRequest,
            '40002': BadRequest,
            '40003': BadRequest,
            '40004': BadRequest,
            '40005': BadRequest,
            '40006': BadRequest,
            '40007': BadRequest,
            '40101': AuthenticationError,
            '50001': BadRequest,
        },
    },
},
{
    'id': 'huobipro',
    'alias': True,
},
{
    'id': 'coinex',
    'name': 'CoinEx',
    'version': 'v1',
    'countries': ['CN'],
    'rateLimit': 50,  # Normal limit frequency is single IP：200 times / 10 seconds
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': None,  # has but unimplemented
        'future': None,  # has but unimplemented
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchDeposits': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1min',
        '3m': '3min',
        '5m': '5min',
        '15m': '15min',
        '30m': '30min',
        '1h': '1hour',
        '2h': '2hour',
        '4h': '4hour',
        '6h': '6hour',
        '12h': '12hour',
        '1d': '1day',
        '3d': '3day',
        '1w': '1week',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87182089-1e05fa00-c2ec-11ea-8da9-cc73b45abbbc.jpg',
        'api': {
            'public': 'https://api.coinex.com',
            'private': 'https://api.coinex.com',
            'perpetualPublic': 'https://api.coinex.com/perpetual',
            'perpetualPrivate': 'https://api.coinex.com/perpetual',
        },
        'www': 'https://www.coinex.com',
        'doc': 'https://github.com/coinexcom/coinex_exchange_api/wiki',
        'fees': 'https://www.coinex.com/fees',
        'referral': 'https://www.coinex.com/register?refer_code=yw5fz',
    },
    'api': {
        'public': {
            'get': {
                'amm/market': 1,
                'common/currency/rate': 1,
                'common/asset/config': 1,
                'common/maintain/info': 1,
                'common/temp-maintain/info': 1,
                'margin/market': 1,
                'market/info': 1,
                'market/list': 1,
                'market/ticker': 1,
                'market/ticker/all': 1,
                'market/depth': 1,
                'market/deals': 1,
                'market/kline': 1,
                'market/detail': 1,
            },
        },
        'private': {
            'get': {
                'account/amm/balance': 1,
                'account/investment/balance': 1,
                'account/balance/history': 1,
                'account/market/fee': 1,
                'balance/coin/deposit': 1,
                'balance/coin/withdraw': 1,
                'balance/info': 1,
                'balance/deposit/address/{coin_type}': 1,
                'contract/transfer/history': 1,
                'credit/info': 1,
                'credit/balance': 1,
                'investment/transfer/history': 1,
                'margin/account': 1,
                'margin/config': 1,
                'margin/loan/history': 1,
                'margin/transfer/history': 1,
                'order': 1,
                'order/deals': 1,
                'order/finished': 1,
                'order/pending': 1,
                'order/status': 1,
                'order/status/batch': 1,
                'order/user/deals': 1,
                'order/stop/finished': 1,
                'order/stop/pending': 1,
                'order/user/trade/fee': 1,
                'order/market/trade/info': 1,
                'sub_account/balance': 1,
                'sub_account/transfer/history': 1,
                'sub_account/auth/api/{user_auth_id}': 1,
            },
            'post': {
                'balance/coin/withdraw': 1,
                'contract/balance/transfer': 1,
                'margin/flat': 1,
                'margin/loan': 1,
                'margin/transfer': 1,
                'order/limit/batch': 1,
                'order/ioc': 1,
                'order/limit': 1,
                'order/market': 1,
                'order/stop/limit': 1,
                'order/stop/market': 1,
                'sub_account/transfer': 1,
                'sub_account/register': 1,
                'sub_account/unfrozen': 1,
                'sub_account/frozen': 1,
                'sub_account/auth/api': 1,
            },
            'put': {
                'balance/deposit/address/{coin_type}': 1,
                'sub_account/auth/api/{user_auth_id}': 1,
                'v1/account/settings': 1,
            },
            'delete': {
                'balance/coin/withdraw': 1,
                'order/pending/batch': 1,
                'order/pending': 1,
                'order/stop/pending': 1,
                'order/stop/pending/{id}': 1,
                'sub_account/auth/api/{user_auth_id}': 1,
            },
        },
        'perpetualPublic': {
            'get': {
                'ping': 1,
                'time': 1,
                'market/list': 1,
                'market/limit_config': 1,
                'market/ticker': 1,
                'market/ticker/all': 1,
                'market/depth': 1,
                'market/deals': 1,
                'market/funding_history': 1,
                'market/user_deals': 1,
                'market/kline': 1,
            },
        },
        'perpetualPrivate': {
            'get': {
                'asset/query': 1,
                'order/pending': 1,
                'order/finished': 1,
                'order/stop_pending': 1,
                'order/status': 1,
                'position/pending': 1,
                'position/funding': 1,
            },
            'post': {
                'market/adjust_leverage': 1,
                'market/position_expect': 1,
                'order/put_limit': 1,
                'order/put_market': 1,
                'order/put_stop_limit': 1,
                'order/cancel': 1,
                'order/cancel_all': 1,
                'order/cancel_stop': 1,
                'order/cancel_stop_all': 1,
                'order/close_limit': 1,
                'order/close_market': 1,
                'position/adjust_margin': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'maker': 0.001,
            'taker': 0.001,
        },
        'funding': {
            'withdraw': {
                'BCH': 0.0,
                'BTC': 0.001,
                'LTC': 0.001,
                'ETH': 0.001,
                'ZEC': 0.0001,
                'DASH': 0.0001,
            },
        },
    },
    'limits': {
        'amount': {
            'min': 0.001,
            'max': None,
        },
    },
    'precision': {
        'amount': 8,
        'price': 8,
    },
    'options': {
        'createMarketBuyOrderRequiresPrice': True,
    },
    'commonCurrencies': {
        'ACM': 'Actinium',
    },
},
{
    'id': 'coinbasepro',
    'name': 'Coinbase Pro',
    'countries': ['US'],
    'rateLimit': 100,
    'userAgent': self.userAgents['chrome'],
    'pro': True,
    'has': {
        'CORS': True,
        'spot': True,
        'margin': None,  # has but not fully inplemented
        'swap': None,  # has but not fully inplemented
        'future': None,  # has but not fully inplemented
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'deposit': True,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': None,  # the exchange does not have self method, only createDepositAddress, see https://github.com/ccxt/ccxt/pull/7405
        'fetchDeposits': True,
        'fetchLedger': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': 60,
        '5m': 300,
        '15m': 900,
        '1h': 3600,
        '6h': 21600,
        '1d': 86400,
    },
    'hostname': 'pro.coinbase.com',
    'urls': {
        'test': {
            'public': 'https://api-public.sandbox.pro.coinbase.com',
            'private': 'https://api-public.sandbox.pro.coinbase.com',
        },
        'logo': 'https://user-images.githubusercontent.com/1294454/41764625-63b7ffde-760a-11e8-996d-a6328fa9347a.jpg',
        'api': {
            'public': 'https://api.{hostname}',
            'private': 'https://api.{hostname}',
        },
        'www': 'https://pro.coinbase.com/',
        'doc': 'https://docs.pro.coinbase.com',
        'fees': [
            'https://docs.pro.coinbase.com/#fees',
            'https://support.pro.coinbase.com/customer/en/portal/articles/2945310-fees',
        ],
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'password': True,
    },
    'api': {
        'public': {
            'get': [
                'currencies',
                'products',
                'products/{id}',
                'products/{id}/book',
                'products/{id}/candles',
                'products/{id}/stats',
                'products/{id}/ticker',
                'products/{id}/trades',
                'time',
                'products/spark-lines',  # experimental
            ],
        },
        'private': {
            'get': [
                'accounts',
                'accounts/{id}',
                'accounts/{id}/holds',
                'accounts/{id}/ledger',
                'accounts/{id}/transfers',
                'coinbase-accounts',
                'fills',
                'funding',
                'fees',
                'margin/profile_information',
                'margin/buying_power',
                'margin/withdrawal_power',
                'margin/withdrawal_power_all',
                'margin/exit_plan',
                'margin/liquidation_history',
                'margin/position_refresh_amounts',
                'margin/status',
                'oracle',
                'orders',
                'orders/{id}',
                'orders/client:{client_oid}',
                'otc/orders',
                'payment-methods',
                'position',
                'profiles',
                'profiles/{id}',
                'reports/{report_id}',
                'transfers',
                'transfers/{transfer_id}',
                'users/self/exchange-limits',
                'users/self/hold-balances',
                'users/self/trailing-volume',
                'withdrawals/fee-estimate',
            ],
            'post': [
                'conversions',
                'deposits/coinbase-account',
                'deposits/payment-method',
                'coinbase-accounts/{id}/addresses',
                'funding/repay',
                'orders',
                'position/close',
                'profiles/margin-transfer',
                'profiles/transfer',
                'reports',
                'withdrawals/coinbase',
                'withdrawals/coinbase-account',
                'withdrawals/crypto',
                'withdrawals/payment-method',
            ],
            'delete': [
                'orders',
                'orders/client:{client_oid}',
                'orders/{id}',
            ],
        },
    },
    'commonCurrencies': {
        'CGLD': 'CELO',
    },
    'precisionMode': TICK_SIZE,
    'fees': {
        'trading': {
            'tierBased': True,  # complicated tier system per coin
            'percentage': True,
            'maker': 0.5 / 100,  # highest fee of all tiers
            'taker': 0.5 / 100,  # highest fee of all tiers
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {
                'BCH': 0,
                'BTC': 0,
                'LTC': 0,
                'ETH': 0,
                'EUR': 0.15,
                'USD': 25,
            },
            'deposit': {
                'BCH': 0,
                'BTC': 0,
                'LTC': 0,
                'ETH': 0,
                'EUR': 0.15,
                'USD': 10,
            },
        },
    },
    'exceptions': {
        'exact': {
            'Insufficient funds': InsufficientFunds,
            'NotFound': OrderNotFound,
            'Invalid API Key': AuthenticationError,
            'invalid signature': AuthenticationError,
            'Invalid Passphrase': AuthenticationError,
            'Invalid order id': InvalidOrder,
            'Private rate limit exceeded': RateLimitExceeded,
            'Trading pair not available': PermissionDenied,
            'Product not found': InvalidOrder,
        },
        'broad': {
            'Order already done': OrderNotFound,
            'order not found': OrderNotFound,
            'price too small': InvalidOrder,
            'price too precise': InvalidOrder,
            'under maintenance': OnMaintenance,
            'size is too small': InvalidOrder,
            'Cancel only mode': OnMaintenance,  # https://github.com/ccxt/ccxt/issues/7690
        },
    },
},
{
    'id': 'blockchaincom',
    'secret': None,
    'name': 'Blockchain.com',
    'countries': ['LX'],
    'rateLimit': 500,  # prev 1000
    'version': 'v3',
    'has': {
        'CORS': False,
        'spot': True,
        'margin': None,  # on exchange but not implemented in CCXT
        'swap': False,
        'future': False,
        'option': False,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchCanceledOrders': True,
        'fetchClosedOrders': True,
        'fetchDeposit': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchL2OrderBook': True,
        'fetchL3OrderBook': True,
        'fetchLedger': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': False,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': False,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchWithdrawal': True,
        'fetchWithdrawals': True,
        'fetchWithdrawalWhitelist': True,  # fetches exchange specific benficiary-ids needed for withdrawals
        'withdraw': True,
    },
    'timeframes': None,
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/147515585-1296e91b-7398-45e5-9d32-f6121538533f.jpeg',
        'test': {
            'public': 'https://testnet-api.delta.exchange',
            'private': 'https://testnet-api.delta.exchange',
        },
        'api': {
            'public': 'https://api.blockchain.com/v3/exchange',
            'private': 'https://api.blockchain.com/v3/exchange',
        },
        'www': 'https://blockchain.com',
        'doc': [
            'https://api.blockchain.com/v3',
        ],
        'fees': 'https://exchange.blockchain.com/fees',
    },
    'api': {
        'public': {
            'get': {
                'tickers': 1,  # fetchTickers
                'tickers/{symbol}': 1,  # fetchTicker
                'symbols': 1,  # fetchMarkets
                'symbols/{symbol}': 1,  # fetchMarket
                'l2/{symbol}': 1,  # fetchL2OrderBook
                'l3/{symbol}': 1,  # fetchL3OrderBook
            },
        },
        'private': {
            'get': {
                'fees': 1,  # fetchFees
                'orders': 1,  # fetchOpenOrders, fetchClosedOrders
                'orders/{orderId}': 1,  # fetchOrder(id)
                'trades': 1,
                'fills': 1,  # fetchMyTrades
                'deposits': 1,  # fetchDeposits
                'deposits/{depositId}': 1,  # fetchDeposit
                'accounts': 1,  # fetchBalance
                'accounts/{account}/{currency}': 1,
                'whitelist': 1,  # fetchWithdrawalWhitelist
                'whitelist/{currency}': 1,  # fetchWithdrawalWhitelistByCurrency
                'withdrawals': 1,  # fetchWithdrawalWhitelist
                'withdrawals/{withdrawalId}': 1,  # fetchWithdrawalById
            },
            'post': {
                'orders': 1,  # createOrder
                'deposits/{currency}': 1,  # fetchDepositAddress by currency(only crypto supported)
                'withdrawals': 1,  # withdraw
            },
            'delete': {
                'orders': 1,  # cancelOrders
                'orders/{orderId}': 1,  # cancelOrder
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': True,
            'percentage': True,
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.004')],
                    [self.parse_number('10000'), self.parse_number('0.0022')],
                    [self.parse_number('50000'), self.parse_number('0.002')],
                    [self.parse_number('100000'), self.parse_number('0.0018')],
                    [self.parse_number('500000'), self.parse_number('0.0018')],
                    [self.parse_number('1000000'), self.parse_number('0.0018')],
                    [self.parse_number('2500000'), self.parse_number('0.0018')],
                    [self.parse_number('5000000'), self.parse_number('0.0016')],
                    [self.parse_number('25000000'), self.parse_number('0.0014')],
                    [self.parse_number('100000000'), self.parse_number('0.0011')],
                    [self.parse_number('500000000'), self.parse_number('0.0008')],
                    [self.parse_number('1000000000'), self.parse_number('0.0006')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.002')],
                    [self.parse_number('10000'), self.parse_number('0.0012')],
                    [self.parse_number('50000'), self.parse_number('0.001')],
                    [self.parse_number('100000'), self.parse_number('0.0008')],
                    [self.parse_number('500000'), self.parse_number('0.0007000000000000001')],
                    [self.parse_number('1000000'), self.parse_number('0.0006')],
                    [self.parse_number('2500000'), self.parse_number('0.0005')],
                    [self.parse_number('5000000'), self.parse_number('0.0004')],
                    [self.parse_number('25000000'), self.parse_number('0.0003')],
                    [self.parse_number('100000000'), self.parse_number('0.0002')],
                    [self.parse_number('500000000'), self.parse_number('0.0001')],
                    [self.parse_number('1000000000'), self.parse_number('0')],
                ],
            },
        },
    },
    'requiredCredentials': {
        'apiKey': False,
        'secret': True,
    },
    'precisionMode': TICK_SIZE,
    'exceptions': {
        'exact': {
            '401': AuthenticationError,
            '404': OrderNotFound,
        },
        'broad': {},
    },
},
{
    'id': 'bytetrade',
    'name': 'ByteTrade',
    'countries': ['HK'],
    # 10 requests per second =>( 1000ms / 10 ) = 100
    'rateLimit': 100,
    'requiresWeb3': True,
    'certified': False,
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBidsAsks': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': None,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '4h': '4h',
        '1d': '1d',
        '5d': '5d',
        '1w': '1w',
        '1M': '1M',
    },
    'urls': {
        'test': {
            'market': 'https://api-v2-test.byte-trade.com',
            'public': 'https://api-v2-test.byte-trade.com',
        },
        'logo': 'https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg',
        'api': {
            'market': 'https://api-v2.bttcdn.com',
            'public': 'https://api-v2.bttcdn.com',
        },
        'www': 'https://www.byte-trade.com',
        'doc': 'https://docs.byte-trade.com/#description',
    },
    'api': {
        'market': {
            'get': {
                'klines': 1,        # Kline of a symbol
                'depth': 1,         # Market Depth of a symbol
                'trades': 1,        # Trade records of a symbol
                'tickers': 1,
            },
        },
        'public': {
            'get': {
                'symbols': 1,        # Reference information of trading instrument, including base currency, quote precision, etc.
                'currencies': 1,     # The list of currencies available
                'balance': 1,        # Get the balance of an account
                'orders/open': 1,    # Get the open orders of an account
                'orders/closed': 1,  # Get the closed orders of an account
                'orders/all': 1,     # Get the open and closed orders of an account
                'orders': 1,         # Get the details of an order of an account
                'orders/trades': 1,  # Get detail match results
                'depositaddress': 1,  # Get deposit address
                'withdrawals': 1,    # Get withdrawals info
                'deposits': 1,       # Get deposit info
                'transfers': 1,      # Get transfer info
            },
            'post': {
                'transaction/createorder': 1,    # Post create order transaction to blockchain
                'transaction/cancelorder': 1,    # Post cancel order transaction to blockchain
                'transaction/withdraw': 1,       # Post withdraw transaction to blockchain
                'transaction/transfer': 1,       # Post transfer transaction to blockchain
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'taker': 0.0008,
            'maker': 0.0008,
        },
    },
    'commonCurrencies': {
        '1': 'ByteTrade',
        '44': 'ByteHub',
        '48': 'Blocktonic',
        '133': 'TerraCredit',
    },
    'exceptions': {
        'vertify error': AuthenticationError,  # typo on the exchange side, 'vertify'
        'verify error': AuthenticationError,  # private key signature is incorrect
        'transaction already in network': BadRequest,  # same transaction submited
        'invalid argument': BadRequest,
    },
    'options': {
        'orderExpiration': 31536000000,  # one year
    },
},
{
    'id': 'vcc',
    'name': 'VCC Exchange',
    'countries': ['VN'],  # Vietnam
    'rateLimit': 1000,
    'version': 'v3',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'editOrder': None,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': None,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': 'emulated',
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': True,
        'fetchTradingFees': None,
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'timeframes': {
        '1m': '60000',
        '5m': '300000',
        '15m': '900000',
        '30m': '1800000',
        '1h': '3600000',
        '2h': '7200000',
        '4h': '14400000',
        '6h': '21600000',
        '12h': '43200000',
        '1d': '86400000',
        '1w': '604800000',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/100545356-8427f500-326c-11eb-9539-7d338242d61b.jpg',
        'api': {
            'public': 'https://api.vcc.exchange',
            'private': 'https://api.vcc.exchange',
        },
        'www': 'https://vcc.exchange',
        'doc': [
            'https://vcc.exchange/api',
        ],
        'fees': 'https://support.vcc.exchange/hc/en-us/articles/360016401754',
        'referral': 'https://vcc.exchange?ref=l4xhrH',
    },
    'api': {
        'public': {
            'get': [
                'summary',
                'exchange_info',
                'assets',  # Available Currencies
                'ticker',  # Ticker list for all symbols
                'trades/{market_pair}',  # Recent trades
                'orderbook/{market_pair}',  # Orderbook
                'chart/bars',  # Candles
                'tick_sizes',
            ],
        },
        'private': {
            'get': [
                'user',
                'balance',  # Get trading balance
                'orders/{order_id}',  # Get a single order by order_id
                'orders/open',  # Get open orders
                'orders',  # Get closed orders
                'orders/trades',  # Get trades history
                'deposit-address',  # Generate or get deposit address
                'transactions',  # Get deposit/withdrawal history
            ],
            'post': [
                'orders',  # Create new order
            ],
            'put': [
                'orders/{order_id}/cancel',  # Cancel order
                'orders/cancel-by-type',
                'orders/cancel-all',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
    },
    'exceptions': {
        'exact': {},
        'broad': {
            'limit may not be greater than': BadRequest,  # {"message":"The given data was invalid.","errors":{"limit":["The limit may not be greater than 1000."]}}
            'Insufficient balance': InsufficientFunds,  # {"message":"Insufficient balance."}
            'Unauthenticated': AuthenticationError,  # {"message":"Unauthenticated."}  # wrong api key
            'signature is invalid': AuthenticationError,  # {"message":"The given data was invalid.","errors":{"signature":["HMAC signature is invalid"]}}
            'Timeout': RequestTimeout,  # {"code":504,"message":"Gateway Timeout","description":""}
            'Too many requests': RateLimitExceeded,  # {"code":429,"message":"Too many requests","description":"Too many requests"}
            'quantity field is required': InvalidOrder,  # {"message":"The given data was invalid.","errors":{"quantity":["The quantity field is required when type is market."]}}
            'price field is required': InvalidOrder,  # {"message":"The given data was invalid.","errors":{"price":["The price field is required when type is limit."]}}
            'error_security_level': PermissionDenied,  # {"message":"error_security_level"}
            'pair is invalid': BadSymbol,  # {"message":"The given data was invalid.","errors":{"coin":["Trading pair is invalid","Trading pair is offline"]}}
            # {"message":"The given data was invalid.","errors":{"type":["The selected type is invalid."]}}
            # {"message":"The given data was invalid.","errors":{"trade_type":["The selected trade type is invalid."]}}
            'type is invalid': InvalidOrder,
            'Data not found': OrderNotFound,  # {"message":"Data not found"}
        },
    },
},
{
    'id': 'bitfinex',
    'name': 'Bitfinex',
    'countries': ['VG'],
    'version': 'v1',
    # cheapest is 90 requests a minute = 1.5 requests per second on average =>( 1000ms / 1.5) = 666.666 ms between requests on average
    'rateLimit': 666.666,
    'pro': True,
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': None,  # has but unimplemented
        'future': None,
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchDepositAddress': True,
        'fetchDeposits': None,
        'fetchFundingFees': True,
        'fetchIndexOHLCV': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchPositions': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': False,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'fetchWithdrawals': None,
        'transfer': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '3h': '3h',
        '4h': '4h',
        '6h': '6h',
        '12h': '12h',
        '1d': '1D',
        '1w': '7D',
        '2w': '14D',
        '1M': '1M',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
        'api': {
            'v2': 'https://api-pub.bitfinex.com',  # https://github.com/ccxt/ccxt/issues/5109
            'public': 'https://api.bitfinex.com',
            'private': 'https://api.bitfinex.com',
        },
        'www': 'https://www.bitfinex.com',
        'referral': 'https://www.bitfinex.com/?refcode=P61eYxFL',
        'doc': [
            'https://docs.bitfinex.com/v1/docs',
            'https://github.com/bitfinexcom/bitfinex-api-node',
        ],
    },
    'api': {
        # v2 symbol ids require a 't' prefix
        # just the public part of it(use bitfinex2 for everything else)
        'v2': {
            'get': {
                'platform/status': 3,  # 30 requests per minute
                'tickers': 1,  # 90 requests a minute
                'ticker/{symbol}': 1,
                'tickers/hist': 1,
                'trades/{symbol}/hist': 1,
                'book/{symbol}/{precision}': 0.375,  # 240 requests per minute = 4 requests per second(1000ms / rateLimit) / 4  = 0.37500375
                'book/{symbol}/P0': 0.375,
                'book/{symbol}/P1': 0.375,
                'book/{symbol}/P2': 0.375,
                'book/{symbol}/P3': 0.375,
                'book/{symbol}/R0': 0.375,
                'stats1/{key}:{size}:{symbol}:{side}/{section}': 1,  # 90 requests a minute
                'stats1/{key}:{size}:{symbol}/{section}': 1,
                'stats1/{key}:{size}:{symbol}:long/last': 1,
                'stats1/{key}:{size}:{symbol}:long/hist': 1,
                'stats1/{key}:{size}:{symbol}:short/last': 1,
                'stats1/{key}:{size}:{symbol}:short/hist': 1,
                'candles/trade:{timeframe}:{symbol}/{section}': 1,  # 90 requests a minute
                'candles/trade:{timeframe}:{symbol}/last': 1,
                'candles/trade:{timeframe}:{symbol}/hist': 1,
            },
        },
        'public': {
            'get': {
                'book/{symbol}': 1,  # 90 requests a minute
                # 'candles/{symbol}':0,
                'lendbook/{currency}': 6,  # 15 requests a minute
                'lends/{currency}': 3,  # 30 requests a minute
                'pubticker/{symbol}': 3,  # 30 requests a minute = 0.5 requests per second =>(1000ms / rateLimit) / 0.5 = 3.00003
                'stats/{symbol}': 6,  # 15 requests a minute = 0.25 requests per second =>(1000ms / rateLimit ) /0.25 = 6.00006(endpoint returns red html... or 'unknown symbol')
                'symbols': 18,  # 5 requests a minute = 0.08333 requests per second =>(1000ms / rateLimit) / 0.08333 = 18.0009
                'symbols_details': 18,  # 5 requests a minute
                'tickers': 1,  # endpoint not mentioned in v1 docs... but still responds
                'trades/{symbol}': 3,  # 60 requests a minute = 1 request per second =>(1000ms / rateLimit) / 1 = 1.5 ... but only works if set to 3
            },
        },
        'private': {
            'post': {
                'account_fees': 18,
                'account_infos': 6,
                'balances': 9.036,  # 10 requests a minute = 0.166 requests per second =>(1000ms / rateLimit) / 0.166 = 9.036
                'basket_manage': 6,
                'credits': 6,
                'deposit/new': 18,
                'funding/close': 6,
                'history': 6,  # 15 requests a minute
                'history/movements': 6,
                'key_info': 6,
                'margin_infos': 3,  # 30 requests a minute
                'mytrades': 3,
                'mytrades_funding': 6,
                'offer/cancel': 6,
                'offer/new': 6,
                'offer/status': 6,
                'offers': 6,
                'offers/hist': 90.03,  # one request per minute
                'order/cancel': 0.2,
                'order/cancel/all': 0.2,
                'order/cancel/multi': 0.2,
                'order/cancel/replace': 0.2,
                'order/new': 0.2,  # 450 requests a minute = 7.5 request a second =>(1000ms / rateLimit) / 7.5 = 0.2000002
                'order/new/multi': 0.2,
                'order/status': 0.2,
                'orders': 0.2,
                'orders/hist': 90.03,  # one request per minute = 0.1666 =>(1000ms /  rateLimit) / 0.01666 = 90.03
                'position/claim': 18,
                'position/close': 18,
                'positions': 18,
                'summary': 18,
                'taken_funds': 6,
                'total_taken_funds': 6,
                'transfer': 18,
                'unused_taken_funds': 6,
                'withdraw': 18,
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': True,
            'percentage': True,
            'maker': self.parse_number('0.001'),
            'taker': self.parse_number('0.002'),
            'tiers': {
                'taker': [
                    [self.parse_number('0'), self.parse_number('0.002')],
                    [self.parse_number('500000'), self.parse_number('0.002')],
                    [self.parse_number('1000000'), self.parse_number('0.002')],
                    [self.parse_number('2500000'), self.parse_number('0.002')],
                    [self.parse_number('5000000'), self.parse_number('0.002')],
                    [self.parse_number('7500000'), self.parse_number('0.002')],
                    [self.parse_number('10000000'), self.parse_number('0.0018')],
                    [self.parse_number('15000000'), self.parse_number('0.0016')],
                    [self.parse_number('20000000'), self.parse_number('0.0014')],
                    [self.parse_number('25000000'), self.parse_number('0.0012')],
                    [self.parse_number('30000000'), self.parse_number('0.001')],
                ],
                'maker': [
                    [self.parse_number('0'), self.parse_number('0.001')],
                    [self.parse_number('500000'), self.parse_number('0.0008')],
                    [self.parse_number('1000000'), self.parse_number('0.0006')],
                    [self.parse_number('2500000'), self.parse_number('0.0004')],
                    [self.parse_number('5000000'), self.parse_number('0.0002')],
                    [self.parse_number('7500000'), self.parse_number('0')],
                    [self.parse_number('10000000'), self.parse_number('0')],
                    [self.parse_number('15000000'), self.parse_number('0')],
                    [self.parse_number('20000000'), self.parse_number('0')],
                    [self.parse_number('25000000'), self.parse_number('0')],
                    [self.parse_number('30000000'), self.parse_number('0')],
                ],
            },
        },
        'funding': {
            'tierBased': False,  # True for tier-based/progressive
            'percentage': False,  # fixed commission
            # Actually deposit fees are free for larger deposits(> $1000 USD equivalent)
            # these values below are deprecated, we should not hardcode fees and limits anymore
            # to be reimplemented with bitfinex funding fees from their API or web endpoints
            'deposit': {},
            'withdraw': {},
        },
    },
    # todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method
    'commonCurrencies': {
        'ALG': 'ALGO',  # https://github.com/ccxt/ccxt/issues/6034
        'AMP': 'AMPL',
        'ATO': 'ATOM',  # https://github.com/ccxt/ccxt/issues/5118
        'BCHABC': 'XEC',
        'BCHN': 'BCH',
        'DAT': 'DATA',
        'DOG': 'MDOGE',
        'DSH': 'DASH',
        # https://github.com/ccxt/ccxt/issues/7399
        # https://coinmarketcap.com/currencies/pnetwork/
        # https://en.cryptonomist.ch/blog/eidoo/the-edo-to-pnt-upgrade-what-you-need-to-know-updated/
        'EDO': 'PNT',
        'EUS': 'EURS',
        'EUT': 'EURT',
        'IOT': 'IOTA',
        'IQX': 'IQ',
        'MNA': 'MANA',
        'ORS': 'ORS Group',  # conflict with Origin Sport  #3230
        'PAS': 'PASS',
        'QSH': 'QASH',
        'QTM': 'QTUM',
        'RBT': 'RBTC',
        'SNG': 'SNGLS',
        'STJ': 'STORJ',
        'TERRAUST': 'UST',
        'TSD': 'TUSD',
        'YGG': 'YEED',  # conflict with Yield Guild Games
        'YYW': 'YOYOW',
        'UDC': 'USDC',
        'UST': 'USDT',
        'VSY': 'VSYS',
        'WAX': 'WAXP',
        'XCH': 'XCHF',
        'ZBT': 'ZB',
    },
    'exceptions': {
        'exact': {
            'temporarily_unavailable': ExchangeNotAvailable,  # Sorry, the service is temporarily unavailable. See https://www.bitfinex.com/ for more info.
            'Order could not be cancelled.': OrderNotFound,  # non-existent order
            'No such order found.': OrderNotFound,  # ?
            'Order price must be positive.': InvalidOrder,  # on price <= 0
            'Could not find a key matching the given X-BFX-APIKEY.': AuthenticationError,
            'Key price should be a decimal number, e.g. "123.456"': InvalidOrder,  # on isNaN(price)
            'Key amount should be a decimal number, e.g. "123.456"': InvalidOrder,  # on isNaN(amount)
            'ERR_RATE_LIMIT': RateLimitExceeded,
            'Ratelimit': RateLimitExceeded,
            'Nonce is too small.': InvalidNonce,
            'No summary found.': ExchangeError,  # fetchTradingFees(summary) endpoint can give self vague error message
            'Cannot evaluate your available balance, please try again': ExchangeNotAvailable,
            'Unknown symbol': BadSymbol,
            'Cannot complete transfer. Exchange balance insufficient.': InsufficientFunds,
            'Momentary balance check. Please wait few seconds and try the transfer again.': ExchangeError,
        },
        'broad': {
            'Invalid X-BFX-SIGNATURE': AuthenticationError,
            'This API key does not have permission': PermissionDenied,  # authenticated but not authorized
            'not enough exchange balance for ': InsufficientFunds,  # when buying cost is greater than the available quote currency
            'minimum size for ': InvalidOrder,  # when amount below limits.amount.min
            'Invalid order': InvalidOrder,  # ?
            'The available balance is only': InsufficientFunds,  # {"status":"error","message":"Cannot withdraw 1.0027 ETH from your exchange wallet. The available balance is only 0.0 ETH. If you have limit orders, open positions, unused or active margin funding, self will decrease your available balance. To increase it, you can cancel limit orders or reduce/close your positions.","withdrawal_id":0,"fees":"0.0027"}
        },
    },
    'precisionMode': SIGNIFICANT_DIGITS,
    'options': {
        'currencyNames': {
            'AGI': 'agi',
            'AID': 'aid',
            'AIO': 'aio',
            'ANT': 'ant',
            'AVT': 'aventus',  # #1811
            'BAT': 'bat',
            # https://github.com/ccxt/ccxt/issues/5833
            'BCH': 'bab',  # undocumented
            # 'BCH': 'bcash',  # undocumented
            'BCI': 'bci',
            'BFT': 'bft',
            'BSV': 'bsv',
            'BTC': 'bitcoin',
            'BTG': 'bgold',
            'CFI': 'cfi',
            'COMP': 'comp',
            'DAI': 'dai',
            'DADI': 'dad',
            'DASH': 'dash',
            'DATA': 'datacoin',
            'DTH': 'dth',
            'EDO': 'eidoo',  # #1811
            'ELF': 'elf',
            'EOS': 'eos',
            'ETC': 'ethereumc',
            'ETH': 'ethereum',
            'ETP': 'metaverse',
            'FUN': 'fun',
            'GNT': 'golem',
            'IOST': 'ios',
            'IOTA': 'iota',
            # https://github.com/ccxt/ccxt/issues/5833
            'LEO': 'let',  # ETH chain
            # 'LEO': 'les',  # EOS chain
            'LINK': 'link',
            'LRC': 'lrc',
            'LTC': 'litecoin',
            'LYM': 'lym',
            'MANA': 'mna',
            'MIT': 'mit',
            'MKR': 'mkr',
            'MTN': 'mtn',
            'NEO': 'neo',
            'ODE': 'ode',
            'OMG': 'omisego',
            'OMNI': 'mastercoin',
            'QASH': 'qash',
            'QTUM': 'qtum',  # #1811
            'RCN': 'rcn',
            'RDN': 'rdn',
            'REP': 'rep',
            'REQ': 'req',
            'RLC': 'rlc',
            'SAN': 'santiment',
            'SNGLS': 'sng',
            'SNT': 'status',
            'SPANK': 'spk',
            'STORJ': 'stj',
            'TNB': 'tnb',
            'TRX': 'trx',
            'TUSD': 'tsd',
            'USD': 'wire',
            'USDC': 'udc',  # https://github.com/ccxt/ccxt/issues/5833
            'UTK': 'utk',
            'USDT': 'tetheruso',  # Tether on Omni
            # 'USDT': 'tetheruse',  # Tether on ERC20
            # 'USDT': 'tetherusl',  # Tether on Liquid
            # 'USDT': 'tetherusx',  # Tether on Tron
            # 'USDT': 'tetheruss',  # Tether on EOS
            'VEE': 'vee',
            'WAX': 'wax',
            'XLM': 'xlm',
            'XMR': 'monero',
            'XRP': 'ripple',
            'XVG': 'xvg',
            'YOYOW': 'yoyow',
            'ZEC': 'zcash',
            'ZRX': 'zrx',
            'XTZ': 'xtz',
        },
        'orderTypes': {
            'limit': 'exchange limit',
            'market': 'exchange market',
        },
        'fiat': {
            'USD': 'USD',
            'EUR': 'EUR',
            'JPY': 'JPY',
            'GBP': 'GBP',
            'CNH': 'CNH',
        },
        'accountsByType': {
            'spot': 'exchange',
            'margin': 'trading',
            'funding': 'deposit',
            'exchange': 'exchange',
            'trading': 'trading',
            'deposit': 'deposit',
            'derivatives': 'trading',
        },
    },
},
{
    'id': 'bit2c',
    'name': 'Bit2C',
    'countries': ['IL'],  # Israel
    'rateLimit': 3000,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOpenOrders': True,
        'fetchOrderBook': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg',
        'api': 'https://bit2c.co.il',
        'www': 'https://www.bit2c.co.il',
        'referral': 'https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf',
        'doc': [
            'https://www.bit2c.co.il/home/api',
            'https://github.com/OferE/bit2c',
        ],
    },
    'api': {
        'public': {
            'get': [
                'Exchanges/{pair}/Ticker',
                'Exchanges/{pair}/orderbook',
                'Exchanges/{pair}/trades',
                'Exchanges/{pair}/lasttrades',
            ],
        },
        'private': {
            'post': [
                'Merchant/CreateCheckout',
                'Order/AddCoinFundsRequest',
                'Order/AddFund',
                'Order/AddOrder',
                'Order/AddOrderMarketPriceBuy',
                'Order/AddOrderMarketPriceSell',
                'Order/CancelOrder',
                'Order/AddCoinFundsRequest',
                'Order/AddStopOrder',
                'Payment/GetMyId',
                'Payment/Send',
                'Payment/Pay',
            ],
            'get': [
                'Account/Balance',
                'Account/Balance/v2',
                'Order/MyOrders',
                'Order/GetById',
                'Order/AccountHistory',
                'Order/OrderHistory',
            ],
        },
    },
    'markets': {
        'BTC/NIS': {'id': 'BtcNis', 'symbol': 'BTC/NIS', 'base': 'BTC', 'quote': 'NIS', 'baseId': 'Btc', 'quoteId': 'Nis', 'type': 'spot', 'spot': True},
        'ETH/NIS': {'id': 'EthNis', 'symbol': 'ETH/NIS', 'base': 'ETH', 'quote': 'NIS', 'baseId': 'Eth', 'quoteId': 'Nis', 'type': 'spot', 'spot': True},
        'BCH/NIS': {'id': 'BchabcNis', 'symbol': 'BCH/NIS', 'base': 'BCH', 'quote': 'NIS', 'baseId': 'Bchabc', 'quoteId': 'Nis', 'type': 'spot', 'spot': True},
        'LTC/NIS': {'id': 'LtcNis', 'symbol': 'LTC/NIS', 'base': 'LTC', 'quote': 'NIS', 'baseId': 'Ltc', 'quoteId': 'Nis', 'type': 'spot', 'spot': True},
        'ETC/NIS': {'id': 'EtcNis', 'symbol': 'ETC/NIS', 'base': 'ETC', 'quote': 'NIS', 'baseId': 'Etc', 'quoteId': 'Nis', 'type': 'spot', 'spot': True},
        'BTG/NIS': {'id': 'BtgNis', 'symbol': 'BTG/NIS', 'base': 'BTG', 'quote': 'NIS', 'baseId': 'Btg', 'quoteId': 'Nis', 'type': 'spot', 'spot': True},
        'BSV/NIS': {'id': 'BchsvNis', 'symbol': 'BSV/NIS', 'base': 'BSV', 'quote': 'NIS', 'baseId': 'Bchsv', 'quoteId': 'Nis', 'type': 'spot', 'spot': True},
        'GRIN/NIS': {'id': 'GrinNis', 'symbol': 'GRIN/NIS', 'base': 'GRIN', 'quote': 'NIS', 'baseId': 'Grin', 'quoteId': 'Nis', 'type': 'spot', 'spot': True},
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.005'),
            'taker': self.parse_number('0.005'),
        },
    },
    'options': {
        'fetchTradesMethod': 'public_get_exchanges_pair_trades',
    },
    'exceptions': {
        'exact': {
            'Please provide valid APIkey': AuthenticationError,  # {"error" : "Please provide valid APIkey"}
        },
        'broad': {
            # {"error": "Please provide valid nonce in Request Nonce(1598218490) is not bigger than last nonce(1598218490)."}
            # {"error": "Please provide valid nonce in Request UInt64.TryParse failed for nonce :"}
            'Please provide valid nonce': InvalidNonce,
            'please approve new terms of use on site': PermissionDenied,  # {"error" : "please approve new terms of use on site."}
        },
    },
},
{
    'id': 'bibox',
    'name': 'Bibox',
    'countries': ['CN', 'US', 'KR'],
    'version': 'v1',
    'hostname': 'bibox.com',
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': None,  # has but unimplemented
        'future': None,
        'option': None,
        'cancelOrder': True,
        'createMarketOrder': None,  # or they will return https://github.com/ccxt/ccxt/issues/2338
        'createOrder': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRates': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingFees': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1min',
        '5m': '5min',
        '15m': '15min',
        '30m': '30min',
        '1h': '1hour',
        '2h': '2hour',
        '4h': '4hour',
        '6h': '6hour',
        '12h': '12hour',
        '1d': 'day',
        '1w': 'week',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/77257418-3262b000-6c85-11ea-8fb8-20bdf20b3592.jpg',
        'api': 'https://api.{hostname}',
        'www': 'https://www.bibox365.com',
        'doc': [
            'https://biboxcom.github.io/en/',
        ],
        'fees': 'https://bibox.zendesk.com/hc/en-us/articles/360002336133',
        'referral': 'https://w2.bibox365.com/login/register?invite_code=05Kj3I',
    },
    'api': {
        'public': {
            'post': [
                # TODO: rework for full endpoint/cmd paths here
                'mdata',
            ],
            'get': [
                'cquery',
                'mdata',
                'cdata',
                'orderpending',
            ],
        },
        'private': {
            'post': [
                'cquery',
                'ctrade',
                'user',
                'orderpending',
                'transfer',
            ],
        },
        'v2private': {
            'post': [
                'assets/transfer/spot',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'taker': self.parse_number('0.001'),
            'maker': self.parse_number('0.0008'),
        },
        'funding': {
            'tierBased': False,
            'percentage': False,
            'withdraw': {},
            'deposit': {},
        },
    },
    'exceptions': {
        '2011': AccountSuspended,  # Account is locked
        '2015': AuthenticationError,  # Google authenticator is wrong
        '2021': InsufficientFunds,  # Insufficient balance available for withdrawal
        '2027': InsufficientFunds,  # Insufficient balance available(for trade)
        '2033': OrderNotFound,  # operation failed! Orders have been completed or revoked
        '2065': InvalidOrder,  # Precatory price is exorbitant, please reset
        '2066': InvalidOrder,  # Precatory price is low, please reset
        '2067': InvalidOrder,  # Does not support market orders
        '2068': InvalidOrder,  # The number of orders can not be less than
        '2078': InvalidOrder,  # unvalid order price
        '2085': InvalidOrder,  # Order quantity is too small
        '2091': RateLimitExceeded,  # request is too frequency, please try again later
        '2092': InvalidOrder,  # Minimum amount not met
        '2131': InvalidOrder,  # The order quantity cannot be greater than
        '3000': BadRequest,  # Requested parameter incorrect
        '3002': BadRequest,  # Parameter cannot be null
        '3012': AuthenticationError,  # invalid apiKey
        '3016': BadSymbol,  # Trading pair error
        '3024': PermissionDenied,  # wrong apikey permissions
        '3025': AuthenticationError,  # signature failed
        '4000': ExchangeNotAvailable,  # current network is unstable
        '4003': DDoSProtection,  # server busy please try again later
    },
    'commonCurrencies': {
        'APENFT(NFT)': 'NFT',
        'BOX': 'DefiBox',
        'BPT': 'BlockPool Token',
        'GTC': 'Game.com',
        'KEY': 'Bihu',
        'MTC': 'MTC Mesh Network',  # conflict with MTC Docademic doc.com Token https://github.com/ccxt/ccxt/issues/6081 https://github.com/ccxt/ccxt/issues/3025
        'NFT': 'NFT Protocol',
        'PAI': 'PCHAIN',
        'REVO': 'Revo Network',
        'STAR': 'Starbase',
        'TERN': 'Ternio-ERC20',
    },
},
{
    'id': 'cdax',
    'name': 'CDAX',
    'countries': ['RU'],
    'rateLimit': 100,
    'userAgent': self.userAgents['chrome39'],
    'certified': False,
    'version': 'v1',
    'accounts': None,
    'accountsById': None,
    'hostname': 'cdax.io',
    'pro': False,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': None,
        'future': None,
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': False,
        'fetchDepositAddressesByNetwork': False,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchTradingLimits': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1min',
        '5m': '5min',
        '15m': '15min',
        '30m': '30min',
        '1h': '60min',
        '4h': '4hour',
        '1d': '1day',
        '1w': '1week',
        '1M': '1mon',
        '1y': '1year',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/102157692-fd406280-3e90-11eb-8d46-4511b617cd17.jpg',
        'api': {
            'market': 'https://{hostname}/api',
            'public': 'https://{hostname}/api',
            'private': 'https://{hostname}/api',
        },
        'www': 'https://cdax.io',
        'referral': 'https://cdax.io/invite?invite_code=esc74',
        'doc': 'https://github.com/cloudapidoc/API_Docs',
        'fees': 'https://cdax.io/about/fee',
    },
    'api': {
        'market': {
            'get': {
                'history/kline': 1,  # 获取K线数据
                'detail/merged': 1,  # 获取聚合行情(Ticker)
                'depth': 1,  # 获取 Market Depth 数据
                'trade': 1,  # 获取 Trade Detail 数据
                'history/trade': 1,  # 批量获取最近的交易记录
                'detail': 1,  # 获取 Market Detail 24小时成交量数据
                'tickers': 1,
                'etp': 1,  # 获取杠杆ETP实时净值
            },
        },
        'public': {
            'get': {
                'common/symbols': 1,  # 查询系统支持的所有交易对
                'common/currencys': 1,  # 查询系统支持的所有币种
                'common/timestamp': 1,  # 查询系统当前时间
                'common/exchange': 1,  # order limits
                'settings/currencys': 1,  # ?language=en-US
            },
        },
        'private': {
            'get': {
                'account/accounts': 0.2,  # 查询当前用户的所有账户(即account-id)
                'account/accounts/{id}/balance': 0.2,  # 查询指定账户的余额
                'account/accounts/{sub-uid}': 1,
                'account/history': 4,
                'cross-margin/loan-info': 1,
                'margin/loan-info': 1,  # 查询借币币息率及额度
                'fee/fee-rate/get': 1,
                'order/openOrders': 0.4,
                'order/orders': 0.4,
                'order/orders/{id}': 0.4,  # 查询某个订单详情
                'order/orders/{id}/matchresults': 0.4,  # 查询某个订单的成交明细
                'order/orders/getClientOrder': 0.4,
                'order/history': 1,  # 查询当前委托、历史委托
                'order/matchresults': 1,  # 查询当前成交、历史成交
                # 'dw/withdraw-virtual/addresses',  # 查询虚拟币提现地址（Deprecated）
                'query/deposit-withdraw': 1,
                # 'margin/loan-info',  # duplicate
                'margin/loan-orders': 0.2,  # 借贷订单
                'margin/accounts/balance': 0.2,  # 借贷账户详情
                'cross-margin/loan-orders': 1,  # 查询借币订单
                'cross-margin/accounts/balance': 1,  # 借币账户详情
                'points/actions': 1,
                'points/orders': 1,
                'subuser/aggregate-balance': 10,
                'stable-coin/exchange_rate': 1,
                'stable-coin/quote': 1,
            },
            'post': {
                'account/transfer': 1,  # 资产划转(该节点为母用户和子用户进行资产划转的通用接口。)
                'futures/transfer': 1,
                'order/batch-orders': 0.4,
                'order/orders/place': 0.2,  # 创建并执行一个新订单(一步下单， 推荐使用)
                'order/orders/submitCancelClientOrder': 0.2,
                'order/orders/batchCancelOpenOrders': 0.4,
                # 'order/orders',  # 创建一个新的订单请求 （仅创建订单，不执行下单）
                # 'order/orders/{id}/place',  # 执行一个订单 （仅执行已创建的订单）
                'order/orders/{id}/submitcancel': 0.2,  # 申请撤销一个订单请求
                'order/orders/batchcancel': 0.4,  # 批量撤销订单
                # 'dw/balance/transfer',  # 资产划转
                'dw/withdraw/api/create': 1,  # 申请提现虚拟币
                # 'dw/withdraw-virtual/create',  # 申请提现虚拟币
                # 'dw/withdraw-virtual/{id}/place',  # 确认申请虚拟币提现（Deprecated）
                'dw/withdraw-virtual/{id}/cancel': 1,  # 申请取消提现虚拟币
                'dw/transfer-in/margin': 10,  # 现货账户划入至借贷账户
                'dw/transfer-out/margin': 10,  # 借贷账户划出至现货账户
                'margin/orders': 10,  # 申请借贷
                'margin/orders/{id}/repay': 10,  # 归还借贷
                'cross-margin/transfer-in': 1,  # 资产划转
                'cross-margin/transfer-out': 1,  # 资产划转
                'cross-margin/orders': 1,  # 申请借币
                'cross-margin/orders/{id}/repay': 1,  # 归还借币
                'stable-coin/exchange': 1,
                'subuser/transfer': 10,
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
    },
    'exceptions': {
        'broad': {
            'contract is restricted of closing positions on API.  Please contact customer service': OnMaintenance,
            'maintain': OnMaintenance,
        },
        'exact': {
            # err-code
            'bad-request': BadRequest,
            'base-date-limit-error': BadRequest,  # {"status":"error","err-code":"base-date-limit-error","err-msg":"date less than system limit","data":null}
            'api-not-support-temp-addr': PermissionDenied,  # {"status":"error","err-code":"api-not-support-temp-addr","err-msg":"API withdrawal does not support temporary addresses","data":null}
            'timeout': RequestTimeout,  # {"ts":1571653730865,"status":"error","err-code":"timeout","err-msg":"Request Timeout"}
            'gateway-internal-error': ExchangeNotAvailable,  # {"status":"error","err-code":"gateway-internal-error","err-msg":"Failed to load data. Try again later.","data":null}
            'account-frozen-balance-insufficient-error': InsufficientFunds,  # {"status":"error","err-code":"account-frozen-balance-insufficient-error","err-msg":"trade account balance is not enough, left: `0.0027`","data":null}
            'invalid-amount': InvalidOrder,  # eg "Paramemter `amount` is invalid."
            'order-limitorder-amount-min-error': InvalidOrder,  # limit order amount error, min: `0.001`
            'order-limitorder-amount-max-error': InvalidOrder,  # market order amount error, max: `1000000`
            'order-marketorder-amount-min-error': InvalidOrder,  # market order amount error, min: `0.01`
            'order-limitorder-price-min-error': InvalidOrder,  # limit order price error
            'order-limitorder-price-max-error': InvalidOrder,  # limit order price error
            'order-holding-limit-failed': InvalidOrder,  # {"status":"error","err-code":"order-holding-limit-failed","err-msg":"Order failed, exceeded the holding limit of self currency","data":null}
            'order-orderprice-precision-error': InvalidOrder,  # {"status":"error","err-code":"order-orderprice-precision-error","err-msg":"order price precision error, scale: `4`","data":null}
            'order-etp-nav-price-max-error': InvalidOrder,  # {"status":"error","err-code":"order-etp-nav-price-max-error","err-msg":"Order price cannot be higher than 5% of NAV","data":null}
            'order-orderstate-error': OrderNotFound,  # canceling an already canceled order
            'order-queryorder-invalid': OrderNotFound,  # querying a non-existent order
            'order-update-error': ExchangeNotAvailable,  # undocumented error
            'api-signature-check-failed': AuthenticationError,
            'api-signature-not-valid': AuthenticationError,  # {"status":"error","err-code":"api-signature-not-valid","err-msg":"Signature not valid: Incorrect Access key [Access key错误]","data":null}
            'base-record-invalid': OrderNotFound,  # https://github.com/ccxt/ccxt/issues/5750
            'base-symbol-trade-disabled': BadSymbol,  # {"status":"error","err-code":"base-symbol-trade-disabled","err-msg":"Trading is disabled for self symbol","data":null}
            'base-symbol-error': BadSymbol,  # {"status":"error","err-code":"base-symbol-error","err-msg":"The symbol is invalid","data":null}
            'system-maintenance': OnMaintenance,  # {"status": "error", "err-code": "system-maintenance", "err-msg": "System is in maintenance!", "data": null}
            # err-msg
            'invalid symbol': BadSymbol,  # {"ts":1568813334794,"status":"error","err-code":"invalid-parameter","err-msg":"invalid symbol"}
            'symbol trade not open now': BadSymbol,  # {"ts":1576210479343,"status":"error","err-code":"invalid-parameter","err-msg":"symbol trade not open now"}
        },
    },
    'options': {
        'defaultNetwork': 'ERC20',
        'networks': {
            'ETH': 'erc20',
            'TRX': 'trc20',
            'HRC20': 'hrc20',
            'HECO': 'hrc20',
            'HT': 'hrc20',
            'ALGO': 'algo',
            'OMNI': '',
        },
        # https://github.com/ccxt/ccxt/issues/5376
        'fetchOrdersByStatesMethod': 'private_get_order_orders',  # 'private_get_order_history'  # https://github.com/ccxt/ccxt/pull/5392
        'fetchOpenOrdersMethod': 'fetch_open_orders_v1',  # 'fetch_open_orders_v2'  # https://github.com/ccxt/ccxt/issues/5388
        'createMarketBuyOrderRequiresPrice': True,
        'fetchBalanceMethod': 'privateGetAccountAccountsIdBalance',
        'createOrderMethod': 'privatePostOrderOrdersPlace',
        'language': 'en-US',
    },
    'commonCurrencies': {
        # https://github.com/ccxt/ccxt/issues/6081
        # https://github.com/ccxt/ccxt/issues/3365
        # https://github.com/ccxt/ccxt/issues/2873
        'GET': 'Themis',  # conflict with GET(Guaranteed Entrance Token, GET Protocol)
        'GTC': 'Game.com',  # conflict with Gitcoin and Gastrocoin
        'HIT': 'HitChain',
        'HOT': 'Hydro Protocol',  # conflict with HOT(Holo) https://github.com/ccxt/ccxt/issues/4929
        # https://github.com/ccxt/ccxt/issues/7399
        # https://coinmarketcap.com/currencies/pnetwork/
        # https://coinmarketcap.com/currencies/penta/markets/
        # https://en.cryptonomist.ch/blog/eidoo/the-edo-to-pnt-upgrade-what-you-need-to-know-updated/
        'PNT': 'Penta',
        'SBTC': 'Super Bitcoin',
        'BIFI': 'Bitcoin File',  # conflict with Beefy.Finance https://github.com/ccxt/ccxt/issues/8706
    },
},
{
    'id': 'fmfwio',
    'name': 'FMFW.io',
    'countries': ['KN'],
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/97296144-514fa300-1861-11eb-952b-3d55d492200b.jpg',
        'api': {
            'public': 'https://api.fmfw.io',
            'private': 'https://api.fmfw.io',
        },
        'www': 'https://fmfw.io',
        'doc': 'https://api.fmfw.io/api/2/explore/',
        'fees': 'https://fmfw.io/fees-and-limits',
        'referral': 'https://fmfw.io/referral/da948b21d6c92d69',
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('0.005'),
            'taker': self.parse_number('0.005'),
        },
    },
},
{
    'id': 'digifinex',
    'name': 'DigiFinex',
    'countries': ['SG'],
    'version': 'v3',
    'rateLimit': 900,  # 300 for posts
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but unimplemented
        'swap': None,  # has but unimplemented
        'future': None,  # has but unimplemented
        'option': False,
        'cancelOrder': True,
        'cancelOrders': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchLedger': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchStatus': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1',
        '5m': '5',
        '15m': '15',
        '30m': '30',
        '1h': '60',
        '4h': '240',
        '12h': '720',
        '1d': '1D',
        '1w': '1W',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87443315-01283a00-c5fe-11ea-8628-c2a0feaf07ac.jpg',
        'api': 'https://openapi.digifinex.com',
        'www': 'https://www.digifinex.com',
        'doc': [
            'https://docs.digifinex.com',
        ],
        'fees': 'https://digifinex.zendesk.com/hc/en-us/articles/360000328422-Fee-Structure-on-DigiFinex',
        'referral': 'https://www.digifinex.com/en-ww/from/DhOzBg?channelCode=ljaUPp',
    },
    'api': {
        'public': {
            'get': [
                '{market}/symbols',
                'kline',
                'margin/currencies',
                'margin/symbols',
                'markets',
                'order_book',
                'ping',
                'spot/symbols',
                'time',
                'trades',
                'trades/symbols',
                'ticker',
                'currencies',  # todo add fetchCurrencies
            ],
        },
        'private': {
            'get': [
                '{market}/financelog',
                '{market}/mytrades',
                '{market}/order',
                '{market}​/order​/detail',  # todo add fetchOrder
                '{market}/order/current',
                '{market}/order/history',
                'margin/assets',
                'margin/financelog',
                'margin/mytrades',
                'margin/order',
                'margin/order/current',
                'margin/order/history',
                'margin/positions',
                'otc/financelog',
                'spot/assets',
                'spot/financelog',
                'spot/mytrades',
                'spot/order',
                'spot/order/current',
                'spot/order/history',
                'deposit/address',  # todo add fetchDepositAddress
                'deposit/history',  # todo add fetchDeposits
                'withdraw/history',  # todo add fetchWithdrawals
            ],
            'post': [
                '{market}/order/cancel',
                '{market}/order/new',
                '{market}​/order​/batch_new',
                'margin/order/cancel',
                'margin/order/new',
                'margin/position/close',
                'spot/order/cancel',
                'spot/order/new',
                'transfer',
                'withdraw/new',  # todo add withdraw()
                'withdraw/cancel',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': self.parse_number('0.002'),
            'taker': self.parse_number('0.002'),
        },
    },
    'exceptions': {
        'exact': {
            '10001': [BadRequest, "Wrong request method, please check it's a GET ot POST request"],
            '10002': [AuthenticationError, 'Invalid ApiKey'],
            '10003': [AuthenticationError, "Sign doesn't match"],
            '10004': [BadRequest, 'Illegal request parameters'],
            '10005': [DDoSProtection, 'Request frequency exceeds the limit'],
            '10006': [PermissionDenied, 'Unauthorized to execute self request'],
            '10007': [PermissionDenied, 'IP address Unauthorized'],
            '10008': [InvalidNonce, 'Timestamp for self request is invalid, timestamp must within 1 minute'],
            '10009': [NetworkError, 'Unexist endpoint, please check endpoint URL'],
            '10011': [AccountSuspended, 'ApiKey expired. Please go to client side to re-create an ApiKey'],
            '20001': [PermissionDenied, 'Trade is not open for self trading pair'],
            '20002': [PermissionDenied, 'Trade of self trading pair is suspended'],
            '20003': [InvalidOrder, 'Invalid price or amount'],
            '20007': [InvalidOrder, 'Price precision error'],
            '20008': [InvalidOrder, 'Amount precision error'],
            '20009': [InvalidOrder, 'Amount is less than the minimum requirement'],
            '20010': [InvalidOrder, 'Cash Amount is less than the minimum requirement'],
            '20011': [InsufficientFunds, 'Insufficient balance'],
            '20012': [BadRequest, 'Invalid trade type, valid value: buy/sell)'],
            '20013': [InvalidOrder, 'No order info found'],
            '20014': [BadRequest, 'Invalid date, Valid format: 2018-07-25)'],
            '20015': [BadRequest, 'Date exceeds the limit'],
            '20018': [PermissionDenied, 'Your trading rights have been banned by the system'],
            '20019': [BadSymbol, 'Wrong trading pair symbol. Correct format:"usdt_btc". Quote asset is in the front'],
            '20020': [DDoSProtection, "You have violated the API operation trading rules and temporarily forbid trading. At present, we have certain restrictions on the user's transaction rate and withdrawal rate."],
            '50000': [ExchangeError, 'Exception error'],
            '20021': [BadRequest, 'Invalid currency'],
            '20022': [BadRequest, 'The ending timestamp must be larger than the starting timestamp'],
            '20023': [BadRequest, 'Invalid transfer type'],
            '20024': [BadRequest, 'Invalid amount'],
            '20025': [BadRequest, 'This currency is not transferable at the moment'],
            '20026': [InsufficientFunds, 'Transfer amount exceed your balance'],
            '20027': [PermissionDenied, 'Abnormal account status'],
            '20028': [PermissionDenied, 'Blacklist for transfer'],
            '20029': [PermissionDenied, 'Transfer amount exceed your daily limit'],
            '20030': [BadRequest, 'You have no position on self trading pair'],
            '20032': [PermissionDenied, 'Withdrawal limited'],
            '20033': [BadRequest, 'Wrong Withdrawal ID'],
            '20034': [PermissionDenied, 'Withdrawal service of self crypto has been closed'],
            '20035': [PermissionDenied, 'Withdrawal limit'],
            '20036': [ExchangeError, 'Withdrawal cancellation failed'],
            '20037': [InvalidAddress, 'The withdrawal address, Tag or chain type is not included in the withdrawal management list'],
            '20038': [InvalidAddress, 'The withdrawal address is not on the white list'],
            '20039': [ExchangeError, "Can't be canceled in current status"],
            '20040': [RateLimitExceeded, 'Withdraw too frequently; limitation: 3 times a minute, 100 times a day'],
            '20041': [PermissionDenied, 'Beyond the daily withdrawal limit'],
            '20042': [BadSymbol, 'Current trading pair does not support API trading'],
        },
        'broad': {
        },
    },
    'options': {
        'defaultType': 'spot',
        'types': ['spot', 'margin', 'otc'],
    },
    'commonCurrencies': {
        'BHT': 'Black House Test',
        'EPS': 'Epanus',
        'FREE': 'FreeRossDAO',
        'MBN': 'Mobilian Coin',
        'TEL': 'TEL666',
    },
},
{
    'id': 'idex',
    'name': 'IDEX',
    'countries': ['US'],
    # public data endpoints 5 requests a second => 1000ms / 5 = 200ms between requests roughly(without Authentication)
    # all endpoints 10 requests a second =>(1000ms / rateLimit) / 10 => 1 / 2(with Authentication)
    'rateLimit': 200,
    'version': 'v2',
    'pro': True,
    'certified': True,
    'requiresWeb3': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelOrder': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': None,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': None,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1m',
        '5m': '5m',
        '15m': '15m',
        '30m': '30m',
        '1h': '1h',
        '6h': '6h',
        '1d': '1d',
    },
    'urls': {
        'test': {
            'MATIC': 'https://api-sandbox-matic.idex.io',
        },
        'logo': 'https://user-images.githubusercontent.com/51840849/94481303-2f222100-01e0-11eb-97dd-bc14c5943a86.jpg',
        'api': {
            'MATIC': 'https://api-matic.idex.io',
        },
        'www': 'https://idex.io',
        'doc': [
            'https://docs.idex.io/',
        ],
    },
    'api': {
        'public': {
            'get': {
                'ping': 1,
                'time': 1,
                'exchange': 1,
                'assets': 1,
                'markets': 1,
                'tickers': 1,
                'candles': 1,
                'trades': 1,
                'orderbook': 1,
            },
        },
        'private': {
            'get': {
                'user': 1,
                'wallets': 1,
                'balances': 1,
                'orders': 1,
                'fills': 1,
                'deposits': 1,
                'withdrawals': 1,
                'wsToken': 1,
            },
            'post': {
                'wallets': 1,
                'orders': 1,
                'orders/test': 1,
                'withdrawals': 1,
            },
            'delete': {
                'orders': 1,
            },
        },
    },
    'options': {
        'defaultTimeInForce': 'gtc',
        'defaultSelfTradePrevention': 'cn',
        'network': 'MATIC',
    },
    'exceptions': {
        'INVALID_ORDER_QUANTITY': InvalidOrder,
        'INSUFFICIENT_FUNDS': InsufficientFunds,
        'SERVICE_UNAVAILABLE': ExchangeNotAvailable,
        'EXCEEDED_RATE_LIMIT': DDoSProtection,
        'INVALID_PARAMETER': BadRequest,
        'WALLET_NOT_ASSOCIATED': InvalidAddress,
        'INVALID_WALLET_SIGNATURE': AuthenticationError,
    },
    'requiredCredentials': {
        'walletAddress': True,
        'privateKey': True,
        'apiKey': True,
        'secret': True,
    },
    'paddingMode': PAD_WITH_ZERO,
    'commonCurrencies': {},
},
{
    'id': 'paymium',
    'name': 'Paymium',
    'countries': ['FR', 'EU'],
    'rateLimit': 2000,
    'version': 'v1',
    'has': {
        'CORS': True,
        'spot': True,
        'margin': None,
        'swap': False,
        'future': False,
        'option': False,
        'cancelOrder': True,
        'createOrder': True,
        'fetchBalance': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkOHLCV': False,
        'fetchOrderBook': True,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87153930-f0f02200-c2c0-11ea-9c0a-40337375ae89.jpg',
        'api': 'https://paymium.com/api',
        'www': 'https://www.paymium.com',
        'fees': 'https://www.paymium.com/page/help/fees',
        'doc': [
            'https://github.com/Paymium/api-documentation',
            'https://www.paymium.com/page/developers',
        ],
        'referral': 'https://www.paymium.com/page/sign-up?referral=eDAzPoRQFMvaAB8sf-qj',
    },
    'api': {
        'public': {
            'get': [
                'countries',
                'data/{currency}/ticker',
                'data/{currency}/trades',
                'data/{currency}/depth',
                'bitcoin_charts/{id}/trades',
                'bitcoin_charts/{id}/depth',
            ],
        },
        'private': {
            'get': [
                'user',
                'user/addresses',
                'user/addresses/{address}',
                'user/orders',
                'user/orders/{uuid}',
                'user/price_alerts',
                'merchant/get_payment/{uuid}',
            ],
            'post': [
                'user/addresses',
                'user/orders',
                'user/withdrawals',
                'user/email_transfers',
                'user/payment_requests',
                'user/price_alerts',
                'merchant/create_payment',
            ],
            'delete': [
                'user/orders/{uuid}',
                'user/orders/{uuid}/cancel',
                'user/price_alerts/{id}',
            ],
        },
    },
    'markets': {
        'BTC/EUR': {'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'btc', 'quoteId': 'eur', 'type': 'spot', 'spot': True},
    },
    'fees': {
        'trading': {
            'maker': self.parse_number('-0.001'),
            'taker': self.parse_number('0.005'),
        },
    },
},
{
    'id': 'poloniex',
    'name': 'Poloniex',
    'countries': ['US'],
    'rateLimit': 166.667,  # 6 calls per second,  1000ms / 6 = 166.667ms between requests
    'certified': False,
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': None,  # has but not fully implemented
        'swap': None,  # has but not fully implemented
        'future': None,  # has but not fully implemented
        'option': None,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createMarketOrder': None,
        'createOrder': True,
        'editOrder': True,
        'fetchBalance': True,
        'fetchClosedOrder': 'emulated',
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchMarkets': True,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrder': True,  # True endpoint for a single open order
        'fetchOpenOrders': True,  # True endpoint for open orders
        'fetchOrderBook': True,
        'fetchOrderBooks': True,
        'fetchOrderTrades': True,  # True endpoint for trades of a single open or closed order
        'fetchPosition': True,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchTransactions': True,
        'fetchWithdrawals': True,
        'withdraw': True,
    },
    'timeframes': {
        '5m': 300,
        '15m': 900,
        '30m': 1800,
        '2h': 7200,
        '4h': 14400,
        '1d': 86400,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',
        'api': {
            'public': 'https://poloniex.com/public',
            'private': 'https://poloniex.com/tradingApi',
        },
        'www': 'https://www.poloniex.com',
        'doc': 'https://docs.poloniex.com',
        'fees': 'https://poloniex.com/fees',
        'referral': 'https://poloniex.com/signup?c=UBFZJRPJ',
    },
    'api': {
        'public': {
            'get': {
                'return24hVolume': 1,
                'returnChartData': 1,
                'returnCurrencies': 1,
                'returnLoanOrders': 1,
                'returnOrderBook': 1,
                'returnTicker': 1,
                'returnTradeHistory': 1,
            },
        },
        'private': {
            'post': {
                'buy': 1,
                'cancelLoanOffer': 1,
                'cancelOrder': 1,
                'cancelAllOrders': 1,
                'closeMarginPosition': 1,
                'createLoanOffer': 1,
                'generateNewAddress': 1,
                'getMarginPosition': 1,
                'marginBuy': 1,
                'marginSell': 1,
                'moveOrder': 1,
                'returnActiveLoans': 1,
                'returnAvailableAccountBalances': 1,
                'returnBalances': 1,
                'returnCompleteBalances': 1,
                'returnDepositAddresses': 1,
                'returnDepositsWithdrawals': 1,
                'returnFeeInfo': 1,
                'returnLendingHistory': 1,
                'returnMarginAccountSummary': 1,
                'returnOpenLoanOffers': 1,
                'returnOpenOrders': 1,
                'returnOrderTrades': 1,
                'returnOrderStatus': 1,
                'returnTradableBalances': 1,
                'returnTradeHistory': 1,
                'sell': 1,
                'toggleAutoRenew': 1,
                'transferBalance': 1,
                'withdraw': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'feeSide': 'get',
            # starting from Jan 8 2020
            'maker': self.parse_number('0.0009'),
            'taker': self.parse_number('0.0009'),
        },
        'funding': {},
    },
    'limits': {
        'amount': {
            'min': 0.000001,
            'max': None,
        },
        'price': {
            'min': 0.00000001,
            'max': 1000000000,
        },
        'cost': {
            'min': 0.00000000,
            'max': 1000000000,
        },
    },
    'precision': {
        'amount': 8,
        'price': 8,
    },
    'commonCurrencies': {
        'AIR': 'AirCoin',
        'APH': 'AphroditeCoin',
        'BCC': 'BTCtalkcoin',
        'BCHABC': 'BCHABC',
        'BDG': 'Badgercoin',
        'BTM': 'Bitmark',
        'CON': 'Coino',
        'GOLD': 'GoldEagles',
        'GPUC': 'GPU',
        'HOT': 'Hotcoin',
        'ITC': 'Information Coin',
        'KEY': 'KEYCoin',
        'MASK': 'NFTX Hashmasks Index',  # conflict with Mask Network
        'MEME': 'Degenerator Meme',  # Degenerator Meme migrated to Meme Inu, self exchange still has the old price
        'PLX': 'ParallaxCoin',
        'REPV2': 'REP',
        'STR': 'XLM',
        'SOC': 'SOCC',
        'TRADE': 'Unitrade',
        'XAP': 'API Coin',
        # self is not documented in the API docs for Poloniex
        # https://github.com/ccxt/ccxt/issues/7084
        # when the user calls withdraw('USDT', amount, address, tag, params)
        # with params = {'currencyToWithdrawAs': 'USDTTRON'}
        # or params = {'currencyToWithdrawAs': 'USDTETH'}
        # fetchWithdrawals('USDT') returns the corresponding withdrawals
        # with a USDTTRON or a USDTETH currency id, respectfully
        # therefore we have map them back to the original code USDT
        # otherwise the returned withdrawals are filtered out
        'USDTTRON': 'USDT',
        'USDTETH': 'USDT',
    },
    'options': {
        'networks': {
            'ERC20': 'ETH',
            'TRX': 'TRON',
            'TRC20': 'TRON',
        },
        'limits': {
            'cost': {
                'min': {
                    'BTC': 0.0001,
                    'ETH': 0.0001,
                    'USDT': 1.0,
                    'TRX': 100,
                    'BNB': 0.06,
                    'USDC': 1.0,
                    'USDJ': 1.0,
                    'TUSD': 0.0001,
                    'DAI': 1.0,
                    'PAX': 1.0,
                    'BUSD': 1.0,
                },
            },
        },
    },
    'exceptions': {
        'exact': {
            'You may only place orders that reduce your position.': InvalidOrder,
            'Invalid order number, or you are not the person who placed the order.': OrderNotFound,
            'Permission denied': PermissionDenied,
            'Permission denied.': PermissionDenied,
            'Connection timed out. Please try again.': RequestTimeout,
            'Internal error. Please try again.': ExchangeNotAvailable,
            'Currently in maintenance mode.': OnMaintenance,
            'Order not found, or you are not the person who placed it.': OrderNotFound,
            'Invalid API key/secret pair.': AuthenticationError,
            'Please do not make more than 8 API calls per second.': DDoSProtection,
            'Rate must be greater than zero.': InvalidOrder,  # {"error":"Rate must be greater than zero."}
            'Invalid currency pair.': BadSymbol,  # {"error":"Invalid currency pair."}
            'Invalid currencyPair parameter.': BadSymbol,  # {"error":"Invalid currencyPair parameter."}
            'Trading is disabled in self market.': BadSymbol,  # {"error":"Trading is disabled in self market."}
            'Invalid orderNumber parameter.': OrderNotFound,
            'Order is beyond acceptable bounds.': InvalidOrder,  # {"error":"Order is beyond acceptable bounds.","fee":"0.00155000","currencyPair":"USDT_BOBA"}
        },
        'broad': {
            'Total must be at least': InvalidOrder,  # {"error":"Total must be at least 0.0001."}
            'This account is frozen': AccountSuspended,  # {"error":"This account is frozen for trading."} or {"error":"This account is frozen."}
            'This account is locked.': AccountSuspended,  # {"error":"This account is locked."}
            'Not enough': InsufficientFunds,
            'Nonce must be greater': InvalidNonce,
            'You have already called cancelOrder or moveOrder on self order.': CancelPending,
            'Amount must be at least': InvalidOrder,  # {"error":"Amount must be at least 0.000001."}
            'is either completed or does not exist': OrderNotFound,  # {"error":"Order 587957810791 is either completed or does not exist."}
            'Error pulling ': ExchangeError,  # {"error":"Error pulling order book"}
        },
    },
},
{
    'id': 'bitpanda',
    'name': 'Bitpanda Pro',
    'countries': ['AT'],  # Austria
    'rateLimit': 300,
    'version': 'v1',
    # new metainfo interface
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'cancelOrders': True,
        'createDepositAddress': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLeverage': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrderTrades': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': True,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': True,
        'fetchWithdrawals': True,
        'privateAPI': True,
        'publicAPI': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '1/MINUTES',
        '5m': '5/MINUTES',
        '15m': '15/MINUTES',
        '30m': '30/MINUTES',
        '1h': '1/HOURS',
        '4h': '4/HOURS',
        '1d': '1/DAYS',
        '1w': '1/WEEKS',
        '1M': '1/MONTHS',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/51840849/87591171-9a377d80-c6f0-11ea-94ac-97a126eac3bc.jpg',
        'api': {
            'public': 'https://api.exchange.bitpanda.com/public',
            'private': 'https://api.exchange.bitpanda.com/public',
        },
        'www': 'https://www.bitpanda.com/en/pro',
        'doc': [
            'https://developers.bitpanda.com/exchange/',
        ],
        'fees': 'https://www.bitpanda.com/en/pro/fees',
    },
    'api': {
        'public': {
            'get': [
                'currencies',
                'candlesticks/{instrument_code}',
                'fees',
                'instruments',
                'order-book/{instrument_code}',
                'market-ticker',
                'market-ticker/{instrument_code}',
                'price-ticks/{instrument_code}',
                'time',
            ],
        },
        'private': {
            'get': [
                'account/balances',
                'account/deposit/crypto/{currency_code}',
                'account/deposit/fiat/EUR',
                'account/deposits',
                'account/deposits/bitpanda',
                'account/withdrawals',
                'account/withdrawals/bitpanda',
                'account/fees',
                'account/orders',
                'account/orders/{order_id}',
                'account/orders/{order_id}/trades',
                'account/trades',
                'account/trades/{trade_id}',
                'account/trading-volume',
            ],
            'post': [
                'account/deposit/crypto',
                'account/withdraw/crypto',
                'account/withdraw/fiat',
                'account/fees',
                'account/orders',
            ],
            'delete': [
                'account/orders',
                'account/orders/{order_id}',
                'account/orders/client/{client_id}',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': True,
            'percentage': True,
            'taker': self.parse_number('0.0015'),
            'maker': self.parse_number('0.001'),
            'tiers': [
                # volume in BTC
                {
                    'taker': [
                        [self.parse_number('0'), self.parse_number('0.0015')],
                        [self.parse_number('100'), self.parse_number('0.0013')],
                        [self.parse_number('250'), self.parse_number('0.0013')],
                        [self.parse_number('1000'), self.parse_number('0.001')],
                        [self.parse_number('5000'), self.parse_number('0.0009')],
                        [self.parse_number('10000'), self.parse_number('0.00075')],
                        [self.parse_number('20000'), self.parse_number('0.00065')],
                    ],
                    'maker': [
                        [self.parse_number('0'), self.parse_number('0.001')],
                        [self.parse_number('100'), self.parse_number('0.001')],
                        [self.parse_number('250'), self.parse_number('0.0009')],
                        [self.parse_number('1000'), self.parse_number('0.00075')],
                        [self.parse_number('5000'), self.parse_number('0.0006')],
                        [self.parse_number('10000'), self.parse_number('0.0005')],
                        [self.parse_number('20000'), self.parse_number('0.0005')],
                    ],
                },
            ],
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': False,
    },
    'exceptions': {
        'exact': {
            'INVALID_CLIENT_UUID': InvalidOrder,
            'ORDER_NOT_FOUND': OrderNotFound,
            'ONLY_ONE_ERC20_ADDRESS_ALLOWED': InvalidAddress,
            'DEPOSIT_ADDRESS_NOT_USED': InvalidAddress,
            'INVALID_CREDENTIALS': AuthenticationError,
            'MISSING_CREDENTIALS': AuthenticationError,
            'INVALID_APIKEY': AuthenticationError,
            'INVALID_SCOPES': AuthenticationError,
            'INVALID_SUBJECT': AuthenticationError,
            'INVALID_ISSUER': AuthenticationError,
            'INVALID_AUDIENCE': AuthenticationError,
            'INVALID_DEVICE_ID': AuthenticationError,
            'INVALID_IP_RESTRICTION': AuthenticationError,
            'APIKEY_REVOKED': AuthenticationError,
            'APIKEY_EXPIRED': AuthenticationError,
            'SYNCHRONIZER_TOKEN_MISMATCH': AuthenticationError,
            'SESSION_EXPIRED': AuthenticationError,
            'INTERNAL_ERROR': AuthenticationError,
            'CLIENT_IP_BLOCKED': PermissionDenied,
            'MISSING_PERMISSION': PermissionDenied,
            'ILLEGAL_CHARS': BadRequest,
            'UNSUPPORTED_MEDIA_TYPE': BadRequest,
            'ACCOUNT_HISTORY_TIME_RANGE_TOO_BIG': BadRequest,
            'CANDLESTICKS_TIME_RANGE_TOO_BIG': BadRequest,
            'INVALID_INSTRUMENT_CODE': BadRequest,
            'INVALID_ORDER_TYPE': BadRequest,
            'INVALID_UNIT': BadRequest,
            'INVALID_PERIOD': BadRequest,
            'INVALID_TIME': BadRequest,
            'INVALID_DATE': BadRequest,
            'INVALID_CURRENCY': BadRequest,
            'INVALID_AMOUNT': BadRequest,
            'INVALID_PRICE': BadRequest,
            'INVALID_LIMIT': BadRequest,
            'INVALID_QUERY': BadRequest,
            'INVALID_CURSOR': BadRequest,
            'INVALID_ACCOUNT_ID': BadRequest,
            'INVALID_SIDE': InvalidOrder,
            'INVALID_ACCOUNT_HISTORY_FROM_TIME': BadRequest,
            'INVALID_ACCOUNT_HISTORY_MAX_PAGE_SIZE': BadRequest,
            'INVALID_ACCOUNT_HISTORY_TIME_PERIOD': BadRequest,
            'INVALID_ACCOUNT_HISTORY_TO_TIME': BadRequest,
            'INVALID_CANDLESTICKS_GRANULARITY': BadRequest,
            'INVALID_CANDLESTICKS_UNIT': BadRequest,
            'INVALID_ORDER_BOOK_DEPTH': BadRequest,
            'INVALID_ORDER_BOOK_LEVEL': BadRequest,
            'INVALID_PAGE_CURSOR': BadRequest,
            'INVALID_TIME_RANGE': BadRequest,
            'INVALID_TRADE_ID': BadRequest,
            'INVALID_UI_ACCOUNT_SETTINGS': BadRequest,
            'NEGATIVE_AMOUNT': InvalidOrder,
            'NEGATIVE_PRICE': InvalidOrder,
            'MIN_SIZE_NOT_SATISFIED': InvalidOrder,
            'BAD_AMOUNT_PRECISION': InvalidOrder,
            'BAD_PRICE_PRECISION': InvalidOrder,
            'BAD_TRIGGER_PRICE_PRECISION': InvalidOrder,
            'MAX_OPEN_ORDERS_EXCEEDED': BadRequest,
            'MISSING_PRICE': InvalidOrder,
            'MISSING_ORDER_TYPE': InvalidOrder,
            'MISSING_SIDE': InvalidOrder,
            'MISSING_CANDLESTICKS_PERIOD_PARAM': ArgumentsRequired,
            'MISSING_CANDLESTICKS_UNIT_PARAM': ArgumentsRequired,
            'MISSING_FROM_PARAM': ArgumentsRequired,
            'MISSING_INSTRUMENT_CODE': ArgumentsRequired,
            'MISSING_ORDER_ID': InvalidOrder,
            'MISSING_TO_PARAM': ArgumentsRequired,
            'MISSING_TRADE_ID': ArgumentsRequired,
            'INVALID_ORDER_ID': OrderNotFound,
            'NOT_FOUND': OrderNotFound,
            'INSUFFICIENT_LIQUIDITY': InsufficientFunds,
            'INSUFFICIENT_FUNDS': InsufficientFunds,
            'NO_TRADING': ExchangeNotAvailable,
            'SERVICE_UNAVAILABLE': ExchangeNotAvailable,
            'GATEWAY_TIMEOUT': ExchangeNotAvailable,
            'RATELIMIT': DDoSProtection,
            'CF_RATELIMIT': DDoSProtection,
            'INTERNAL_SERVER_ERROR': ExchangeError,
        },
        'broad': {
        },
    },
    'commonCurrencies': {
        'MIOTA': 'IOTA',  # https://github.com/ccxt/ccxt/issues/7487
    },
    # exchange-specific options
    'options': {
        'fetchTradingFees': {
            'method': 'fetchPrivateTradingFees',  # or 'fetchPublicTradingFees'
        },
        'fiat': ['EUR', 'CHF'],
    },
},
{
    'id': 'ndax',
    'name': 'NDAX',
    'countries': ['CA'],  # Canada
    'rateLimit': 1000,
    'pro': True,
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'addMargin': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createDepositAddress': True,
        'createOrder': True,
        'createReduceOnlyOrder': False,
        'editOrder': True,
        'fetchAccounts': True,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchBorrowRatesPerSymbol': False,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': True,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchIsolatedPositions': False,
        'fetchLedger': True,
        'fetchLeverage': False,
        'fetchLeverageTiers': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': True,
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': True,
        'fetchOrderTrades': True,
        'fetchPosition': False,
        'fetchPositions': False,
        'fetchPositionsRisk': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTrades': True,
        'fetchWithdrawals': True,
        'reduceMargin': False,
        'setLeverage': False,
        'setMarginMode': False,
        'setPositionMode': False,
        'signIn': True,
        'withdraw': True,
    },
    'timeframes': {
        '1m': '60',
        '5m': '300',
        '15m': '900',
        '30m': '1800',
        '1h': '3600',
        '2h': '7200',
        '4h': '14400',
        '6h': '21600',
        '12h': '43200',
        '1d': '86400',
        '1w': '604800',
        '1M': '2419200',
        '4M': '9676800',
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/108623144-67a3ef00-744e-11eb-8140-75c6b851e945.jpg',
        'test': {
            'public': 'https://ndaxmarginstaging.cdnhop.net:8443/AP',
            'private': 'https://ndaxmarginstaging.cdnhop.net:8443/AP',
        },
        'api': {
            'public': 'https://api.ndax.io:8443/AP',
            'private': 'https://api.ndax.io:8443/AP',
        },
        'www': 'https://ndax.io',
        'doc': [
            'https://apidoc.ndax.io/',
        ],
        'fees': 'https://ndax.io/fees',
        'referral': 'https://one.ndax.io/bfQiSL',
    },
    'api': {
        'public': {
            'get': [
                'Activate2FA',
                'Authenticate2FA',
                'AuthenticateUser',
                'GetL2Snapshot',
                'GetLevel1',
                'GetValidate2FARequiredEndpoints',
                'LogOut',
                'GetTickerHistory',
                'GetProduct',
                'GetProducts',
                'GetInstrument',
                'GetInstruments',
                'Ping',
                'trades',  # undocumented
                'GetLastTrades',  # undocumented
                'SubscribeLevel1',
                'SubscribeLevel2',
                'SubscribeTicker',
                'SubscribeTrades',
                'SubscribeBlockTrades',
                'UnsubscribeBlockTrades',
                'UnsubscribeLevel1',
                'UnsubscribeLevel2',
                'UnsubscribeTicker',
                'UnsubscribeTrades',
                'Authenticate',  # undocumented
            ],
        },
        'private': {
            'get': [
                'GetUserAccountInfos',
                'GetUserAccounts',
                'GetUserAffiliateCount',
                'GetUserAffiliateTag',
                'GetUserConfig',
                'GetAllUnredactedUserConfigsForUser',
                'GetUnredactedUserConfigByKey',
                'GetUserDevices',
                'GetUserReportTickets',
                'GetUserReportWriterResultRecords',
                'GetAccountInfo',
                'GetAccountPositions',
                'GetAllAccountConfigs',
                'GetTreasuryProductsForAccount',
                'GetAccountTrades',
                'GetAccountTransactions',
                'GetOpenTradeReports',
                'GetAllOpenTradeReports',
                'GetTradesHistory',
                'GetOpenOrders',
                'GetOpenQuotes',
                'GetOrderFee',
                'GetOrderHistory',
                'GetOrdersHistory',
                'GetOrderStatus',
                'GetOmsFeeTiers',
                'GetAccountDepositTransactions',
                'GetAccountWithdrawTransactions',
                'GetAllDepositRequestInfoTemplates',
                'GetDepositInfo',
                'GetDepositRequestInfoTemplate',
                'GetDeposits',
                'GetDepositTicket',
                'GetDepositTickets',
                'GetOMSWithdrawFees',
                'GetWithdrawFee',
                'GetWithdraws',
                'GetWithdrawTemplate',
                'GetWithdrawTemplateTypes',
                'GetWithdrawTicket',
                'GetWithdrawTickets',
            ],
            'post': [
                'AddUserAffiliateTag',
                'CancelUserReport',
                'RegisterNewDevice',
                'SubscribeAccountEvents',
                'UpdateUserAffiliateTag',
                'GenerateTradeActivityReport',
                'GenerateTransactionActivityReport',
                'GenerateTreasuryActivityReport',
                'ScheduleTradeActivityReport',
                'ScheduleTransactionActivityReport',
                'ScheduleTreasuryActivityReport',
                'CancelAllOrders',
                'CancelOrder',
                'CancelQuote',
                'CancelReplaceOrder',
                'CreateQuote',
                'ModifyOrder',
                'SendOrder',
                'SubmitBlockTrade',
                'UpdateQuote',
                'CancelWithdraw',
                'CreateDepositTicket',
                'CreateWithdrawTicket',
                'SubmitDepositTicketComment',
                'SubmitWithdrawTicketComment',
                'GetOrderHistoryByOrderId',
            ],
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': 0.2 / 100,
            'taker': 0.25 / 100,
        },
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': True,
        'uid': True,
        # these credentials are required for signIn() and withdraw()
        'login': True,
        'password': True,
        # 'twofa': True,
    },
    'precisionMode': TICK_SIZE,
    'exceptions': {
        'exact': {
            'Not_Enough_Funds': InsufficientFunds,  # {"status":"Rejected","errormsg":"Not_Enough_Funds","errorcode":101}
            'Server Error': ExchangeError,  # {"result":false,"errormsg":"Server Error","errorcode":102,"detail":null}
            'Resource Not Found': OrderNotFound,  # {"result":false,"errormsg":"Resource Not Found","errorcode":104,"detail":null}
        },
        'broad': {
            'Invalid InstrumentId': BadSymbol,  # {"result":false,"errormsg":"Invalid InstrumentId: 10000","errorcode":100,"detail":null}
            'This endpoint requires 2FACode along with the payload': AuthenticationError,
        },
    },
    'options': {
        'omsId': 1,
        'orderTypes': {
            'Market': 1,
            'Limit': 2,
            'StopMarket': 3,
            'StopLimit': 4,
            'TrailingStopMarket': 5,
            'TrailingStopLimit': 6,
            'BlockTrade': 7,
        },
    },
},
{
    'id': 'lykke',
    'name': 'Lykke',
    'countries': ['UK'],
    'version': '2',
    # 300 requests per minute per method => 60000ms / 300 = 200(/api/orders/*)
    # 120 requests per minute per method =>( 60000ms / rateLimit ) / 120 = cost = 2.5(/api/*)
    'rateLimit': 200,  # TODO: optim\ize https://lykkecity.github.io/Trading-API/#request-rate-limits
    'has': {
        'CORS': None,
        'spot': True,
        'margin': False,
        'swap': False,
        'future': False,
        'option': False,
        'cancelAllOrders': True,
        'cancelOrder': True,
        'createOrder': True,
        'editOrder': False,
        'fetchBalance': True,
        'fetchBorrowRate': False,
        'fetchBorrowRateHistories': False,
        'fetchBorrowRateHistory': False,
        'fetchBorrowRates': False,
        'fetchClosedOrders': True,
        'fetchCurrencies': True,
        'fetchDepositAddress': True,
        'fetchDeposits': False,
        'fetchFundingFees': False,
        'fetchFundingHistory': False,
        'fetchFundingRate': False,
        'fetchFundingRateHistory': False,
        'fetchFundingRates': False,
        'fetchIndexOHLCV': False,
        'fetchMarkets': True,
        'fetchMarkOHLCV': False,
        'fetchMyTrades': True,
        'fetchOHLCV': 'emulated',
        'fetchOpenOrders': True,
        'fetchOrder': True,
        'fetchOrderBook': True,
        'fetchOrders': False,
        'fetchOrderTrades': False,
        'fetchPositions': False,
        'fetchPremiumIndexOHLCV': False,
        'fetchTicker': True,
        'fetchTickers': True,
        'fetchTime': False,
        'fetchTrades': True,
        'fetchTradingFee': False,
        'fetchTradingFees': False,
        'fetchTransactions': True,
        'fetchWithdrawals': False,
        'setLeverage': False,
        'setMarginMode': False,
        'withdraw': True,
    },
    'requiredCredentials': {
        'apiKey': True,
        'secret': False,
    },
    'urls': {
        'logo': 'https://user-images.githubusercontent.com/1294454/155840500-1ea4fdf0-47c0-4daa-9597-c6c1cd51b9ec.jpg',
        'api': {
            'public': 'https://hft-apiv2.lykke.com/api',
            'private': 'https://hft-apiv2.lykke.com/api',
        },
        'www': 'https://www.lykke.com',
        'doc': [
            'https://hft-apiv2.lykke.com/swagger/ui/index.html',
            'https://lykkecity.github.io/Trading-API',
        ],
        'fees': 'https://support.lykke.com/hc/en-us/articles/115002141125-What-are-the-fees-and-charges-',  # zero fee
    },
    'api': {
        'public': {
            'get': {
                'assetpairs': 2.5,
                'assetpairs/{id}': 2.5,
                'assets': 2.5,
                'assets/{id}': 2.5,
                'isalive': 2.5,
                'orderbooks': 2.5,
                'tickers': 2.5,
                'prices': 2.5,
                'trades/public/{assetPairId}': 2.5,
            },
        },
        'private': {
            'get': {
                'balance': 2.5,
                'trades': 2.5,
                'trades/order/{orderId}': 2.5,
                'orders/active': 1,
                'orders/closed': 1,
                'orders/{orderId}': 1,
                'operations': 2.5,
                'operations/deposits/addresses': 2.5,
                'operations/deposits/addresses/{assetId}': 2.5,
            },
            'post': {
                'orders/limit': 1,
                'orders/market': 1,
                'orders/bulk': 1,
                'operations/withdrawals': 2.5,
                'operations/deposits/addresses': 2.5,
            },
            'delete': {
                'orders': 1,
                'orders/{orderId}': 1,
            },
        },
    },
    'fees': {
        'trading': {
            'tierBased': False,
            'percentage': True,
            'maker': 0,  # https://support.lykke.com/hc/en-us/articles/115002141125-What-are-the-fees-and-min-amounts-
            'taker': 0,
        },
    },
    'exceptions': {
        'exact': {
            '1001': ExchangeError,
            '1100': ExchangeError,
            '1101': ExchangeError,
            '2000': BadRequest,
            '2001': InsufficientFunds,
            '2202': DuplicateOrderId,
            '2003': ExchangeError,
            '2004': NotSupported,
            '2005': ExchangeError,
            '2006': InsufficientFunds,
            '2007': InsufficientFunds,
            '2008': InsufficientFunds,
            '2009': ExchangeError,
            '2010': InsufficientFunds,
            '2011': InvalidOrder,
            '2012': InvalidOrder,
            '2013': InvalidOrder,
            '2014': InvalidOrder,
            '2015': InvalidOrder,
            '2016': InvalidOrder,
            '2017': InvalidOrder,
            '2018': InvalidOrder,
            '2019': InvalidOrder,
            '2020': InvalidOrder,
            '2021': InvalidOrder,
            '2022': InvalidOrder,
            '2023': ExchangeError,
        },
        'broad': {},
    },
    'commonCurrencies': {
    },
}]

